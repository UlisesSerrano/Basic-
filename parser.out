Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON g_var funcs main
Rule 2     main -> MAIN L_P params R_P var_declaration L_B statements R_B
Rule 3     type -> INT
Rule 4     type -> FLOAT
Rule 5     type -> CHAR
Rule 6     g_var -> var_declaration
Rule 7     g_var -> empty
Rule 8     funcs -> function funcs
Rule 9     funcs -> empty
Rule 10    var_declaration -> VAR var1
Rule 11    var_declaration -> empty
Rule 12    var1 -> var_type dec_id var2 SEMICOLON var4
Rule 13    var2 -> COMA dec_id var3
Rule 14    var2 -> empty
Rule 15    var3 -> var2
Rule 16    var4 -> var1
Rule 17    var4 -> empty
Rule 18    dec_id -> ID dec_id1
Rule 19    dec_id1 -> L_SB CTE_I R_SB dec_id2
Rule 20    dec_id1 -> empty
Rule 21    dec_id2 -> L_SB CTE_I R_SB
Rule 22    dec_id2 -> empty
Rule 23    id -> ID id1
Rule 24    id1 -> L_SB expression R_SB id2
Rule 25    id1 -> empty
Rule 26    id2 -> L_SB expression R_SB
Rule 27    id2 -> empty
Rule 28    var_type -> type
Rule 29    function -> FUNC func_type ID L_P params R_P var_declaration L_B statements R_B
Rule 30    func_type -> VOID
Rule 31    func_type -> type
Rule 32    params -> var_type id params1
Rule 33    params -> empty
Rule 34    params1 -> COMA params
Rule 35    params1 -> empty
Rule 36    statements -> statement statements
Rule 37    statements -> empty
Rule 38    statement -> assignation
Rule 39    statement -> call_func
Rule 40    statement -> return_func
Rule 41    statement -> read
Rule 42    statement -> write
Rule 43    statement -> decision_statement
Rule 44    statement -> repetition_statement
Rule 45    statement -> expression
Rule 46    assignation -> id EQUAL expression SEMICOLON
Rule 47    args -> args1
Rule 48    args -> empty
Rule 49    args1 -> expression args2
Rule 50    args2 -> COMA args1
Rule 51    args2 -> empty
Rule 52    call_func -> ID L_P args R_P SEMICOLON
Rule 53    return_func -> RETURN L_P expression R_P SEMICOLON
Rule 54    read -> READ L_P read_args R_P SEMICOLON
Rule 55    read_args -> expression read_args1
Rule 56    read_args1 -> COMA expression read_args1
Rule 57    read_args1 -> empty
Rule 58    write -> PRINT L_P write_args R_P SEMICOLON
Rule 59    write_args -> write_args2 write_args1
Rule 60    write_args1 -> COMA write_args2 write_args1
Rule 61    write_args1 -> empty
Rule 62    write_args2 -> expression
Rule 63    write_args2 -> CTE_STRING
Rule 64    decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1
Rule 65    decision_statement1 -> ELSE L_B statements R_B
Rule 66    decision_statement1 -> empty
Rule 67    repetition_statement -> while_statement
Rule 68    repetition_statement -> for_statement
Rule 69    for_statement -> FOR id EQUAL expression TO expression do_statement
Rule 70    while_statement -> WHILE L_P expression R_P do_statement
Rule 71    do_statement -> DO L_B statements R_B
Rule 72    expression -> texp op1
Rule 73    texp -> gexp op2
Rule 74    gexp -> mexp op3aux
Rule 75    mexp -> term op4aux
Rule 76    term -> fact op5aux
Rule 77    fact -> ID fact1
Rule 78    fact -> L_P expression R_P
Rule 79    fact -> cte
Rule 80    fact1 -> L_P args R_P
Rule 81    fact1 -> id1
Rule 82    cte -> CTE_I
Rule 83    cte -> CTE_F
Rule 84    cte -> CTE_CHAR
Rule 85    op1 -> OR expression
Rule 86    op1 -> empty
Rule 87    op2 -> AND texp
Rule 88    op2 -> empty
Rule 89    op3 -> LESSTHAN
Rule 90    op3 -> LESSTHANEQ
Rule 91    op3 -> GREATERTHAN
Rule 92    op3 -> GREATERTHANEQ
Rule 93    op3 -> EQ
Rule 94    op3 -> DIFERENT
Rule 95    op3aux -> op3 mexp
Rule 96    op3aux -> empty
Rule 97    op4 -> PLUS
Rule 98    op4 -> MINUS
Rule 99    op4aux -> op4 mexp
Rule 100   op4aux -> empty
Rule 101   op5 -> MULT
Rule 102   op5 -> DIV
Rule 103   op5 -> MOD
Rule 104   op5aux -> op5 term
Rule 105   op5aux -> empty
Rule 106   empty -> <empty>

Terminals, with rules where they appear

AND                  : 87
CHAR                 : 5
COMA                 : 13 34 50 56 60
CTE_CHAR             : 84
CTE_F                : 83
CTE_I                : 19 21 82
CTE_STRING           : 63
DIFERENT             : 94
DIV                  : 102
DO                   : 71
ELSE                 : 65
EQ                   : 93
EQUAL                : 46 69
FLOAT                : 4
FOR                  : 69
FUNC                 : 29
GREATERTHAN          : 91
GREATERTHANEQ        : 92
ID                   : 1 18 23 29 52 77
IF                   : 64
INT                  : 3
LESSTHAN             : 89
LESSTHANEQ           : 90
L_B                  : 2 29 64 65 71
L_P                  : 2 29 52 53 54 58 64 70 78 80
L_SB                 : 19 21 24 26
MAIN                 : 2
MINUS                : 98
MOD                  : 103
MULT                 : 101
OR                   : 85
PLUS                 : 97
PRINT                : 58
PROGRAM              : 1
READ                 : 54
RETURN               : 53
R_B                  : 2 29 64 65 71
R_P                  : 2 29 52 53 54 58 64 70 78 80
R_SB                 : 19 21 24 26
SEMICOLON            : 1 12 46 52 53 54 58
TO                   : 69
VAR                  : 10
VOID                 : 30
WHILE                : 70
error                : 

Nonterminals, with rules where they appear

args                 : 52 80
args1                : 47 50
args2                : 49
assignation          : 38
call_func            : 39
cte                  : 79
dec_id               : 12 13
dec_id1              : 18
dec_id2              : 19
decision_statement   : 43
decision_statement1  : 64
do_statement         : 69 70
empty                : 7 9 11 14 17 20 22 25 27 33 35 37 48 51 57 61 66 86 88 96 100 105
expression           : 24 26 45 46 49 53 55 56 62 64 69 69 70 78 85
fact                 : 76
fact1                : 77
for_statement        : 68
func_type            : 29
funcs                : 1 8
function             : 8
g_var                : 1
gexp                 : 73
id                   : 32 46 69
id1                  : 23 81
id2                  : 24
main                 : 1
mexp                 : 74 95 99
op1                  : 72
op2                  : 73
op3                  : 95
op3aux               : 74
op4                  : 99
op4aux               : 75
op5                  : 104
op5aux               : 76
params               : 2 29 34
params1              : 32
program              : 0
read                 : 41
read_args            : 54
read_args1           : 55 56
repetition_statement : 44
return_func          : 40
statement            : 36
statements           : 2 29 36 64 65 71
term                 : 75 104
texp                 : 72 87
type                 : 28 31
var1                 : 10 16
var2                 : 12 15
var3                 : 13
var4                 : 12
var_declaration      : 2 6 29
var_type             : 12 32
while_statement      : 67
write                : 42
write_args           : 58
write_args1          : 59 60
write_args2          : 59 60

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON g_var funcs main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON g_var funcs main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON g_var funcs main

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . g_var funcs main
    (6) g_var -> . var_declaration
    (7) g_var -> . empty
    (10) var_declaration -> . VAR var1
    (11) var_declaration -> . empty
    (106) empty -> .

    VAR             shift and go to state 8
    FUNC            reduce using rule 106 (empty -> .)
    MAIN            reduce using rule 106 (empty -> .)

    g_var                          shift and go to state 5
    var_declaration                shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) program -> PROGRAM ID SEMICOLON g_var . funcs main
    (8) funcs -> . function funcs
    (9) funcs -> . empty
    (29) function -> . FUNC func_type ID L_P params R_P var_declaration L_B statements R_B
    (106) empty -> .

    FUNC            shift and go to state 12
    MAIN            reduce using rule 106 (empty -> .)

    funcs                          shift and go to state 9
    function                       shift and go to state 10
    empty                          shift and go to state 11

state 6

    (6) g_var -> var_declaration .

    FUNC            reduce using rule 6 (g_var -> var_declaration .)
    MAIN            reduce using rule 6 (g_var -> var_declaration .)


state 7

    (7) g_var -> empty .
    (11) var_declaration -> empty .

  ! reduce/reduce conflict for FUNC resolved using rule 7 (g_var -> empty .)
  ! reduce/reduce conflict for MAIN resolved using rule 7 (g_var -> empty .)
    FUNC            reduce using rule 7 (g_var -> empty .)
    MAIN            reduce using rule 7 (g_var -> empty .)

  ! FUNC            [ reduce using rule 11 (var_declaration -> empty .) ]
  ! MAIN            [ reduce using rule 11 (var_declaration -> empty .) ]


state 8

    (10) var_declaration -> VAR . var1
    (12) var1 -> . var_type dec_id var2 SEMICOLON var4
    (28) var_type -> . type
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    var1                           shift and go to state 13
    var_type                       shift and go to state 14
    type                           shift and go to state 15

state 9

    (1) program -> PROGRAM ID SEMICOLON g_var funcs . main
    (2) main -> . MAIN L_P params R_P var_declaration L_B statements R_B

    MAIN            shift and go to state 20

    main                           shift and go to state 19

state 10

    (8) funcs -> function . funcs
    (8) funcs -> . function funcs
    (9) funcs -> . empty
    (29) function -> . FUNC func_type ID L_P params R_P var_declaration L_B statements R_B
    (106) empty -> .

    FUNC            shift and go to state 12
    MAIN            reduce using rule 106 (empty -> .)

    function                       shift and go to state 10
    funcs                          shift and go to state 21
    empty                          shift and go to state 11

state 11

    (9) funcs -> empty .

    MAIN            reduce using rule 9 (funcs -> empty .)


state 12

    (29) function -> FUNC . func_type ID L_P params R_P var_declaration L_B statements R_B
    (30) func_type -> . VOID
    (31) func_type -> . type
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    VOID            shift and go to state 23
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    func_type                      shift and go to state 22
    type                           shift and go to state 24

state 13

    (10) var_declaration -> VAR var1 .

    FUNC            reduce using rule 10 (var_declaration -> VAR var1 .)
    MAIN            reduce using rule 10 (var_declaration -> VAR var1 .)
    L_B             reduce using rule 10 (var_declaration -> VAR var1 .)


state 14

    (12) var1 -> var_type . dec_id var2 SEMICOLON var4
    (18) dec_id -> . ID dec_id1

    ID              shift and go to state 26

    dec_id                         shift and go to state 25

state 15

    (28) var_type -> type .

    ID              reduce using rule 28 (var_type -> type .)


state 16

    (3) type -> INT .

    ID              reduce using rule 3 (type -> INT .)


state 17

    (4) type -> FLOAT .

    ID              reduce using rule 4 (type -> FLOAT .)


state 18

    (5) type -> CHAR .

    ID              reduce using rule 5 (type -> CHAR .)


state 19

    (1) program -> PROGRAM ID SEMICOLON g_var funcs main .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON g_var funcs main .)


state 20

    (2) main -> MAIN . L_P params R_P var_declaration L_B statements R_B

    L_P             shift and go to state 27


state 21

    (8) funcs -> function funcs .

    MAIN            reduce using rule 8 (funcs -> function funcs .)


state 22

    (29) function -> FUNC func_type . ID L_P params R_P var_declaration L_B statements R_B

    ID              shift and go to state 28


state 23

    (30) func_type -> VOID .

    ID              reduce using rule 30 (func_type -> VOID .)


state 24

    (31) func_type -> type .

    ID              reduce using rule 31 (func_type -> type .)


state 25

    (12) var1 -> var_type dec_id . var2 SEMICOLON var4
    (13) var2 -> . COMA dec_id var3
    (14) var2 -> . empty
    (106) empty -> .

    COMA            shift and go to state 30
    SEMICOLON       reduce using rule 106 (empty -> .)

    var2                           shift and go to state 29
    empty                          shift and go to state 31

state 26

    (18) dec_id -> ID . dec_id1
    (19) dec_id1 -> . L_SB CTE_I R_SB dec_id2
    (20) dec_id1 -> . empty
    (106) empty -> .

    L_SB            shift and go to state 33
    COMA            reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)

    dec_id1                        shift and go to state 32
    empty                          shift and go to state 34

state 27

    (2) main -> MAIN L_P . params R_P var_declaration L_B statements R_B
    (32) params -> . var_type id params1
    (33) params -> . empty
    (28) var_type -> . type
    (106) empty -> .
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    R_P             reduce using rule 106 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    params                         shift and go to state 35
    var_type                       shift and go to state 36
    empty                          shift and go to state 37
    type                           shift and go to state 15

state 28

    (29) function -> FUNC func_type ID . L_P params R_P var_declaration L_B statements R_B

    L_P             shift and go to state 38


state 29

    (12) var1 -> var_type dec_id var2 . SEMICOLON var4

    SEMICOLON       shift and go to state 39


state 30

    (13) var2 -> COMA . dec_id var3
    (18) dec_id -> . ID dec_id1

    ID              shift and go to state 26

    dec_id                         shift and go to state 40

state 31

    (14) var2 -> empty .

    SEMICOLON       reduce using rule 14 (var2 -> empty .)


state 32

    (18) dec_id -> ID dec_id1 .

    COMA            reduce using rule 18 (dec_id -> ID dec_id1 .)
    SEMICOLON       reduce using rule 18 (dec_id -> ID dec_id1 .)


state 33

    (19) dec_id1 -> L_SB . CTE_I R_SB dec_id2

    CTE_I           shift and go to state 41


state 34

    (20) dec_id1 -> empty .

    COMA            reduce using rule 20 (dec_id1 -> empty .)
    SEMICOLON       reduce using rule 20 (dec_id1 -> empty .)


state 35

    (2) main -> MAIN L_P params . R_P var_declaration L_B statements R_B

    R_P             shift and go to state 42


state 36

    (32) params -> var_type . id params1
    (23) id -> . ID id1

    ID              shift and go to state 44

    id                             shift and go to state 43

state 37

    (33) params -> empty .

    R_P             reduce using rule 33 (params -> empty .)


state 38

    (29) function -> FUNC func_type ID L_P . params R_P var_declaration L_B statements R_B
    (32) params -> . var_type id params1
    (33) params -> . empty
    (28) var_type -> . type
    (106) empty -> .
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    R_P             reduce using rule 106 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    params                         shift and go to state 45
    var_type                       shift and go to state 36
    empty                          shift and go to state 37
    type                           shift and go to state 15

state 39

    (12) var1 -> var_type dec_id var2 SEMICOLON . var4
    (16) var4 -> . var1
    (17) var4 -> . empty
    (12) var1 -> . var_type dec_id var2 SEMICOLON var4
    (106) empty -> .
    (28) var_type -> . type
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    FUNC            reduce using rule 106 (empty -> .)
    MAIN            reduce using rule 106 (empty -> .)
    L_B             reduce using rule 106 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    var_type                       shift and go to state 14
    var4                           shift and go to state 46
    var1                           shift and go to state 47
    empty                          shift and go to state 48
    type                           shift and go to state 15

state 40

    (13) var2 -> COMA dec_id . var3
    (15) var3 -> . var2
    (13) var2 -> . COMA dec_id var3
    (14) var2 -> . empty
    (106) empty -> .

    COMA            shift and go to state 30
    SEMICOLON       reduce using rule 106 (empty -> .)

    var3                           shift and go to state 49
    var2                           shift and go to state 50
    empty                          shift and go to state 31

state 41

    (19) dec_id1 -> L_SB CTE_I . R_SB dec_id2

    R_SB            shift and go to state 51


state 42

    (2) main -> MAIN L_P params R_P . var_declaration L_B statements R_B
    (10) var_declaration -> . VAR var1
    (11) var_declaration -> . empty
    (106) empty -> .

    VAR             shift and go to state 8
    L_B             reduce using rule 106 (empty -> .)

    var_declaration                shift and go to state 52
    empty                          shift and go to state 53

state 43

    (32) params -> var_type id . params1
    (34) params1 -> . COMA params
    (35) params1 -> . empty
    (106) empty -> .

    COMA            shift and go to state 55
    R_P             reduce using rule 106 (empty -> .)

    params1                        shift and go to state 54
    empty                          shift and go to state 56

state 44

    (23) id -> ID . id1
    (24) id1 -> . L_SB expression R_SB id2
    (25) id1 -> . empty
    (106) empty -> .

    L_SB            shift and go to state 58
    COMA            reduce using rule 106 (empty -> .)
    R_P             reduce using rule 106 (empty -> .)
    EQUAL           reduce using rule 106 (empty -> .)

    id1                            shift and go to state 57
    empty                          shift and go to state 59

state 45

    (29) function -> FUNC func_type ID L_P params . R_P var_declaration L_B statements R_B

    R_P             shift and go to state 60


state 46

    (12) var1 -> var_type dec_id var2 SEMICOLON var4 .

    FUNC            reduce using rule 12 (var1 -> var_type dec_id var2 SEMICOLON var4 .)
    MAIN            reduce using rule 12 (var1 -> var_type dec_id var2 SEMICOLON var4 .)
    L_B             reduce using rule 12 (var1 -> var_type dec_id var2 SEMICOLON var4 .)


state 47

    (16) var4 -> var1 .

    FUNC            reduce using rule 16 (var4 -> var1 .)
    MAIN            reduce using rule 16 (var4 -> var1 .)
    L_B             reduce using rule 16 (var4 -> var1 .)


state 48

    (17) var4 -> empty .

    FUNC            reduce using rule 17 (var4 -> empty .)
    MAIN            reduce using rule 17 (var4 -> empty .)
    L_B             reduce using rule 17 (var4 -> empty .)


state 49

    (13) var2 -> COMA dec_id var3 .

    SEMICOLON       reduce using rule 13 (var2 -> COMA dec_id var3 .)


state 50

    (15) var3 -> var2 .

    SEMICOLON       reduce using rule 15 (var3 -> var2 .)


state 51

    (19) dec_id1 -> L_SB CTE_I R_SB . dec_id2
    (21) dec_id2 -> . L_SB CTE_I R_SB
    (22) dec_id2 -> . empty
    (106) empty -> .

    L_SB            shift and go to state 61
    COMA            reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)

    dec_id2                        shift and go to state 62
    empty                          shift and go to state 63

state 52

    (2) main -> MAIN L_P params R_P var_declaration . L_B statements R_B

    L_B             shift and go to state 64


state 53

    (11) var_declaration -> empty .

    L_B             reduce using rule 11 (var_declaration -> empty .)


state 54

    (32) params -> var_type id params1 .

    R_P             reduce using rule 32 (params -> var_type id params1 .)


state 55

    (34) params1 -> COMA . params
    (32) params -> . var_type id params1
    (33) params -> . empty
    (28) var_type -> . type
    (106) empty -> .
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    R_P             reduce using rule 106 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    params                         shift and go to state 65
    var_type                       shift and go to state 36
    empty                          shift and go to state 37
    type                           shift and go to state 15

state 56

    (35) params1 -> empty .

    R_P             reduce using rule 35 (params1 -> empty .)


state 57

    (23) id -> ID id1 .

    COMA            reduce using rule 23 (id -> ID id1 .)
    R_P             reduce using rule 23 (id -> ID id1 .)
    EQUAL           reduce using rule 23 (id -> ID id1 .)


state 58

    (24) id1 -> L_SB . expression R_SB id2
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expression                     shift and go to state 66
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 59

    (25) id1 -> empty .

    COMA            reduce using rule 25 (id1 -> empty .)
    R_P             reduce using rule 25 (id1 -> empty .)
    EQUAL           reduce using rule 25 (id1 -> empty .)
    MULT            reduce using rule 25 (id1 -> empty .)
    DIV             reduce using rule 25 (id1 -> empty .)
    MOD             reduce using rule 25 (id1 -> empty .)
    PLUS            reduce using rule 25 (id1 -> empty .)
    MINUS           reduce using rule 25 (id1 -> empty .)
    LESSTHAN        reduce using rule 25 (id1 -> empty .)
    LESSTHANEQ      reduce using rule 25 (id1 -> empty .)
    GREATERTHAN     reduce using rule 25 (id1 -> empty .)
    GREATERTHANEQ   reduce using rule 25 (id1 -> empty .)
    EQ              reduce using rule 25 (id1 -> empty .)
    DIFERENT        reduce using rule 25 (id1 -> empty .)
    AND             reduce using rule 25 (id1 -> empty .)
    OR              reduce using rule 25 (id1 -> empty .)
    R_SB            reduce using rule 25 (id1 -> empty .)
    ID              reduce using rule 25 (id1 -> empty .)
    RETURN          reduce using rule 25 (id1 -> empty .)
    READ            reduce using rule 25 (id1 -> empty .)
    PRINT           reduce using rule 25 (id1 -> empty .)
    IF              reduce using rule 25 (id1 -> empty .)
    WHILE           reduce using rule 25 (id1 -> empty .)
    FOR             reduce using rule 25 (id1 -> empty .)
    L_P             reduce using rule 25 (id1 -> empty .)
    CTE_I           reduce using rule 25 (id1 -> empty .)
    CTE_F           reduce using rule 25 (id1 -> empty .)
    CTE_CHAR        reduce using rule 25 (id1 -> empty .)
    R_B             reduce using rule 25 (id1 -> empty .)
    SEMICOLON       reduce using rule 25 (id1 -> empty .)
    TO              reduce using rule 25 (id1 -> empty .)
    DO              reduce using rule 25 (id1 -> empty .)


state 60

    (29) function -> FUNC func_type ID L_P params R_P . var_declaration L_B statements R_B
    (10) var_declaration -> . VAR var1
    (11) var_declaration -> . empty
    (106) empty -> .

    VAR             shift and go to state 8
    L_B             reduce using rule 106 (empty -> .)

    var_declaration                shift and go to state 78
    empty                          shift and go to state 53

state 61

    (21) dec_id2 -> L_SB . CTE_I R_SB

    CTE_I           shift and go to state 79


state 62

    (19) dec_id1 -> L_SB CTE_I R_SB dec_id2 .

    COMA            reduce using rule 19 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)
    SEMICOLON       reduce using rule 19 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)


state 63

    (22) dec_id2 -> empty .

    COMA            reduce using rule 22 (dec_id2 -> empty .)
    SEMICOLON       reduce using rule 22 (dec_id2 -> empty .)


state 64

    (2) main -> MAIN L_P params R_P var_declaration L_B . statements R_B
    (36) statements -> . statement statements
    (37) statements -> . empty
    (38) statement -> . assignation
    (39) statement -> . call_func
    (40) statement -> . return_func
    (41) statement -> . read
    (42) statement -> . write
    (43) statement -> . decision_statement
    (44) statement -> . repetition_statement
    (45) statement -> . expression
    (106) empty -> .
    (46) assignation -> . id EQUAL expression SEMICOLON
    (52) call_func -> . ID L_P args R_P SEMICOLON
    (53) return_func -> . RETURN L_P expression R_P SEMICOLON
    (54) read -> . READ L_P read_args R_P SEMICOLON
    (58) write -> . PRINT L_P write_args R_P SEMICOLON
    (64) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (67) repetition_statement -> . while_statement
    (68) repetition_statement -> . for_statement
    (72) expression -> . texp op1
    (23) id -> . ID id1
    (70) while_statement -> . WHILE L_P expression R_P do_statement
    (69) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    R_B             reduce using rule 106 (empty -> .)
    ID              shift and go to state 92
    RETURN          shift and go to state 93
    READ            shift and go to state 94
    PRINT           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    statements                     shift and go to state 80
    statement                      shift and go to state 81
    empty                          shift and go to state 82
    assignation                    shift and go to state 83
    call_func                      shift and go to state 84
    return_func                    shift and go to state 85
    read                           shift and go to state 86
    write                          shift and go to state 87
    decision_statement             shift and go to state 88
    repetition_statement           shift and go to state 89
    expression                     shift and go to state 90
    id                             shift and go to state 91
    while_statement                shift and go to state 97
    for_statement                  shift and go to state 98
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 65

    (34) params1 -> COMA params .

    R_P             reduce using rule 34 (params1 -> COMA params .)


state 66

    (24) id1 -> L_SB expression . R_SB id2

    R_SB            shift and go to state 101


state 67

    (72) expression -> texp . op1
    (85) op1 -> . OR expression
    (86) op1 -> . empty
    (106) empty -> .

    OR              shift and go to state 103
    R_SB            reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    READ            reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    L_P             reduce using rule 106 (empty -> .)
    CTE_I           reduce using rule 106 (empty -> .)
    CTE_F           reduce using rule 106 (empty -> .)
    CTE_CHAR        reduce using rule 106 (empty -> .)
    R_B             reduce using rule 106 (empty -> .)
    R_P             reduce using rule 106 (empty -> .)
    COMA            reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    TO              reduce using rule 106 (empty -> .)
    DO              reduce using rule 106 (empty -> .)

    op1                            shift and go to state 102
    empty                          shift and go to state 104

state 68

    (73) texp -> gexp . op2
    (87) op2 -> . AND texp
    (88) op2 -> . empty
    (106) empty -> .

    AND             shift and go to state 106
    OR              reduce using rule 106 (empty -> .)
    R_SB            reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    READ            reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    L_P             reduce using rule 106 (empty -> .)
    CTE_I           reduce using rule 106 (empty -> .)
    CTE_F           reduce using rule 106 (empty -> .)
    CTE_CHAR        reduce using rule 106 (empty -> .)
    R_B             reduce using rule 106 (empty -> .)
    R_P             reduce using rule 106 (empty -> .)
    COMA            reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    TO              reduce using rule 106 (empty -> .)
    DO              reduce using rule 106 (empty -> .)

    op2                            shift and go to state 105
    empty                          shift and go to state 107

state 69

    (74) gexp -> mexp . op3aux
    (95) op3aux -> . op3 mexp
    (96) op3aux -> . empty
    (89) op3 -> . LESSTHAN
    (90) op3 -> . LESSTHANEQ
    (91) op3 -> . GREATERTHAN
    (92) op3 -> . GREATERTHANEQ
    (93) op3 -> . EQ
    (94) op3 -> . DIFERENT
    (106) empty -> .

    LESSTHAN        shift and go to state 111
    LESSTHANEQ      shift and go to state 112
    GREATERTHAN     shift and go to state 113
    GREATERTHANEQ   shift and go to state 114
    EQ              shift and go to state 115
    DIFERENT        shift and go to state 116
    AND             reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    R_SB            reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    READ            reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    L_P             reduce using rule 106 (empty -> .)
    CTE_I           reduce using rule 106 (empty -> .)
    CTE_F           reduce using rule 106 (empty -> .)
    CTE_CHAR        reduce using rule 106 (empty -> .)
    R_B             reduce using rule 106 (empty -> .)
    R_P             reduce using rule 106 (empty -> .)
    COMA            reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    TO              reduce using rule 106 (empty -> .)
    DO              reduce using rule 106 (empty -> .)

    op3aux                         shift and go to state 108
    op3                            shift and go to state 109
    empty                          shift and go to state 110

state 70

    (75) mexp -> term . op4aux
    (99) op4aux -> . op4 mexp
    (100) op4aux -> . empty
    (97) op4 -> . PLUS
    (98) op4 -> . MINUS
    (106) empty -> .

    PLUS            shift and go to state 120
    MINUS           shift and go to state 121
    LESSTHAN        reduce using rule 106 (empty -> .)
    LESSTHANEQ      reduce using rule 106 (empty -> .)
    GREATERTHAN     reduce using rule 106 (empty -> .)
    GREATERTHANEQ   reduce using rule 106 (empty -> .)
    EQ              reduce using rule 106 (empty -> .)
    DIFERENT        reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    R_SB            reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    READ            reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    L_P             reduce using rule 106 (empty -> .)
    CTE_I           reduce using rule 106 (empty -> .)
    CTE_F           reduce using rule 106 (empty -> .)
    CTE_CHAR        reduce using rule 106 (empty -> .)
    R_B             reduce using rule 106 (empty -> .)
    R_P             reduce using rule 106 (empty -> .)
    COMA            reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    TO              reduce using rule 106 (empty -> .)
    DO              reduce using rule 106 (empty -> .)

    op4aux                         shift and go to state 117
    op4                            shift and go to state 118
    empty                          shift and go to state 119

state 71

    (76) term -> fact . op5aux
    (104) op5aux -> . op5 term
    (105) op5aux -> . empty
    (101) op5 -> . MULT
    (102) op5 -> . DIV
    (103) op5 -> . MOD
    (106) empty -> .

    MULT            shift and go to state 125
    DIV             shift and go to state 126
    MOD             shift and go to state 127
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    LESSTHAN        reduce using rule 106 (empty -> .)
    LESSTHANEQ      reduce using rule 106 (empty -> .)
    GREATERTHAN     reduce using rule 106 (empty -> .)
    GREATERTHANEQ   reduce using rule 106 (empty -> .)
    EQ              reduce using rule 106 (empty -> .)
    DIFERENT        reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    R_SB            reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    READ            reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    L_P             reduce using rule 106 (empty -> .)
    CTE_I           reduce using rule 106 (empty -> .)
    CTE_F           reduce using rule 106 (empty -> .)
    CTE_CHAR        reduce using rule 106 (empty -> .)
    R_B             reduce using rule 106 (empty -> .)
    R_P             reduce using rule 106 (empty -> .)
    COMA            reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    TO              reduce using rule 106 (empty -> .)
    DO              reduce using rule 106 (empty -> .)

    op5aux                         shift and go to state 122
    op5                            shift and go to state 123
    empty                          shift and go to state 124

state 72

    (77) fact -> ID . fact1
    (80) fact1 -> . L_P args R_P
    (81) fact1 -> . id1
    (24) id1 -> . L_SB expression R_SB id2
    (25) id1 -> . empty
    (106) empty -> .

  ! shift/reduce conflict for L_P resolved as shift
    L_P             shift and go to state 129
    L_SB            shift and go to state 58
    MULT            reduce using rule 106 (empty -> .)
    DIV             reduce using rule 106 (empty -> .)
    MOD             reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    LESSTHAN        reduce using rule 106 (empty -> .)
    LESSTHANEQ      reduce using rule 106 (empty -> .)
    GREATERTHAN     reduce using rule 106 (empty -> .)
    GREATERTHANEQ   reduce using rule 106 (empty -> .)
    EQ              reduce using rule 106 (empty -> .)
    DIFERENT        reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    R_SB            reduce using rule 106 (empty -> .)
    R_P             reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    READ            reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    CTE_I           reduce using rule 106 (empty -> .)
    CTE_F           reduce using rule 106 (empty -> .)
    CTE_CHAR        reduce using rule 106 (empty -> .)
    R_B             reduce using rule 106 (empty -> .)
    COMA            reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    TO              reduce using rule 106 (empty -> .)
    DO              reduce using rule 106 (empty -> .)

  ! L_P             [ reduce using rule 106 (empty -> .) ]

    fact1                          shift and go to state 128
    id1                            shift and go to state 130
    empty                          shift and go to state 59

state 73

    (78) fact -> L_P . expression R_P
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expression                     shift and go to state 131
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 74

    (79) fact -> cte .

    MULT            reduce using rule 79 (fact -> cte .)
    DIV             reduce using rule 79 (fact -> cte .)
    MOD             reduce using rule 79 (fact -> cte .)
    PLUS            reduce using rule 79 (fact -> cte .)
    MINUS           reduce using rule 79 (fact -> cte .)
    LESSTHAN        reduce using rule 79 (fact -> cte .)
    LESSTHANEQ      reduce using rule 79 (fact -> cte .)
    GREATERTHAN     reduce using rule 79 (fact -> cte .)
    GREATERTHANEQ   reduce using rule 79 (fact -> cte .)
    EQ              reduce using rule 79 (fact -> cte .)
    DIFERENT        reduce using rule 79 (fact -> cte .)
    AND             reduce using rule 79 (fact -> cte .)
    OR              reduce using rule 79 (fact -> cte .)
    R_SB            reduce using rule 79 (fact -> cte .)
    ID              reduce using rule 79 (fact -> cte .)
    RETURN          reduce using rule 79 (fact -> cte .)
    READ            reduce using rule 79 (fact -> cte .)
    PRINT           reduce using rule 79 (fact -> cte .)
    IF              reduce using rule 79 (fact -> cte .)
    WHILE           reduce using rule 79 (fact -> cte .)
    FOR             reduce using rule 79 (fact -> cte .)
    L_P             reduce using rule 79 (fact -> cte .)
    CTE_I           reduce using rule 79 (fact -> cte .)
    CTE_F           reduce using rule 79 (fact -> cte .)
    CTE_CHAR        reduce using rule 79 (fact -> cte .)
    R_B             reduce using rule 79 (fact -> cte .)
    R_P             reduce using rule 79 (fact -> cte .)
    COMA            reduce using rule 79 (fact -> cte .)
    SEMICOLON       reduce using rule 79 (fact -> cte .)
    TO              reduce using rule 79 (fact -> cte .)
    DO              reduce using rule 79 (fact -> cte .)


state 75

    (82) cte -> CTE_I .

    MULT            reduce using rule 82 (cte -> CTE_I .)
    DIV             reduce using rule 82 (cte -> CTE_I .)
    MOD             reduce using rule 82 (cte -> CTE_I .)
    PLUS            reduce using rule 82 (cte -> CTE_I .)
    MINUS           reduce using rule 82 (cte -> CTE_I .)
    LESSTHAN        reduce using rule 82 (cte -> CTE_I .)
    LESSTHANEQ      reduce using rule 82 (cte -> CTE_I .)
    GREATERTHAN     reduce using rule 82 (cte -> CTE_I .)
    GREATERTHANEQ   reduce using rule 82 (cte -> CTE_I .)
    EQ              reduce using rule 82 (cte -> CTE_I .)
    DIFERENT        reduce using rule 82 (cte -> CTE_I .)
    AND             reduce using rule 82 (cte -> CTE_I .)
    OR              reduce using rule 82 (cte -> CTE_I .)
    R_SB            reduce using rule 82 (cte -> CTE_I .)
    ID              reduce using rule 82 (cte -> CTE_I .)
    RETURN          reduce using rule 82 (cte -> CTE_I .)
    READ            reduce using rule 82 (cte -> CTE_I .)
    PRINT           reduce using rule 82 (cte -> CTE_I .)
    IF              reduce using rule 82 (cte -> CTE_I .)
    WHILE           reduce using rule 82 (cte -> CTE_I .)
    FOR             reduce using rule 82 (cte -> CTE_I .)
    L_P             reduce using rule 82 (cte -> CTE_I .)
    CTE_I           reduce using rule 82 (cte -> CTE_I .)
    CTE_F           reduce using rule 82 (cte -> CTE_I .)
    CTE_CHAR        reduce using rule 82 (cte -> CTE_I .)
    R_B             reduce using rule 82 (cte -> CTE_I .)
    R_P             reduce using rule 82 (cte -> CTE_I .)
    COMA            reduce using rule 82 (cte -> CTE_I .)
    SEMICOLON       reduce using rule 82 (cte -> CTE_I .)
    TO              reduce using rule 82 (cte -> CTE_I .)
    DO              reduce using rule 82 (cte -> CTE_I .)


state 76

    (83) cte -> CTE_F .

    MULT            reduce using rule 83 (cte -> CTE_F .)
    DIV             reduce using rule 83 (cte -> CTE_F .)
    MOD             reduce using rule 83 (cte -> CTE_F .)
    PLUS            reduce using rule 83 (cte -> CTE_F .)
    MINUS           reduce using rule 83 (cte -> CTE_F .)
    LESSTHAN        reduce using rule 83 (cte -> CTE_F .)
    LESSTHANEQ      reduce using rule 83 (cte -> CTE_F .)
    GREATERTHAN     reduce using rule 83 (cte -> CTE_F .)
    GREATERTHANEQ   reduce using rule 83 (cte -> CTE_F .)
    EQ              reduce using rule 83 (cte -> CTE_F .)
    DIFERENT        reduce using rule 83 (cte -> CTE_F .)
    AND             reduce using rule 83 (cte -> CTE_F .)
    OR              reduce using rule 83 (cte -> CTE_F .)
    R_SB            reduce using rule 83 (cte -> CTE_F .)
    ID              reduce using rule 83 (cte -> CTE_F .)
    RETURN          reduce using rule 83 (cte -> CTE_F .)
    READ            reduce using rule 83 (cte -> CTE_F .)
    PRINT           reduce using rule 83 (cte -> CTE_F .)
    IF              reduce using rule 83 (cte -> CTE_F .)
    WHILE           reduce using rule 83 (cte -> CTE_F .)
    FOR             reduce using rule 83 (cte -> CTE_F .)
    L_P             reduce using rule 83 (cte -> CTE_F .)
    CTE_I           reduce using rule 83 (cte -> CTE_F .)
    CTE_F           reduce using rule 83 (cte -> CTE_F .)
    CTE_CHAR        reduce using rule 83 (cte -> CTE_F .)
    R_B             reduce using rule 83 (cte -> CTE_F .)
    R_P             reduce using rule 83 (cte -> CTE_F .)
    COMA            reduce using rule 83 (cte -> CTE_F .)
    SEMICOLON       reduce using rule 83 (cte -> CTE_F .)
    TO              reduce using rule 83 (cte -> CTE_F .)
    DO              reduce using rule 83 (cte -> CTE_F .)


state 77

    (84) cte -> CTE_CHAR .

    MULT            reduce using rule 84 (cte -> CTE_CHAR .)
    DIV             reduce using rule 84 (cte -> CTE_CHAR .)
    MOD             reduce using rule 84 (cte -> CTE_CHAR .)
    PLUS            reduce using rule 84 (cte -> CTE_CHAR .)
    MINUS           reduce using rule 84 (cte -> CTE_CHAR .)
    LESSTHAN        reduce using rule 84 (cte -> CTE_CHAR .)
    LESSTHANEQ      reduce using rule 84 (cte -> CTE_CHAR .)
    GREATERTHAN     reduce using rule 84 (cte -> CTE_CHAR .)
    GREATERTHANEQ   reduce using rule 84 (cte -> CTE_CHAR .)
    EQ              reduce using rule 84 (cte -> CTE_CHAR .)
    DIFERENT        reduce using rule 84 (cte -> CTE_CHAR .)
    AND             reduce using rule 84 (cte -> CTE_CHAR .)
    OR              reduce using rule 84 (cte -> CTE_CHAR .)
    R_SB            reduce using rule 84 (cte -> CTE_CHAR .)
    ID              reduce using rule 84 (cte -> CTE_CHAR .)
    RETURN          reduce using rule 84 (cte -> CTE_CHAR .)
    READ            reduce using rule 84 (cte -> CTE_CHAR .)
    PRINT           reduce using rule 84 (cte -> CTE_CHAR .)
    IF              reduce using rule 84 (cte -> CTE_CHAR .)
    WHILE           reduce using rule 84 (cte -> CTE_CHAR .)
    FOR             reduce using rule 84 (cte -> CTE_CHAR .)
    L_P             reduce using rule 84 (cte -> CTE_CHAR .)
    CTE_I           reduce using rule 84 (cte -> CTE_CHAR .)
    CTE_F           reduce using rule 84 (cte -> CTE_CHAR .)
    CTE_CHAR        reduce using rule 84 (cte -> CTE_CHAR .)
    R_B             reduce using rule 84 (cte -> CTE_CHAR .)
    R_P             reduce using rule 84 (cte -> CTE_CHAR .)
    COMA            reduce using rule 84 (cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 84 (cte -> CTE_CHAR .)
    TO              reduce using rule 84 (cte -> CTE_CHAR .)
    DO              reduce using rule 84 (cte -> CTE_CHAR .)


state 78

    (29) function -> FUNC func_type ID L_P params R_P var_declaration . L_B statements R_B

    L_B             shift and go to state 132


state 79

    (21) dec_id2 -> L_SB CTE_I . R_SB

    R_SB            shift and go to state 133


state 80

    (2) main -> MAIN L_P params R_P var_declaration L_B statements . R_B

    R_B             shift and go to state 134


state 81

    (36) statements -> statement . statements
    (36) statements -> . statement statements
    (37) statements -> . empty
    (38) statement -> . assignation
    (39) statement -> . call_func
    (40) statement -> . return_func
    (41) statement -> . read
    (42) statement -> . write
    (43) statement -> . decision_statement
    (44) statement -> . repetition_statement
    (45) statement -> . expression
    (106) empty -> .
    (46) assignation -> . id EQUAL expression SEMICOLON
    (52) call_func -> . ID L_P args R_P SEMICOLON
    (53) return_func -> . RETURN L_P expression R_P SEMICOLON
    (54) read -> . READ L_P read_args R_P SEMICOLON
    (58) write -> . PRINT L_P write_args R_P SEMICOLON
    (64) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (67) repetition_statement -> . while_statement
    (68) repetition_statement -> . for_statement
    (72) expression -> . texp op1
    (23) id -> . ID id1
    (70) while_statement -> . WHILE L_P expression R_P do_statement
    (69) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    R_B             reduce using rule 106 (empty -> .)
    ID              shift and go to state 92
    RETURN          shift and go to state 93
    READ            shift and go to state 94
    PRINT           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    statement                      shift and go to state 81
    statements                     shift and go to state 135
    empty                          shift and go to state 82
    assignation                    shift and go to state 83
    call_func                      shift and go to state 84
    return_func                    shift and go to state 85
    read                           shift and go to state 86
    write                          shift and go to state 87
    decision_statement             shift and go to state 88
    repetition_statement           shift and go to state 89
    expression                     shift and go to state 90
    id                             shift and go to state 91
    while_statement                shift and go to state 97
    for_statement                  shift and go to state 98
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 82

    (37) statements -> empty .

    R_B             reduce using rule 37 (statements -> empty .)


state 83

    (38) statement -> assignation .

    ID              reduce using rule 38 (statement -> assignation .)
    RETURN          reduce using rule 38 (statement -> assignation .)
    READ            reduce using rule 38 (statement -> assignation .)
    PRINT           reduce using rule 38 (statement -> assignation .)
    IF              reduce using rule 38 (statement -> assignation .)
    WHILE           reduce using rule 38 (statement -> assignation .)
    FOR             reduce using rule 38 (statement -> assignation .)
    L_P             reduce using rule 38 (statement -> assignation .)
    CTE_I           reduce using rule 38 (statement -> assignation .)
    CTE_F           reduce using rule 38 (statement -> assignation .)
    CTE_CHAR        reduce using rule 38 (statement -> assignation .)
    R_B             reduce using rule 38 (statement -> assignation .)


state 84

    (39) statement -> call_func .

    ID              reduce using rule 39 (statement -> call_func .)
    RETURN          reduce using rule 39 (statement -> call_func .)
    READ            reduce using rule 39 (statement -> call_func .)
    PRINT           reduce using rule 39 (statement -> call_func .)
    IF              reduce using rule 39 (statement -> call_func .)
    WHILE           reduce using rule 39 (statement -> call_func .)
    FOR             reduce using rule 39 (statement -> call_func .)
    L_P             reduce using rule 39 (statement -> call_func .)
    CTE_I           reduce using rule 39 (statement -> call_func .)
    CTE_F           reduce using rule 39 (statement -> call_func .)
    CTE_CHAR        reduce using rule 39 (statement -> call_func .)
    R_B             reduce using rule 39 (statement -> call_func .)


state 85

    (40) statement -> return_func .

    ID              reduce using rule 40 (statement -> return_func .)
    RETURN          reduce using rule 40 (statement -> return_func .)
    READ            reduce using rule 40 (statement -> return_func .)
    PRINT           reduce using rule 40 (statement -> return_func .)
    IF              reduce using rule 40 (statement -> return_func .)
    WHILE           reduce using rule 40 (statement -> return_func .)
    FOR             reduce using rule 40 (statement -> return_func .)
    L_P             reduce using rule 40 (statement -> return_func .)
    CTE_I           reduce using rule 40 (statement -> return_func .)
    CTE_F           reduce using rule 40 (statement -> return_func .)
    CTE_CHAR        reduce using rule 40 (statement -> return_func .)
    R_B             reduce using rule 40 (statement -> return_func .)


state 86

    (41) statement -> read .

    ID              reduce using rule 41 (statement -> read .)
    RETURN          reduce using rule 41 (statement -> read .)
    READ            reduce using rule 41 (statement -> read .)
    PRINT           reduce using rule 41 (statement -> read .)
    IF              reduce using rule 41 (statement -> read .)
    WHILE           reduce using rule 41 (statement -> read .)
    FOR             reduce using rule 41 (statement -> read .)
    L_P             reduce using rule 41 (statement -> read .)
    CTE_I           reduce using rule 41 (statement -> read .)
    CTE_F           reduce using rule 41 (statement -> read .)
    CTE_CHAR        reduce using rule 41 (statement -> read .)
    R_B             reduce using rule 41 (statement -> read .)


state 87

    (42) statement -> write .

    ID              reduce using rule 42 (statement -> write .)
    RETURN          reduce using rule 42 (statement -> write .)
    READ            reduce using rule 42 (statement -> write .)
    PRINT           reduce using rule 42 (statement -> write .)
    IF              reduce using rule 42 (statement -> write .)
    WHILE           reduce using rule 42 (statement -> write .)
    FOR             reduce using rule 42 (statement -> write .)
    L_P             reduce using rule 42 (statement -> write .)
    CTE_I           reduce using rule 42 (statement -> write .)
    CTE_F           reduce using rule 42 (statement -> write .)
    CTE_CHAR        reduce using rule 42 (statement -> write .)
    R_B             reduce using rule 42 (statement -> write .)


state 88

    (43) statement -> decision_statement .

    ID              reduce using rule 43 (statement -> decision_statement .)
    RETURN          reduce using rule 43 (statement -> decision_statement .)
    READ            reduce using rule 43 (statement -> decision_statement .)
    PRINT           reduce using rule 43 (statement -> decision_statement .)
    IF              reduce using rule 43 (statement -> decision_statement .)
    WHILE           reduce using rule 43 (statement -> decision_statement .)
    FOR             reduce using rule 43 (statement -> decision_statement .)
    L_P             reduce using rule 43 (statement -> decision_statement .)
    CTE_I           reduce using rule 43 (statement -> decision_statement .)
    CTE_F           reduce using rule 43 (statement -> decision_statement .)
    CTE_CHAR        reduce using rule 43 (statement -> decision_statement .)
    R_B             reduce using rule 43 (statement -> decision_statement .)


state 89

    (44) statement -> repetition_statement .

    ID              reduce using rule 44 (statement -> repetition_statement .)
    RETURN          reduce using rule 44 (statement -> repetition_statement .)
    READ            reduce using rule 44 (statement -> repetition_statement .)
    PRINT           reduce using rule 44 (statement -> repetition_statement .)
    IF              reduce using rule 44 (statement -> repetition_statement .)
    WHILE           reduce using rule 44 (statement -> repetition_statement .)
    FOR             reduce using rule 44 (statement -> repetition_statement .)
    L_P             reduce using rule 44 (statement -> repetition_statement .)
    CTE_I           reduce using rule 44 (statement -> repetition_statement .)
    CTE_F           reduce using rule 44 (statement -> repetition_statement .)
    CTE_CHAR        reduce using rule 44 (statement -> repetition_statement .)
    R_B             reduce using rule 44 (statement -> repetition_statement .)


state 90

    (45) statement -> expression .

    ID              reduce using rule 45 (statement -> expression .)
    RETURN          reduce using rule 45 (statement -> expression .)
    READ            reduce using rule 45 (statement -> expression .)
    PRINT           reduce using rule 45 (statement -> expression .)
    IF              reduce using rule 45 (statement -> expression .)
    WHILE           reduce using rule 45 (statement -> expression .)
    FOR             reduce using rule 45 (statement -> expression .)
    L_P             reduce using rule 45 (statement -> expression .)
    CTE_I           reduce using rule 45 (statement -> expression .)
    CTE_F           reduce using rule 45 (statement -> expression .)
    CTE_CHAR        reduce using rule 45 (statement -> expression .)
    R_B             reduce using rule 45 (statement -> expression .)


state 91

    (46) assignation -> id . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 136


state 92

    (52) call_func -> ID . L_P args R_P SEMICOLON
    (23) id -> ID . id1
    (77) fact -> ID . fact1
    (24) id1 -> . L_SB expression R_SB id2
    (25) id1 -> . empty
    (80) fact1 -> . L_P args R_P
    (81) fact1 -> . id1
    (106) empty -> .

  ! shift/reduce conflict for L_P resolved as shift
    L_P             shift and go to state 137
    L_SB            shift and go to state 58
    EQUAL           reduce using rule 106 (empty -> .)
    MULT            reduce using rule 106 (empty -> .)
    DIV             reduce using rule 106 (empty -> .)
    MOD             reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    LESSTHAN        reduce using rule 106 (empty -> .)
    LESSTHANEQ      reduce using rule 106 (empty -> .)
    GREATERTHAN     reduce using rule 106 (empty -> .)
    GREATERTHANEQ   reduce using rule 106 (empty -> .)
    EQ              reduce using rule 106 (empty -> .)
    DIFERENT        reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    READ            reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    CTE_I           reduce using rule 106 (empty -> .)
    CTE_F           reduce using rule 106 (empty -> .)
    CTE_CHAR        reduce using rule 106 (empty -> .)
    R_B             reduce using rule 106 (empty -> .)

  ! L_P             [ reduce using rule 106 (empty -> .) ]

    id1                            shift and go to state 138
    fact1                          shift and go to state 128
    empty                          shift and go to state 59

state 93

    (53) return_func -> RETURN . L_P expression R_P SEMICOLON

    L_P             shift and go to state 139


state 94

    (54) read -> READ . L_P read_args R_P SEMICOLON

    L_P             shift and go to state 140


state 95

    (58) write -> PRINT . L_P write_args R_P SEMICOLON

    L_P             shift and go to state 141


state 96

    (64) decision_statement -> IF . L_P expression R_P L_B statements R_B decision_statement1

    L_P             shift and go to state 142


state 97

    (67) repetition_statement -> while_statement .

    ID              reduce using rule 67 (repetition_statement -> while_statement .)
    RETURN          reduce using rule 67 (repetition_statement -> while_statement .)
    READ            reduce using rule 67 (repetition_statement -> while_statement .)
    PRINT           reduce using rule 67 (repetition_statement -> while_statement .)
    IF              reduce using rule 67 (repetition_statement -> while_statement .)
    WHILE           reduce using rule 67 (repetition_statement -> while_statement .)
    FOR             reduce using rule 67 (repetition_statement -> while_statement .)
    L_P             reduce using rule 67 (repetition_statement -> while_statement .)
    CTE_I           reduce using rule 67 (repetition_statement -> while_statement .)
    CTE_F           reduce using rule 67 (repetition_statement -> while_statement .)
    CTE_CHAR        reduce using rule 67 (repetition_statement -> while_statement .)
    R_B             reduce using rule 67 (repetition_statement -> while_statement .)


state 98

    (68) repetition_statement -> for_statement .

    ID              reduce using rule 68 (repetition_statement -> for_statement .)
    RETURN          reduce using rule 68 (repetition_statement -> for_statement .)
    READ            reduce using rule 68 (repetition_statement -> for_statement .)
    PRINT           reduce using rule 68 (repetition_statement -> for_statement .)
    IF              reduce using rule 68 (repetition_statement -> for_statement .)
    WHILE           reduce using rule 68 (repetition_statement -> for_statement .)
    FOR             reduce using rule 68 (repetition_statement -> for_statement .)
    L_P             reduce using rule 68 (repetition_statement -> for_statement .)
    CTE_I           reduce using rule 68 (repetition_statement -> for_statement .)
    CTE_F           reduce using rule 68 (repetition_statement -> for_statement .)
    CTE_CHAR        reduce using rule 68 (repetition_statement -> for_statement .)
    R_B             reduce using rule 68 (repetition_statement -> for_statement .)


state 99

    (70) while_statement -> WHILE . L_P expression R_P do_statement

    L_P             shift and go to state 143


state 100

    (69) for_statement -> FOR . id EQUAL expression TO expression do_statement
    (23) id -> . ID id1

    ID              shift and go to state 44

    id                             shift and go to state 144

state 101

    (24) id1 -> L_SB expression R_SB . id2
    (26) id2 -> . L_SB expression R_SB
    (27) id2 -> . empty
    (106) empty -> .

    L_SB            shift and go to state 145
    COMA            reduce using rule 106 (empty -> .)
    R_P             reduce using rule 106 (empty -> .)
    EQUAL           reduce using rule 106 (empty -> .)
    MULT            reduce using rule 106 (empty -> .)
    DIV             reduce using rule 106 (empty -> .)
    MOD             reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    LESSTHAN        reduce using rule 106 (empty -> .)
    LESSTHANEQ      reduce using rule 106 (empty -> .)
    GREATERTHAN     reduce using rule 106 (empty -> .)
    GREATERTHANEQ   reduce using rule 106 (empty -> .)
    EQ              reduce using rule 106 (empty -> .)
    DIFERENT        reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    R_SB            reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    READ            reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    L_P             reduce using rule 106 (empty -> .)
    CTE_I           reduce using rule 106 (empty -> .)
    CTE_F           reduce using rule 106 (empty -> .)
    CTE_CHAR        reduce using rule 106 (empty -> .)
    R_B             reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    TO              reduce using rule 106 (empty -> .)
    DO              reduce using rule 106 (empty -> .)

    id2                            shift and go to state 146
    empty                          shift and go to state 147

state 102

    (72) expression -> texp op1 .

    R_SB            reduce using rule 72 (expression -> texp op1 .)
    ID              reduce using rule 72 (expression -> texp op1 .)
    RETURN          reduce using rule 72 (expression -> texp op1 .)
    READ            reduce using rule 72 (expression -> texp op1 .)
    PRINT           reduce using rule 72 (expression -> texp op1 .)
    IF              reduce using rule 72 (expression -> texp op1 .)
    WHILE           reduce using rule 72 (expression -> texp op1 .)
    FOR             reduce using rule 72 (expression -> texp op1 .)
    L_P             reduce using rule 72 (expression -> texp op1 .)
    CTE_I           reduce using rule 72 (expression -> texp op1 .)
    CTE_F           reduce using rule 72 (expression -> texp op1 .)
    CTE_CHAR        reduce using rule 72 (expression -> texp op1 .)
    R_B             reduce using rule 72 (expression -> texp op1 .)
    R_P             reduce using rule 72 (expression -> texp op1 .)
    COMA            reduce using rule 72 (expression -> texp op1 .)
    SEMICOLON       reduce using rule 72 (expression -> texp op1 .)
    TO              reduce using rule 72 (expression -> texp op1 .)
    DO              reduce using rule 72 (expression -> texp op1 .)


state 103

    (85) op1 -> OR . expression
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expression                     shift and go to state 148
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 104

    (86) op1 -> empty .

    R_SB            reduce using rule 86 (op1 -> empty .)
    ID              reduce using rule 86 (op1 -> empty .)
    RETURN          reduce using rule 86 (op1 -> empty .)
    READ            reduce using rule 86 (op1 -> empty .)
    PRINT           reduce using rule 86 (op1 -> empty .)
    IF              reduce using rule 86 (op1 -> empty .)
    WHILE           reduce using rule 86 (op1 -> empty .)
    FOR             reduce using rule 86 (op1 -> empty .)
    L_P             reduce using rule 86 (op1 -> empty .)
    CTE_I           reduce using rule 86 (op1 -> empty .)
    CTE_F           reduce using rule 86 (op1 -> empty .)
    CTE_CHAR        reduce using rule 86 (op1 -> empty .)
    R_B             reduce using rule 86 (op1 -> empty .)
    R_P             reduce using rule 86 (op1 -> empty .)
    COMA            reduce using rule 86 (op1 -> empty .)
    SEMICOLON       reduce using rule 86 (op1 -> empty .)
    TO              reduce using rule 86 (op1 -> empty .)
    DO              reduce using rule 86 (op1 -> empty .)


state 105

    (73) texp -> gexp op2 .

    OR              reduce using rule 73 (texp -> gexp op2 .)
    R_SB            reduce using rule 73 (texp -> gexp op2 .)
    ID              reduce using rule 73 (texp -> gexp op2 .)
    RETURN          reduce using rule 73 (texp -> gexp op2 .)
    READ            reduce using rule 73 (texp -> gexp op2 .)
    PRINT           reduce using rule 73 (texp -> gexp op2 .)
    IF              reduce using rule 73 (texp -> gexp op2 .)
    WHILE           reduce using rule 73 (texp -> gexp op2 .)
    FOR             reduce using rule 73 (texp -> gexp op2 .)
    L_P             reduce using rule 73 (texp -> gexp op2 .)
    CTE_I           reduce using rule 73 (texp -> gexp op2 .)
    CTE_F           reduce using rule 73 (texp -> gexp op2 .)
    CTE_CHAR        reduce using rule 73 (texp -> gexp op2 .)
    R_B             reduce using rule 73 (texp -> gexp op2 .)
    R_P             reduce using rule 73 (texp -> gexp op2 .)
    COMA            reduce using rule 73 (texp -> gexp op2 .)
    SEMICOLON       reduce using rule 73 (texp -> gexp op2 .)
    TO              reduce using rule 73 (texp -> gexp op2 .)
    DO              reduce using rule 73 (texp -> gexp op2 .)


state 106

    (87) op2 -> AND . texp
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    texp                           shift and go to state 149
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 107

    (88) op2 -> empty .

    OR              reduce using rule 88 (op2 -> empty .)
    R_SB            reduce using rule 88 (op2 -> empty .)
    ID              reduce using rule 88 (op2 -> empty .)
    RETURN          reduce using rule 88 (op2 -> empty .)
    READ            reduce using rule 88 (op2 -> empty .)
    PRINT           reduce using rule 88 (op2 -> empty .)
    IF              reduce using rule 88 (op2 -> empty .)
    WHILE           reduce using rule 88 (op2 -> empty .)
    FOR             reduce using rule 88 (op2 -> empty .)
    L_P             reduce using rule 88 (op2 -> empty .)
    CTE_I           reduce using rule 88 (op2 -> empty .)
    CTE_F           reduce using rule 88 (op2 -> empty .)
    CTE_CHAR        reduce using rule 88 (op2 -> empty .)
    R_B             reduce using rule 88 (op2 -> empty .)
    R_P             reduce using rule 88 (op2 -> empty .)
    COMA            reduce using rule 88 (op2 -> empty .)
    SEMICOLON       reduce using rule 88 (op2 -> empty .)
    TO              reduce using rule 88 (op2 -> empty .)
    DO              reduce using rule 88 (op2 -> empty .)


state 108

    (74) gexp -> mexp op3aux .

    AND             reduce using rule 74 (gexp -> mexp op3aux .)
    OR              reduce using rule 74 (gexp -> mexp op3aux .)
    R_SB            reduce using rule 74 (gexp -> mexp op3aux .)
    ID              reduce using rule 74 (gexp -> mexp op3aux .)
    RETURN          reduce using rule 74 (gexp -> mexp op3aux .)
    READ            reduce using rule 74 (gexp -> mexp op3aux .)
    PRINT           reduce using rule 74 (gexp -> mexp op3aux .)
    IF              reduce using rule 74 (gexp -> mexp op3aux .)
    WHILE           reduce using rule 74 (gexp -> mexp op3aux .)
    FOR             reduce using rule 74 (gexp -> mexp op3aux .)
    L_P             reduce using rule 74 (gexp -> mexp op3aux .)
    CTE_I           reduce using rule 74 (gexp -> mexp op3aux .)
    CTE_F           reduce using rule 74 (gexp -> mexp op3aux .)
    CTE_CHAR        reduce using rule 74 (gexp -> mexp op3aux .)
    R_B             reduce using rule 74 (gexp -> mexp op3aux .)
    R_P             reduce using rule 74 (gexp -> mexp op3aux .)
    COMA            reduce using rule 74 (gexp -> mexp op3aux .)
    SEMICOLON       reduce using rule 74 (gexp -> mexp op3aux .)
    TO              reduce using rule 74 (gexp -> mexp op3aux .)
    DO              reduce using rule 74 (gexp -> mexp op3aux .)


state 109

    (95) op3aux -> op3 . mexp
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    mexp                           shift and go to state 150
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 110

    (96) op3aux -> empty .

    AND             reduce using rule 96 (op3aux -> empty .)
    OR              reduce using rule 96 (op3aux -> empty .)
    R_SB            reduce using rule 96 (op3aux -> empty .)
    ID              reduce using rule 96 (op3aux -> empty .)
    RETURN          reduce using rule 96 (op3aux -> empty .)
    READ            reduce using rule 96 (op3aux -> empty .)
    PRINT           reduce using rule 96 (op3aux -> empty .)
    IF              reduce using rule 96 (op3aux -> empty .)
    WHILE           reduce using rule 96 (op3aux -> empty .)
    FOR             reduce using rule 96 (op3aux -> empty .)
    L_P             reduce using rule 96 (op3aux -> empty .)
    CTE_I           reduce using rule 96 (op3aux -> empty .)
    CTE_F           reduce using rule 96 (op3aux -> empty .)
    CTE_CHAR        reduce using rule 96 (op3aux -> empty .)
    R_B             reduce using rule 96 (op3aux -> empty .)
    R_P             reduce using rule 96 (op3aux -> empty .)
    COMA            reduce using rule 96 (op3aux -> empty .)
    SEMICOLON       reduce using rule 96 (op3aux -> empty .)
    TO              reduce using rule 96 (op3aux -> empty .)
    DO              reduce using rule 96 (op3aux -> empty .)


state 111

    (89) op3 -> LESSTHAN .

    ID              reduce using rule 89 (op3 -> LESSTHAN .)
    L_P             reduce using rule 89 (op3 -> LESSTHAN .)
    CTE_I           reduce using rule 89 (op3 -> LESSTHAN .)
    CTE_F           reduce using rule 89 (op3 -> LESSTHAN .)
    CTE_CHAR        reduce using rule 89 (op3 -> LESSTHAN .)


state 112

    (90) op3 -> LESSTHANEQ .

    ID              reduce using rule 90 (op3 -> LESSTHANEQ .)
    L_P             reduce using rule 90 (op3 -> LESSTHANEQ .)
    CTE_I           reduce using rule 90 (op3 -> LESSTHANEQ .)
    CTE_F           reduce using rule 90 (op3 -> LESSTHANEQ .)
    CTE_CHAR        reduce using rule 90 (op3 -> LESSTHANEQ .)


state 113

    (91) op3 -> GREATERTHAN .

    ID              reduce using rule 91 (op3 -> GREATERTHAN .)
    L_P             reduce using rule 91 (op3 -> GREATERTHAN .)
    CTE_I           reduce using rule 91 (op3 -> GREATERTHAN .)
    CTE_F           reduce using rule 91 (op3 -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 91 (op3 -> GREATERTHAN .)


state 114

    (92) op3 -> GREATERTHANEQ .

    ID              reduce using rule 92 (op3 -> GREATERTHANEQ .)
    L_P             reduce using rule 92 (op3 -> GREATERTHANEQ .)
    CTE_I           reduce using rule 92 (op3 -> GREATERTHANEQ .)
    CTE_F           reduce using rule 92 (op3 -> GREATERTHANEQ .)
    CTE_CHAR        reduce using rule 92 (op3 -> GREATERTHANEQ .)


state 115

    (93) op3 -> EQ .

    ID              reduce using rule 93 (op3 -> EQ .)
    L_P             reduce using rule 93 (op3 -> EQ .)
    CTE_I           reduce using rule 93 (op3 -> EQ .)
    CTE_F           reduce using rule 93 (op3 -> EQ .)
    CTE_CHAR        reduce using rule 93 (op3 -> EQ .)


state 116

    (94) op3 -> DIFERENT .

    ID              reduce using rule 94 (op3 -> DIFERENT .)
    L_P             reduce using rule 94 (op3 -> DIFERENT .)
    CTE_I           reduce using rule 94 (op3 -> DIFERENT .)
    CTE_F           reduce using rule 94 (op3 -> DIFERENT .)
    CTE_CHAR        reduce using rule 94 (op3 -> DIFERENT .)


state 117

    (75) mexp -> term op4aux .

    LESSTHAN        reduce using rule 75 (mexp -> term op4aux .)
    LESSTHANEQ      reduce using rule 75 (mexp -> term op4aux .)
    GREATERTHAN     reduce using rule 75 (mexp -> term op4aux .)
    GREATERTHANEQ   reduce using rule 75 (mexp -> term op4aux .)
    EQ              reduce using rule 75 (mexp -> term op4aux .)
    DIFERENT        reduce using rule 75 (mexp -> term op4aux .)
    AND             reduce using rule 75 (mexp -> term op4aux .)
    OR              reduce using rule 75 (mexp -> term op4aux .)
    R_SB            reduce using rule 75 (mexp -> term op4aux .)
    ID              reduce using rule 75 (mexp -> term op4aux .)
    RETURN          reduce using rule 75 (mexp -> term op4aux .)
    READ            reduce using rule 75 (mexp -> term op4aux .)
    PRINT           reduce using rule 75 (mexp -> term op4aux .)
    IF              reduce using rule 75 (mexp -> term op4aux .)
    WHILE           reduce using rule 75 (mexp -> term op4aux .)
    FOR             reduce using rule 75 (mexp -> term op4aux .)
    L_P             reduce using rule 75 (mexp -> term op4aux .)
    CTE_I           reduce using rule 75 (mexp -> term op4aux .)
    CTE_F           reduce using rule 75 (mexp -> term op4aux .)
    CTE_CHAR        reduce using rule 75 (mexp -> term op4aux .)
    R_B             reduce using rule 75 (mexp -> term op4aux .)
    R_P             reduce using rule 75 (mexp -> term op4aux .)
    COMA            reduce using rule 75 (mexp -> term op4aux .)
    SEMICOLON       reduce using rule 75 (mexp -> term op4aux .)
    TO              reduce using rule 75 (mexp -> term op4aux .)
    DO              reduce using rule 75 (mexp -> term op4aux .)


state 118

    (99) op4aux -> op4 . mexp
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    mexp                           shift and go to state 151
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 119

    (100) op4aux -> empty .

    LESSTHAN        reduce using rule 100 (op4aux -> empty .)
    LESSTHANEQ      reduce using rule 100 (op4aux -> empty .)
    GREATERTHAN     reduce using rule 100 (op4aux -> empty .)
    GREATERTHANEQ   reduce using rule 100 (op4aux -> empty .)
    EQ              reduce using rule 100 (op4aux -> empty .)
    DIFERENT        reduce using rule 100 (op4aux -> empty .)
    AND             reduce using rule 100 (op4aux -> empty .)
    OR              reduce using rule 100 (op4aux -> empty .)
    R_SB            reduce using rule 100 (op4aux -> empty .)
    ID              reduce using rule 100 (op4aux -> empty .)
    RETURN          reduce using rule 100 (op4aux -> empty .)
    READ            reduce using rule 100 (op4aux -> empty .)
    PRINT           reduce using rule 100 (op4aux -> empty .)
    IF              reduce using rule 100 (op4aux -> empty .)
    WHILE           reduce using rule 100 (op4aux -> empty .)
    FOR             reduce using rule 100 (op4aux -> empty .)
    L_P             reduce using rule 100 (op4aux -> empty .)
    CTE_I           reduce using rule 100 (op4aux -> empty .)
    CTE_F           reduce using rule 100 (op4aux -> empty .)
    CTE_CHAR        reduce using rule 100 (op4aux -> empty .)
    R_B             reduce using rule 100 (op4aux -> empty .)
    R_P             reduce using rule 100 (op4aux -> empty .)
    COMA            reduce using rule 100 (op4aux -> empty .)
    SEMICOLON       reduce using rule 100 (op4aux -> empty .)
    TO              reduce using rule 100 (op4aux -> empty .)
    DO              reduce using rule 100 (op4aux -> empty .)


state 120

    (97) op4 -> PLUS .

    ID              reduce using rule 97 (op4 -> PLUS .)
    L_P             reduce using rule 97 (op4 -> PLUS .)
    CTE_I           reduce using rule 97 (op4 -> PLUS .)
    CTE_F           reduce using rule 97 (op4 -> PLUS .)
    CTE_CHAR        reduce using rule 97 (op4 -> PLUS .)


state 121

    (98) op4 -> MINUS .

    ID              reduce using rule 98 (op4 -> MINUS .)
    L_P             reduce using rule 98 (op4 -> MINUS .)
    CTE_I           reduce using rule 98 (op4 -> MINUS .)
    CTE_F           reduce using rule 98 (op4 -> MINUS .)
    CTE_CHAR        reduce using rule 98 (op4 -> MINUS .)


state 122

    (76) term -> fact op5aux .

    PLUS            reduce using rule 76 (term -> fact op5aux .)
    MINUS           reduce using rule 76 (term -> fact op5aux .)
    LESSTHAN        reduce using rule 76 (term -> fact op5aux .)
    LESSTHANEQ      reduce using rule 76 (term -> fact op5aux .)
    GREATERTHAN     reduce using rule 76 (term -> fact op5aux .)
    GREATERTHANEQ   reduce using rule 76 (term -> fact op5aux .)
    EQ              reduce using rule 76 (term -> fact op5aux .)
    DIFERENT        reduce using rule 76 (term -> fact op5aux .)
    AND             reduce using rule 76 (term -> fact op5aux .)
    OR              reduce using rule 76 (term -> fact op5aux .)
    R_SB            reduce using rule 76 (term -> fact op5aux .)
    ID              reduce using rule 76 (term -> fact op5aux .)
    RETURN          reduce using rule 76 (term -> fact op5aux .)
    READ            reduce using rule 76 (term -> fact op5aux .)
    PRINT           reduce using rule 76 (term -> fact op5aux .)
    IF              reduce using rule 76 (term -> fact op5aux .)
    WHILE           reduce using rule 76 (term -> fact op5aux .)
    FOR             reduce using rule 76 (term -> fact op5aux .)
    L_P             reduce using rule 76 (term -> fact op5aux .)
    CTE_I           reduce using rule 76 (term -> fact op5aux .)
    CTE_F           reduce using rule 76 (term -> fact op5aux .)
    CTE_CHAR        reduce using rule 76 (term -> fact op5aux .)
    R_B             reduce using rule 76 (term -> fact op5aux .)
    R_P             reduce using rule 76 (term -> fact op5aux .)
    COMA            reduce using rule 76 (term -> fact op5aux .)
    SEMICOLON       reduce using rule 76 (term -> fact op5aux .)
    TO              reduce using rule 76 (term -> fact op5aux .)
    DO              reduce using rule 76 (term -> fact op5aux .)


state 123

    (104) op5aux -> op5 . term
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    term                           shift and go to state 152
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 124

    (105) op5aux -> empty .

    PLUS            reduce using rule 105 (op5aux -> empty .)
    MINUS           reduce using rule 105 (op5aux -> empty .)
    LESSTHAN        reduce using rule 105 (op5aux -> empty .)
    LESSTHANEQ      reduce using rule 105 (op5aux -> empty .)
    GREATERTHAN     reduce using rule 105 (op5aux -> empty .)
    GREATERTHANEQ   reduce using rule 105 (op5aux -> empty .)
    EQ              reduce using rule 105 (op5aux -> empty .)
    DIFERENT        reduce using rule 105 (op5aux -> empty .)
    AND             reduce using rule 105 (op5aux -> empty .)
    OR              reduce using rule 105 (op5aux -> empty .)
    R_SB            reduce using rule 105 (op5aux -> empty .)
    ID              reduce using rule 105 (op5aux -> empty .)
    RETURN          reduce using rule 105 (op5aux -> empty .)
    READ            reduce using rule 105 (op5aux -> empty .)
    PRINT           reduce using rule 105 (op5aux -> empty .)
    IF              reduce using rule 105 (op5aux -> empty .)
    WHILE           reduce using rule 105 (op5aux -> empty .)
    FOR             reduce using rule 105 (op5aux -> empty .)
    L_P             reduce using rule 105 (op5aux -> empty .)
    CTE_I           reduce using rule 105 (op5aux -> empty .)
    CTE_F           reduce using rule 105 (op5aux -> empty .)
    CTE_CHAR        reduce using rule 105 (op5aux -> empty .)
    R_B             reduce using rule 105 (op5aux -> empty .)
    R_P             reduce using rule 105 (op5aux -> empty .)
    COMA            reduce using rule 105 (op5aux -> empty .)
    SEMICOLON       reduce using rule 105 (op5aux -> empty .)
    TO              reduce using rule 105 (op5aux -> empty .)
    DO              reduce using rule 105 (op5aux -> empty .)


state 125

    (101) op5 -> MULT .

    ID              reduce using rule 101 (op5 -> MULT .)
    L_P             reduce using rule 101 (op5 -> MULT .)
    CTE_I           reduce using rule 101 (op5 -> MULT .)
    CTE_F           reduce using rule 101 (op5 -> MULT .)
    CTE_CHAR        reduce using rule 101 (op5 -> MULT .)


state 126

    (102) op5 -> DIV .

    ID              reduce using rule 102 (op5 -> DIV .)
    L_P             reduce using rule 102 (op5 -> DIV .)
    CTE_I           reduce using rule 102 (op5 -> DIV .)
    CTE_F           reduce using rule 102 (op5 -> DIV .)
    CTE_CHAR        reduce using rule 102 (op5 -> DIV .)


state 127

    (103) op5 -> MOD .

    ID              reduce using rule 103 (op5 -> MOD .)
    L_P             reduce using rule 103 (op5 -> MOD .)
    CTE_I           reduce using rule 103 (op5 -> MOD .)
    CTE_F           reduce using rule 103 (op5 -> MOD .)
    CTE_CHAR        reduce using rule 103 (op5 -> MOD .)


state 128

    (77) fact -> ID fact1 .

    MULT            reduce using rule 77 (fact -> ID fact1 .)
    DIV             reduce using rule 77 (fact -> ID fact1 .)
    MOD             reduce using rule 77 (fact -> ID fact1 .)
    PLUS            reduce using rule 77 (fact -> ID fact1 .)
    MINUS           reduce using rule 77 (fact -> ID fact1 .)
    LESSTHAN        reduce using rule 77 (fact -> ID fact1 .)
    LESSTHANEQ      reduce using rule 77 (fact -> ID fact1 .)
    GREATERTHAN     reduce using rule 77 (fact -> ID fact1 .)
    GREATERTHANEQ   reduce using rule 77 (fact -> ID fact1 .)
    EQ              reduce using rule 77 (fact -> ID fact1 .)
    DIFERENT        reduce using rule 77 (fact -> ID fact1 .)
    AND             reduce using rule 77 (fact -> ID fact1 .)
    OR              reduce using rule 77 (fact -> ID fact1 .)
    R_SB            reduce using rule 77 (fact -> ID fact1 .)
    ID              reduce using rule 77 (fact -> ID fact1 .)
    RETURN          reduce using rule 77 (fact -> ID fact1 .)
    READ            reduce using rule 77 (fact -> ID fact1 .)
    PRINT           reduce using rule 77 (fact -> ID fact1 .)
    IF              reduce using rule 77 (fact -> ID fact1 .)
    WHILE           reduce using rule 77 (fact -> ID fact1 .)
    FOR             reduce using rule 77 (fact -> ID fact1 .)
    L_P             reduce using rule 77 (fact -> ID fact1 .)
    CTE_I           reduce using rule 77 (fact -> ID fact1 .)
    CTE_F           reduce using rule 77 (fact -> ID fact1 .)
    CTE_CHAR        reduce using rule 77 (fact -> ID fact1 .)
    R_B             reduce using rule 77 (fact -> ID fact1 .)
    R_P             reduce using rule 77 (fact -> ID fact1 .)
    COMA            reduce using rule 77 (fact -> ID fact1 .)
    SEMICOLON       reduce using rule 77 (fact -> ID fact1 .)
    TO              reduce using rule 77 (fact -> ID fact1 .)
    DO              reduce using rule 77 (fact -> ID fact1 .)


state 129

    (80) fact1 -> L_P . args R_P
    (47) args -> . args1
    (48) args -> . empty
    (49) args1 -> . expression args2
    (106) empty -> .
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    R_P             reduce using rule 106 (empty -> .)
    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    args                           shift and go to state 153
    args1                          shift and go to state 154
    empty                          shift and go to state 155
    expression                     shift and go to state 156
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 130

    (81) fact1 -> id1 .

    MULT            reduce using rule 81 (fact1 -> id1 .)
    DIV             reduce using rule 81 (fact1 -> id1 .)
    MOD             reduce using rule 81 (fact1 -> id1 .)
    PLUS            reduce using rule 81 (fact1 -> id1 .)
    MINUS           reduce using rule 81 (fact1 -> id1 .)
    LESSTHAN        reduce using rule 81 (fact1 -> id1 .)
    LESSTHANEQ      reduce using rule 81 (fact1 -> id1 .)
    GREATERTHAN     reduce using rule 81 (fact1 -> id1 .)
    GREATERTHANEQ   reduce using rule 81 (fact1 -> id1 .)
    EQ              reduce using rule 81 (fact1 -> id1 .)
    DIFERENT        reduce using rule 81 (fact1 -> id1 .)
    AND             reduce using rule 81 (fact1 -> id1 .)
    OR              reduce using rule 81 (fact1 -> id1 .)
    R_SB            reduce using rule 81 (fact1 -> id1 .)
    R_P             reduce using rule 81 (fact1 -> id1 .)
    ID              reduce using rule 81 (fact1 -> id1 .)
    RETURN          reduce using rule 81 (fact1 -> id1 .)
    READ            reduce using rule 81 (fact1 -> id1 .)
    PRINT           reduce using rule 81 (fact1 -> id1 .)
    IF              reduce using rule 81 (fact1 -> id1 .)
    WHILE           reduce using rule 81 (fact1 -> id1 .)
    FOR             reduce using rule 81 (fact1 -> id1 .)
    L_P             reduce using rule 81 (fact1 -> id1 .)
    CTE_I           reduce using rule 81 (fact1 -> id1 .)
    CTE_F           reduce using rule 81 (fact1 -> id1 .)
    CTE_CHAR        reduce using rule 81 (fact1 -> id1 .)
    R_B             reduce using rule 81 (fact1 -> id1 .)
    COMA            reduce using rule 81 (fact1 -> id1 .)
    SEMICOLON       reduce using rule 81 (fact1 -> id1 .)
    TO              reduce using rule 81 (fact1 -> id1 .)
    DO              reduce using rule 81 (fact1 -> id1 .)


state 131

    (78) fact -> L_P expression . R_P

    R_P             shift and go to state 157


state 132

    (29) function -> FUNC func_type ID L_P params R_P var_declaration L_B . statements R_B
    (36) statements -> . statement statements
    (37) statements -> . empty
    (38) statement -> . assignation
    (39) statement -> . call_func
    (40) statement -> . return_func
    (41) statement -> . read
    (42) statement -> . write
    (43) statement -> . decision_statement
    (44) statement -> . repetition_statement
    (45) statement -> . expression
    (106) empty -> .
    (46) assignation -> . id EQUAL expression SEMICOLON
    (52) call_func -> . ID L_P args R_P SEMICOLON
    (53) return_func -> . RETURN L_P expression R_P SEMICOLON
    (54) read -> . READ L_P read_args R_P SEMICOLON
    (58) write -> . PRINT L_P write_args R_P SEMICOLON
    (64) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (67) repetition_statement -> . while_statement
    (68) repetition_statement -> . for_statement
    (72) expression -> . texp op1
    (23) id -> . ID id1
    (70) while_statement -> . WHILE L_P expression R_P do_statement
    (69) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    R_B             reduce using rule 106 (empty -> .)
    ID              shift and go to state 92
    RETURN          shift and go to state 93
    READ            shift and go to state 94
    PRINT           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    statements                     shift and go to state 158
    statement                      shift and go to state 81
    empty                          shift and go to state 82
    assignation                    shift and go to state 83
    call_func                      shift and go to state 84
    return_func                    shift and go to state 85
    read                           shift and go to state 86
    write                          shift and go to state 87
    decision_statement             shift and go to state 88
    repetition_statement           shift and go to state 89
    expression                     shift and go to state 90
    id                             shift and go to state 91
    while_statement                shift and go to state 97
    for_statement                  shift and go to state 98
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 133

    (21) dec_id2 -> L_SB CTE_I R_SB .

    COMA            reduce using rule 21 (dec_id2 -> L_SB CTE_I R_SB .)
    SEMICOLON       reduce using rule 21 (dec_id2 -> L_SB CTE_I R_SB .)


state 134

    (2) main -> MAIN L_P params R_P var_declaration L_B statements R_B .

    $end            reduce using rule 2 (main -> MAIN L_P params R_P var_declaration L_B statements R_B .)


state 135

    (36) statements -> statement statements .

    R_B             reduce using rule 36 (statements -> statement statements .)


state 136

    (46) assignation -> id EQUAL . expression SEMICOLON
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expression                     shift and go to state 159
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 137

    (52) call_func -> ID L_P . args R_P SEMICOLON
    (80) fact1 -> L_P . args R_P
    (47) args -> . args1
    (48) args -> . empty
    (49) args1 -> . expression args2
    (106) empty -> .
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    R_P             reduce using rule 106 (empty -> .)
    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    args                           shift and go to state 160
    args1                          shift and go to state 154
    empty                          shift and go to state 155
    expression                     shift and go to state 156
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 138

    (23) id -> ID id1 .
    (81) fact1 -> id1 .

    EQUAL           reduce using rule 23 (id -> ID id1 .)
    MULT            reduce using rule 81 (fact1 -> id1 .)
    DIV             reduce using rule 81 (fact1 -> id1 .)
    MOD             reduce using rule 81 (fact1 -> id1 .)
    PLUS            reduce using rule 81 (fact1 -> id1 .)
    MINUS           reduce using rule 81 (fact1 -> id1 .)
    LESSTHAN        reduce using rule 81 (fact1 -> id1 .)
    LESSTHANEQ      reduce using rule 81 (fact1 -> id1 .)
    GREATERTHAN     reduce using rule 81 (fact1 -> id1 .)
    GREATERTHANEQ   reduce using rule 81 (fact1 -> id1 .)
    EQ              reduce using rule 81 (fact1 -> id1 .)
    DIFERENT        reduce using rule 81 (fact1 -> id1 .)
    AND             reduce using rule 81 (fact1 -> id1 .)
    OR              reduce using rule 81 (fact1 -> id1 .)
    ID              reduce using rule 81 (fact1 -> id1 .)
    RETURN          reduce using rule 81 (fact1 -> id1 .)
    READ            reduce using rule 81 (fact1 -> id1 .)
    PRINT           reduce using rule 81 (fact1 -> id1 .)
    IF              reduce using rule 81 (fact1 -> id1 .)
    WHILE           reduce using rule 81 (fact1 -> id1 .)
    FOR             reduce using rule 81 (fact1 -> id1 .)
    L_P             reduce using rule 81 (fact1 -> id1 .)
    CTE_I           reduce using rule 81 (fact1 -> id1 .)
    CTE_F           reduce using rule 81 (fact1 -> id1 .)
    CTE_CHAR        reduce using rule 81 (fact1 -> id1 .)
    R_B             reduce using rule 81 (fact1 -> id1 .)


state 139

    (53) return_func -> RETURN L_P . expression R_P SEMICOLON
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expression                     shift and go to state 161
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 140

    (54) read -> READ L_P . read_args R_P SEMICOLON
    (55) read_args -> . expression read_args1
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    read_args                      shift and go to state 162
    expression                     shift and go to state 163
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 141

    (58) write -> PRINT L_P . write_args R_P SEMICOLON
    (59) write_args -> . write_args2 write_args1
    (62) write_args2 -> . expression
    (63) write_args2 -> . CTE_STRING
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    CTE_STRING      shift and go to state 167
    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    write_args                     shift and go to state 164
    write_args2                    shift and go to state 165
    expression                     shift and go to state 166
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 142

    (64) decision_statement -> IF L_P . expression R_P L_B statements R_B decision_statement1
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expression                     shift and go to state 168
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 143

    (70) while_statement -> WHILE L_P . expression R_P do_statement
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expression                     shift and go to state 169
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 144

    (69) for_statement -> FOR id . EQUAL expression TO expression do_statement

    EQUAL           shift and go to state 170


state 145

    (26) id2 -> L_SB . expression R_SB
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expression                     shift and go to state 171
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 146

    (24) id1 -> L_SB expression R_SB id2 .

    COMA            reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    R_P             reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    EQUAL           reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    MULT            reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    DIV             reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    MOD             reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    PLUS            reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    MINUS           reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    LESSTHAN        reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    LESSTHANEQ      reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    GREATERTHAN     reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    GREATERTHANEQ   reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    EQ              reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    DIFERENT        reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    AND             reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    OR              reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    R_SB            reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    ID              reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    RETURN          reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    READ            reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    PRINT           reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    IF              reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    WHILE           reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    FOR             reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    L_P             reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    CTE_I           reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    CTE_F           reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    CTE_CHAR        reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    R_B             reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    SEMICOLON       reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    TO              reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)
    DO              reduce using rule 24 (id1 -> L_SB expression R_SB id2 .)


state 147

    (27) id2 -> empty .

    COMA            reduce using rule 27 (id2 -> empty .)
    R_P             reduce using rule 27 (id2 -> empty .)
    EQUAL           reduce using rule 27 (id2 -> empty .)
    MULT            reduce using rule 27 (id2 -> empty .)
    DIV             reduce using rule 27 (id2 -> empty .)
    MOD             reduce using rule 27 (id2 -> empty .)
    PLUS            reduce using rule 27 (id2 -> empty .)
    MINUS           reduce using rule 27 (id2 -> empty .)
    LESSTHAN        reduce using rule 27 (id2 -> empty .)
    LESSTHANEQ      reduce using rule 27 (id2 -> empty .)
    GREATERTHAN     reduce using rule 27 (id2 -> empty .)
    GREATERTHANEQ   reduce using rule 27 (id2 -> empty .)
    EQ              reduce using rule 27 (id2 -> empty .)
    DIFERENT        reduce using rule 27 (id2 -> empty .)
    AND             reduce using rule 27 (id2 -> empty .)
    OR              reduce using rule 27 (id2 -> empty .)
    R_SB            reduce using rule 27 (id2 -> empty .)
    ID              reduce using rule 27 (id2 -> empty .)
    RETURN          reduce using rule 27 (id2 -> empty .)
    READ            reduce using rule 27 (id2 -> empty .)
    PRINT           reduce using rule 27 (id2 -> empty .)
    IF              reduce using rule 27 (id2 -> empty .)
    WHILE           reduce using rule 27 (id2 -> empty .)
    FOR             reduce using rule 27 (id2 -> empty .)
    L_P             reduce using rule 27 (id2 -> empty .)
    CTE_I           reduce using rule 27 (id2 -> empty .)
    CTE_F           reduce using rule 27 (id2 -> empty .)
    CTE_CHAR        reduce using rule 27 (id2 -> empty .)
    R_B             reduce using rule 27 (id2 -> empty .)
    SEMICOLON       reduce using rule 27 (id2 -> empty .)
    TO              reduce using rule 27 (id2 -> empty .)
    DO              reduce using rule 27 (id2 -> empty .)


state 148

    (85) op1 -> OR expression .

    R_SB            reduce using rule 85 (op1 -> OR expression .)
    ID              reduce using rule 85 (op1 -> OR expression .)
    RETURN          reduce using rule 85 (op1 -> OR expression .)
    READ            reduce using rule 85 (op1 -> OR expression .)
    PRINT           reduce using rule 85 (op1 -> OR expression .)
    IF              reduce using rule 85 (op1 -> OR expression .)
    WHILE           reduce using rule 85 (op1 -> OR expression .)
    FOR             reduce using rule 85 (op1 -> OR expression .)
    L_P             reduce using rule 85 (op1 -> OR expression .)
    CTE_I           reduce using rule 85 (op1 -> OR expression .)
    CTE_F           reduce using rule 85 (op1 -> OR expression .)
    CTE_CHAR        reduce using rule 85 (op1 -> OR expression .)
    R_B             reduce using rule 85 (op1 -> OR expression .)
    R_P             reduce using rule 85 (op1 -> OR expression .)
    COMA            reduce using rule 85 (op1 -> OR expression .)
    SEMICOLON       reduce using rule 85 (op1 -> OR expression .)
    TO              reduce using rule 85 (op1 -> OR expression .)
    DO              reduce using rule 85 (op1 -> OR expression .)


state 149

    (87) op2 -> AND texp .

    OR              reduce using rule 87 (op2 -> AND texp .)
    R_SB            reduce using rule 87 (op2 -> AND texp .)
    ID              reduce using rule 87 (op2 -> AND texp .)
    RETURN          reduce using rule 87 (op2 -> AND texp .)
    READ            reduce using rule 87 (op2 -> AND texp .)
    PRINT           reduce using rule 87 (op2 -> AND texp .)
    IF              reduce using rule 87 (op2 -> AND texp .)
    WHILE           reduce using rule 87 (op2 -> AND texp .)
    FOR             reduce using rule 87 (op2 -> AND texp .)
    L_P             reduce using rule 87 (op2 -> AND texp .)
    CTE_I           reduce using rule 87 (op2 -> AND texp .)
    CTE_F           reduce using rule 87 (op2 -> AND texp .)
    CTE_CHAR        reduce using rule 87 (op2 -> AND texp .)
    R_B             reduce using rule 87 (op2 -> AND texp .)
    R_P             reduce using rule 87 (op2 -> AND texp .)
    COMA            reduce using rule 87 (op2 -> AND texp .)
    SEMICOLON       reduce using rule 87 (op2 -> AND texp .)
    TO              reduce using rule 87 (op2 -> AND texp .)
    DO              reduce using rule 87 (op2 -> AND texp .)


state 150

    (95) op3aux -> op3 mexp .

    AND             reduce using rule 95 (op3aux -> op3 mexp .)
    OR              reduce using rule 95 (op3aux -> op3 mexp .)
    R_SB            reduce using rule 95 (op3aux -> op3 mexp .)
    ID              reduce using rule 95 (op3aux -> op3 mexp .)
    RETURN          reduce using rule 95 (op3aux -> op3 mexp .)
    READ            reduce using rule 95 (op3aux -> op3 mexp .)
    PRINT           reduce using rule 95 (op3aux -> op3 mexp .)
    IF              reduce using rule 95 (op3aux -> op3 mexp .)
    WHILE           reduce using rule 95 (op3aux -> op3 mexp .)
    FOR             reduce using rule 95 (op3aux -> op3 mexp .)
    L_P             reduce using rule 95 (op3aux -> op3 mexp .)
    CTE_I           reduce using rule 95 (op3aux -> op3 mexp .)
    CTE_F           reduce using rule 95 (op3aux -> op3 mexp .)
    CTE_CHAR        reduce using rule 95 (op3aux -> op3 mexp .)
    R_B             reduce using rule 95 (op3aux -> op3 mexp .)
    R_P             reduce using rule 95 (op3aux -> op3 mexp .)
    COMA            reduce using rule 95 (op3aux -> op3 mexp .)
    SEMICOLON       reduce using rule 95 (op3aux -> op3 mexp .)
    TO              reduce using rule 95 (op3aux -> op3 mexp .)
    DO              reduce using rule 95 (op3aux -> op3 mexp .)


state 151

    (99) op4aux -> op4 mexp .

    LESSTHAN        reduce using rule 99 (op4aux -> op4 mexp .)
    LESSTHANEQ      reduce using rule 99 (op4aux -> op4 mexp .)
    GREATERTHAN     reduce using rule 99 (op4aux -> op4 mexp .)
    GREATERTHANEQ   reduce using rule 99 (op4aux -> op4 mexp .)
    EQ              reduce using rule 99 (op4aux -> op4 mexp .)
    DIFERENT        reduce using rule 99 (op4aux -> op4 mexp .)
    AND             reduce using rule 99 (op4aux -> op4 mexp .)
    OR              reduce using rule 99 (op4aux -> op4 mexp .)
    R_SB            reduce using rule 99 (op4aux -> op4 mexp .)
    ID              reduce using rule 99 (op4aux -> op4 mexp .)
    RETURN          reduce using rule 99 (op4aux -> op4 mexp .)
    READ            reduce using rule 99 (op4aux -> op4 mexp .)
    PRINT           reduce using rule 99 (op4aux -> op4 mexp .)
    IF              reduce using rule 99 (op4aux -> op4 mexp .)
    WHILE           reduce using rule 99 (op4aux -> op4 mexp .)
    FOR             reduce using rule 99 (op4aux -> op4 mexp .)
    L_P             reduce using rule 99 (op4aux -> op4 mexp .)
    CTE_I           reduce using rule 99 (op4aux -> op4 mexp .)
    CTE_F           reduce using rule 99 (op4aux -> op4 mexp .)
    CTE_CHAR        reduce using rule 99 (op4aux -> op4 mexp .)
    R_B             reduce using rule 99 (op4aux -> op4 mexp .)
    R_P             reduce using rule 99 (op4aux -> op4 mexp .)
    COMA            reduce using rule 99 (op4aux -> op4 mexp .)
    SEMICOLON       reduce using rule 99 (op4aux -> op4 mexp .)
    TO              reduce using rule 99 (op4aux -> op4 mexp .)
    DO              reduce using rule 99 (op4aux -> op4 mexp .)


state 152

    (104) op5aux -> op5 term .

    PLUS            reduce using rule 104 (op5aux -> op5 term .)
    MINUS           reduce using rule 104 (op5aux -> op5 term .)
    LESSTHAN        reduce using rule 104 (op5aux -> op5 term .)
    LESSTHANEQ      reduce using rule 104 (op5aux -> op5 term .)
    GREATERTHAN     reduce using rule 104 (op5aux -> op5 term .)
    GREATERTHANEQ   reduce using rule 104 (op5aux -> op5 term .)
    EQ              reduce using rule 104 (op5aux -> op5 term .)
    DIFERENT        reduce using rule 104 (op5aux -> op5 term .)
    AND             reduce using rule 104 (op5aux -> op5 term .)
    OR              reduce using rule 104 (op5aux -> op5 term .)
    R_SB            reduce using rule 104 (op5aux -> op5 term .)
    ID              reduce using rule 104 (op5aux -> op5 term .)
    RETURN          reduce using rule 104 (op5aux -> op5 term .)
    READ            reduce using rule 104 (op5aux -> op5 term .)
    PRINT           reduce using rule 104 (op5aux -> op5 term .)
    IF              reduce using rule 104 (op5aux -> op5 term .)
    WHILE           reduce using rule 104 (op5aux -> op5 term .)
    FOR             reduce using rule 104 (op5aux -> op5 term .)
    L_P             reduce using rule 104 (op5aux -> op5 term .)
    CTE_I           reduce using rule 104 (op5aux -> op5 term .)
    CTE_F           reduce using rule 104 (op5aux -> op5 term .)
    CTE_CHAR        reduce using rule 104 (op5aux -> op5 term .)
    R_B             reduce using rule 104 (op5aux -> op5 term .)
    R_P             reduce using rule 104 (op5aux -> op5 term .)
    COMA            reduce using rule 104 (op5aux -> op5 term .)
    SEMICOLON       reduce using rule 104 (op5aux -> op5 term .)
    TO              reduce using rule 104 (op5aux -> op5 term .)
    DO              reduce using rule 104 (op5aux -> op5 term .)


state 153

    (80) fact1 -> L_P args . R_P

    R_P             shift and go to state 172


state 154

    (47) args -> args1 .

    R_P             reduce using rule 47 (args -> args1 .)


state 155

    (48) args -> empty .

    R_P             reduce using rule 48 (args -> empty .)


state 156

    (49) args1 -> expression . args2
    (50) args2 -> . COMA args1
    (51) args2 -> . empty
    (106) empty -> .

    COMA            shift and go to state 174
    R_P             reduce using rule 106 (empty -> .)

    args2                          shift and go to state 173
    empty                          shift and go to state 175

state 157

    (78) fact -> L_P expression R_P .

    MULT            reduce using rule 78 (fact -> L_P expression R_P .)
    DIV             reduce using rule 78 (fact -> L_P expression R_P .)
    MOD             reduce using rule 78 (fact -> L_P expression R_P .)
    PLUS            reduce using rule 78 (fact -> L_P expression R_P .)
    MINUS           reduce using rule 78 (fact -> L_P expression R_P .)
    LESSTHAN        reduce using rule 78 (fact -> L_P expression R_P .)
    LESSTHANEQ      reduce using rule 78 (fact -> L_P expression R_P .)
    GREATERTHAN     reduce using rule 78 (fact -> L_P expression R_P .)
    GREATERTHANEQ   reduce using rule 78 (fact -> L_P expression R_P .)
    EQ              reduce using rule 78 (fact -> L_P expression R_P .)
    DIFERENT        reduce using rule 78 (fact -> L_P expression R_P .)
    AND             reduce using rule 78 (fact -> L_P expression R_P .)
    OR              reduce using rule 78 (fact -> L_P expression R_P .)
    R_SB            reduce using rule 78 (fact -> L_P expression R_P .)
    ID              reduce using rule 78 (fact -> L_P expression R_P .)
    RETURN          reduce using rule 78 (fact -> L_P expression R_P .)
    READ            reduce using rule 78 (fact -> L_P expression R_P .)
    PRINT           reduce using rule 78 (fact -> L_P expression R_P .)
    IF              reduce using rule 78 (fact -> L_P expression R_P .)
    WHILE           reduce using rule 78 (fact -> L_P expression R_P .)
    FOR             reduce using rule 78 (fact -> L_P expression R_P .)
    L_P             reduce using rule 78 (fact -> L_P expression R_P .)
    CTE_I           reduce using rule 78 (fact -> L_P expression R_P .)
    CTE_F           reduce using rule 78 (fact -> L_P expression R_P .)
    CTE_CHAR        reduce using rule 78 (fact -> L_P expression R_P .)
    R_B             reduce using rule 78 (fact -> L_P expression R_P .)
    R_P             reduce using rule 78 (fact -> L_P expression R_P .)
    COMA            reduce using rule 78 (fact -> L_P expression R_P .)
    SEMICOLON       reduce using rule 78 (fact -> L_P expression R_P .)
    TO              reduce using rule 78 (fact -> L_P expression R_P .)
    DO              reduce using rule 78 (fact -> L_P expression R_P .)


state 158

    (29) function -> FUNC func_type ID L_P params R_P var_declaration L_B statements . R_B

    R_B             shift and go to state 176


state 159

    (46) assignation -> id EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 177


state 160

    (52) call_func -> ID L_P args . R_P SEMICOLON
    (80) fact1 -> L_P args . R_P

    R_P             shift and go to state 178


state 161

    (53) return_func -> RETURN L_P expression . R_P SEMICOLON

    R_P             shift and go to state 179


state 162

    (54) read -> READ L_P read_args . R_P SEMICOLON

    R_P             shift and go to state 180


state 163

    (55) read_args -> expression . read_args1
    (56) read_args1 -> . COMA expression read_args1
    (57) read_args1 -> . empty
    (106) empty -> .

    COMA            shift and go to state 182
    R_P             reduce using rule 106 (empty -> .)

    read_args1                     shift and go to state 181
    empty                          shift and go to state 183

state 164

    (58) write -> PRINT L_P write_args . R_P SEMICOLON

    R_P             shift and go to state 184


state 165

    (59) write_args -> write_args2 . write_args1
    (60) write_args1 -> . COMA write_args2 write_args1
    (61) write_args1 -> . empty
    (106) empty -> .

    COMA            shift and go to state 186
    R_P             reduce using rule 106 (empty -> .)

    write_args1                    shift and go to state 185
    empty                          shift and go to state 187

state 166

    (62) write_args2 -> expression .

    COMA            reduce using rule 62 (write_args2 -> expression .)
    R_P             reduce using rule 62 (write_args2 -> expression .)


state 167

    (63) write_args2 -> CTE_STRING .

    COMA            reduce using rule 63 (write_args2 -> CTE_STRING .)
    R_P             reduce using rule 63 (write_args2 -> CTE_STRING .)


state 168

    (64) decision_statement -> IF L_P expression . R_P L_B statements R_B decision_statement1

    R_P             shift and go to state 188


state 169

    (70) while_statement -> WHILE L_P expression . R_P do_statement

    R_P             shift and go to state 189


state 170

    (69) for_statement -> FOR id EQUAL . expression TO expression do_statement
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expression                     shift and go to state 190
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 171

    (26) id2 -> L_SB expression . R_SB

    R_SB            shift and go to state 191


state 172

    (80) fact1 -> L_P args R_P .

    MULT            reduce using rule 80 (fact1 -> L_P args R_P .)
    DIV             reduce using rule 80 (fact1 -> L_P args R_P .)
    MOD             reduce using rule 80 (fact1 -> L_P args R_P .)
    PLUS            reduce using rule 80 (fact1 -> L_P args R_P .)
    MINUS           reduce using rule 80 (fact1 -> L_P args R_P .)
    LESSTHAN        reduce using rule 80 (fact1 -> L_P args R_P .)
    LESSTHANEQ      reduce using rule 80 (fact1 -> L_P args R_P .)
    GREATERTHAN     reduce using rule 80 (fact1 -> L_P args R_P .)
    GREATERTHANEQ   reduce using rule 80 (fact1 -> L_P args R_P .)
    EQ              reduce using rule 80 (fact1 -> L_P args R_P .)
    DIFERENT        reduce using rule 80 (fact1 -> L_P args R_P .)
    AND             reduce using rule 80 (fact1 -> L_P args R_P .)
    OR              reduce using rule 80 (fact1 -> L_P args R_P .)
    R_SB            reduce using rule 80 (fact1 -> L_P args R_P .)
    R_P             reduce using rule 80 (fact1 -> L_P args R_P .)
    ID              reduce using rule 80 (fact1 -> L_P args R_P .)
    RETURN          reduce using rule 80 (fact1 -> L_P args R_P .)
    READ            reduce using rule 80 (fact1 -> L_P args R_P .)
    PRINT           reduce using rule 80 (fact1 -> L_P args R_P .)
    IF              reduce using rule 80 (fact1 -> L_P args R_P .)
    WHILE           reduce using rule 80 (fact1 -> L_P args R_P .)
    FOR             reduce using rule 80 (fact1 -> L_P args R_P .)
    L_P             reduce using rule 80 (fact1 -> L_P args R_P .)
    CTE_I           reduce using rule 80 (fact1 -> L_P args R_P .)
    CTE_F           reduce using rule 80 (fact1 -> L_P args R_P .)
    CTE_CHAR        reduce using rule 80 (fact1 -> L_P args R_P .)
    R_B             reduce using rule 80 (fact1 -> L_P args R_P .)
    COMA            reduce using rule 80 (fact1 -> L_P args R_P .)
    SEMICOLON       reduce using rule 80 (fact1 -> L_P args R_P .)
    TO              reduce using rule 80 (fact1 -> L_P args R_P .)
    DO              reduce using rule 80 (fact1 -> L_P args R_P .)


state 173

    (49) args1 -> expression args2 .

    R_P             reduce using rule 49 (args1 -> expression args2 .)


state 174

    (50) args2 -> COMA . args1
    (49) args1 -> . expression args2
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    args1                          shift and go to state 192
    expression                     shift and go to state 156
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 175

    (51) args2 -> empty .

    R_P             reduce using rule 51 (args2 -> empty .)


state 176

    (29) function -> FUNC func_type ID L_P params R_P var_declaration L_B statements R_B .

    FUNC            reduce using rule 29 (function -> FUNC func_type ID L_P params R_P var_declaration L_B statements R_B .)
    MAIN            reduce using rule 29 (function -> FUNC func_type ID L_P params R_P var_declaration L_B statements R_B .)


state 177

    (46) assignation -> id EQUAL expression SEMICOLON .

    ID              reduce using rule 46 (assignation -> id EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 46 (assignation -> id EQUAL expression SEMICOLON .)
    READ            reduce using rule 46 (assignation -> id EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 46 (assignation -> id EQUAL expression SEMICOLON .)
    IF              reduce using rule 46 (assignation -> id EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 46 (assignation -> id EQUAL expression SEMICOLON .)
    FOR             reduce using rule 46 (assignation -> id EQUAL expression SEMICOLON .)
    L_P             reduce using rule 46 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_I           reduce using rule 46 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_F           reduce using rule 46 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_CHAR        reduce using rule 46 (assignation -> id EQUAL expression SEMICOLON .)
    R_B             reduce using rule 46 (assignation -> id EQUAL expression SEMICOLON .)


state 178

    (52) call_func -> ID L_P args R_P . SEMICOLON
    (80) fact1 -> L_P args R_P .

    SEMICOLON       shift and go to state 193
    MULT            reduce using rule 80 (fact1 -> L_P args R_P .)
    DIV             reduce using rule 80 (fact1 -> L_P args R_P .)
    MOD             reduce using rule 80 (fact1 -> L_P args R_P .)
    PLUS            reduce using rule 80 (fact1 -> L_P args R_P .)
    MINUS           reduce using rule 80 (fact1 -> L_P args R_P .)
    LESSTHAN        reduce using rule 80 (fact1 -> L_P args R_P .)
    LESSTHANEQ      reduce using rule 80 (fact1 -> L_P args R_P .)
    GREATERTHAN     reduce using rule 80 (fact1 -> L_P args R_P .)
    GREATERTHANEQ   reduce using rule 80 (fact1 -> L_P args R_P .)
    EQ              reduce using rule 80 (fact1 -> L_P args R_P .)
    DIFERENT        reduce using rule 80 (fact1 -> L_P args R_P .)
    AND             reduce using rule 80 (fact1 -> L_P args R_P .)
    OR              reduce using rule 80 (fact1 -> L_P args R_P .)
    ID              reduce using rule 80 (fact1 -> L_P args R_P .)
    RETURN          reduce using rule 80 (fact1 -> L_P args R_P .)
    READ            reduce using rule 80 (fact1 -> L_P args R_P .)
    PRINT           reduce using rule 80 (fact1 -> L_P args R_P .)
    IF              reduce using rule 80 (fact1 -> L_P args R_P .)
    WHILE           reduce using rule 80 (fact1 -> L_P args R_P .)
    FOR             reduce using rule 80 (fact1 -> L_P args R_P .)
    L_P             reduce using rule 80 (fact1 -> L_P args R_P .)
    CTE_I           reduce using rule 80 (fact1 -> L_P args R_P .)
    CTE_F           reduce using rule 80 (fact1 -> L_P args R_P .)
    CTE_CHAR        reduce using rule 80 (fact1 -> L_P args R_P .)
    R_B             reduce using rule 80 (fact1 -> L_P args R_P .)


state 179

    (53) return_func -> RETURN L_P expression R_P . SEMICOLON

    SEMICOLON       shift and go to state 194


state 180

    (54) read -> READ L_P read_args R_P . SEMICOLON

    SEMICOLON       shift and go to state 195


state 181

    (55) read_args -> expression read_args1 .

    R_P             reduce using rule 55 (read_args -> expression read_args1 .)


state 182

    (56) read_args1 -> COMA . expression read_args1
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expression                     shift and go to state 196
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 183

    (57) read_args1 -> empty .

    R_P             reduce using rule 57 (read_args1 -> empty .)


state 184

    (58) write -> PRINT L_P write_args R_P . SEMICOLON

    SEMICOLON       shift and go to state 197


state 185

    (59) write_args -> write_args2 write_args1 .

    R_P             reduce using rule 59 (write_args -> write_args2 write_args1 .)


state 186

    (60) write_args1 -> COMA . write_args2 write_args1
    (62) write_args2 -> . expression
    (63) write_args2 -> . CTE_STRING
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    CTE_STRING      shift and go to state 167
    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    write_args2                    shift and go to state 198
    expression                     shift and go to state 166
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 187

    (61) write_args1 -> empty .

    R_P             reduce using rule 61 (write_args1 -> empty .)


state 188

    (64) decision_statement -> IF L_P expression R_P . L_B statements R_B decision_statement1

    L_B             shift and go to state 199


state 189

    (70) while_statement -> WHILE L_P expression R_P . do_statement
    (71) do_statement -> . DO L_B statements R_B

    DO              shift and go to state 201

    do_statement                   shift and go to state 200

state 190

    (69) for_statement -> FOR id EQUAL expression . TO expression do_statement

    TO              shift and go to state 202


state 191

    (26) id2 -> L_SB expression R_SB .

    COMA            reduce using rule 26 (id2 -> L_SB expression R_SB .)
    R_P             reduce using rule 26 (id2 -> L_SB expression R_SB .)
    EQUAL           reduce using rule 26 (id2 -> L_SB expression R_SB .)
    MULT            reduce using rule 26 (id2 -> L_SB expression R_SB .)
    DIV             reduce using rule 26 (id2 -> L_SB expression R_SB .)
    MOD             reduce using rule 26 (id2 -> L_SB expression R_SB .)
    PLUS            reduce using rule 26 (id2 -> L_SB expression R_SB .)
    MINUS           reduce using rule 26 (id2 -> L_SB expression R_SB .)
    LESSTHAN        reduce using rule 26 (id2 -> L_SB expression R_SB .)
    LESSTHANEQ      reduce using rule 26 (id2 -> L_SB expression R_SB .)
    GREATERTHAN     reduce using rule 26 (id2 -> L_SB expression R_SB .)
    GREATERTHANEQ   reduce using rule 26 (id2 -> L_SB expression R_SB .)
    EQ              reduce using rule 26 (id2 -> L_SB expression R_SB .)
    DIFERENT        reduce using rule 26 (id2 -> L_SB expression R_SB .)
    AND             reduce using rule 26 (id2 -> L_SB expression R_SB .)
    OR              reduce using rule 26 (id2 -> L_SB expression R_SB .)
    R_SB            reduce using rule 26 (id2 -> L_SB expression R_SB .)
    ID              reduce using rule 26 (id2 -> L_SB expression R_SB .)
    RETURN          reduce using rule 26 (id2 -> L_SB expression R_SB .)
    READ            reduce using rule 26 (id2 -> L_SB expression R_SB .)
    PRINT           reduce using rule 26 (id2 -> L_SB expression R_SB .)
    IF              reduce using rule 26 (id2 -> L_SB expression R_SB .)
    WHILE           reduce using rule 26 (id2 -> L_SB expression R_SB .)
    FOR             reduce using rule 26 (id2 -> L_SB expression R_SB .)
    L_P             reduce using rule 26 (id2 -> L_SB expression R_SB .)
    CTE_I           reduce using rule 26 (id2 -> L_SB expression R_SB .)
    CTE_F           reduce using rule 26 (id2 -> L_SB expression R_SB .)
    CTE_CHAR        reduce using rule 26 (id2 -> L_SB expression R_SB .)
    R_B             reduce using rule 26 (id2 -> L_SB expression R_SB .)
    SEMICOLON       reduce using rule 26 (id2 -> L_SB expression R_SB .)
    TO              reduce using rule 26 (id2 -> L_SB expression R_SB .)
    DO              reduce using rule 26 (id2 -> L_SB expression R_SB .)


state 192

    (50) args2 -> COMA args1 .

    R_P             reduce using rule 50 (args2 -> COMA args1 .)


state 193

    (52) call_func -> ID L_P args R_P SEMICOLON .

    ID              reduce using rule 52 (call_func -> ID L_P args R_P SEMICOLON .)
    RETURN          reduce using rule 52 (call_func -> ID L_P args R_P SEMICOLON .)
    READ            reduce using rule 52 (call_func -> ID L_P args R_P SEMICOLON .)
    PRINT           reduce using rule 52 (call_func -> ID L_P args R_P SEMICOLON .)
    IF              reduce using rule 52 (call_func -> ID L_P args R_P SEMICOLON .)
    WHILE           reduce using rule 52 (call_func -> ID L_P args R_P SEMICOLON .)
    FOR             reduce using rule 52 (call_func -> ID L_P args R_P SEMICOLON .)
    L_P             reduce using rule 52 (call_func -> ID L_P args R_P SEMICOLON .)
    CTE_I           reduce using rule 52 (call_func -> ID L_P args R_P SEMICOLON .)
    CTE_F           reduce using rule 52 (call_func -> ID L_P args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 52 (call_func -> ID L_P args R_P SEMICOLON .)
    R_B             reduce using rule 52 (call_func -> ID L_P args R_P SEMICOLON .)


state 194

    (53) return_func -> RETURN L_P expression R_P SEMICOLON .

    ID              reduce using rule 53 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    RETURN          reduce using rule 53 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    READ            reduce using rule 53 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    PRINT           reduce using rule 53 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    IF              reduce using rule 53 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    WHILE           reduce using rule 53 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    FOR             reduce using rule 53 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    L_P             reduce using rule 53 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_I           reduce using rule 53 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_F           reduce using rule 53 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 53 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    R_B             reduce using rule 53 (return_func -> RETURN L_P expression R_P SEMICOLON .)


state 195

    (54) read -> READ L_P read_args R_P SEMICOLON .

    ID              reduce using rule 54 (read -> READ L_P read_args R_P SEMICOLON .)
    RETURN          reduce using rule 54 (read -> READ L_P read_args R_P SEMICOLON .)
    READ            reduce using rule 54 (read -> READ L_P read_args R_P SEMICOLON .)
    PRINT           reduce using rule 54 (read -> READ L_P read_args R_P SEMICOLON .)
    IF              reduce using rule 54 (read -> READ L_P read_args R_P SEMICOLON .)
    WHILE           reduce using rule 54 (read -> READ L_P read_args R_P SEMICOLON .)
    FOR             reduce using rule 54 (read -> READ L_P read_args R_P SEMICOLON .)
    L_P             reduce using rule 54 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_I           reduce using rule 54 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_F           reduce using rule 54 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 54 (read -> READ L_P read_args R_P SEMICOLON .)
    R_B             reduce using rule 54 (read -> READ L_P read_args R_P SEMICOLON .)


state 196

    (56) read_args1 -> COMA expression . read_args1
    (56) read_args1 -> . COMA expression read_args1
    (57) read_args1 -> . empty
    (106) empty -> .

    COMA            shift and go to state 182
    R_P             reduce using rule 106 (empty -> .)

    read_args1                     shift and go to state 203
    empty                          shift and go to state 183

state 197

    (58) write -> PRINT L_P write_args R_P SEMICOLON .

    ID              reduce using rule 58 (write -> PRINT L_P write_args R_P SEMICOLON .)
    RETURN          reduce using rule 58 (write -> PRINT L_P write_args R_P SEMICOLON .)
    READ            reduce using rule 58 (write -> PRINT L_P write_args R_P SEMICOLON .)
    PRINT           reduce using rule 58 (write -> PRINT L_P write_args R_P SEMICOLON .)
    IF              reduce using rule 58 (write -> PRINT L_P write_args R_P SEMICOLON .)
    WHILE           reduce using rule 58 (write -> PRINT L_P write_args R_P SEMICOLON .)
    FOR             reduce using rule 58 (write -> PRINT L_P write_args R_P SEMICOLON .)
    L_P             reduce using rule 58 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_I           reduce using rule 58 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_F           reduce using rule 58 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 58 (write -> PRINT L_P write_args R_P SEMICOLON .)
    R_B             reduce using rule 58 (write -> PRINT L_P write_args R_P SEMICOLON .)


state 198

    (60) write_args1 -> COMA write_args2 . write_args1
    (60) write_args1 -> . COMA write_args2 write_args1
    (61) write_args1 -> . empty
    (106) empty -> .

    COMA            shift and go to state 186
    R_P             reduce using rule 106 (empty -> .)

    write_args1                    shift and go to state 204
    empty                          shift and go to state 187

state 199

    (64) decision_statement -> IF L_P expression R_P L_B . statements R_B decision_statement1
    (36) statements -> . statement statements
    (37) statements -> . empty
    (38) statement -> . assignation
    (39) statement -> . call_func
    (40) statement -> . return_func
    (41) statement -> . read
    (42) statement -> . write
    (43) statement -> . decision_statement
    (44) statement -> . repetition_statement
    (45) statement -> . expression
    (106) empty -> .
    (46) assignation -> . id EQUAL expression SEMICOLON
    (52) call_func -> . ID L_P args R_P SEMICOLON
    (53) return_func -> . RETURN L_P expression R_P SEMICOLON
    (54) read -> . READ L_P read_args R_P SEMICOLON
    (58) write -> . PRINT L_P write_args R_P SEMICOLON
    (64) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (67) repetition_statement -> . while_statement
    (68) repetition_statement -> . for_statement
    (72) expression -> . texp op1
    (23) id -> . ID id1
    (70) while_statement -> . WHILE L_P expression R_P do_statement
    (69) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    R_B             reduce using rule 106 (empty -> .)
    ID              shift and go to state 92
    RETURN          shift and go to state 93
    READ            shift and go to state 94
    PRINT           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expression                     shift and go to state 90
    statements                     shift and go to state 205
    statement                      shift and go to state 81
    empty                          shift and go to state 82
    assignation                    shift and go to state 83
    call_func                      shift and go to state 84
    return_func                    shift and go to state 85
    read                           shift and go to state 86
    write                          shift and go to state 87
    decision_statement             shift and go to state 88
    repetition_statement           shift and go to state 89
    id                             shift and go to state 91
    while_statement                shift and go to state 97
    for_statement                  shift and go to state 98
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 200

    (70) while_statement -> WHILE L_P expression R_P do_statement .

    ID              reduce using rule 70 (while_statement -> WHILE L_P expression R_P do_statement .)
    RETURN          reduce using rule 70 (while_statement -> WHILE L_P expression R_P do_statement .)
    READ            reduce using rule 70 (while_statement -> WHILE L_P expression R_P do_statement .)
    PRINT           reduce using rule 70 (while_statement -> WHILE L_P expression R_P do_statement .)
    IF              reduce using rule 70 (while_statement -> WHILE L_P expression R_P do_statement .)
    WHILE           reduce using rule 70 (while_statement -> WHILE L_P expression R_P do_statement .)
    FOR             reduce using rule 70 (while_statement -> WHILE L_P expression R_P do_statement .)
    L_P             reduce using rule 70 (while_statement -> WHILE L_P expression R_P do_statement .)
    CTE_I           reduce using rule 70 (while_statement -> WHILE L_P expression R_P do_statement .)
    CTE_F           reduce using rule 70 (while_statement -> WHILE L_P expression R_P do_statement .)
    CTE_CHAR        reduce using rule 70 (while_statement -> WHILE L_P expression R_P do_statement .)
    R_B             reduce using rule 70 (while_statement -> WHILE L_P expression R_P do_statement .)


state 201

    (71) do_statement -> DO . L_B statements R_B

    L_B             shift and go to state 206


state 202

    (69) for_statement -> FOR id EQUAL expression TO . expression do_statement
    (72) expression -> . texp op1
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    ID              shift and go to state 72
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    expression                     shift and go to state 207
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 203

    (56) read_args1 -> COMA expression read_args1 .

    R_P             reduce using rule 56 (read_args1 -> COMA expression read_args1 .)


state 204

    (60) write_args1 -> COMA write_args2 write_args1 .

    R_P             reduce using rule 60 (write_args1 -> COMA write_args2 write_args1 .)


state 205

    (64) decision_statement -> IF L_P expression R_P L_B statements . R_B decision_statement1

    R_B             shift and go to state 208


state 206

    (71) do_statement -> DO L_B . statements R_B
    (36) statements -> . statement statements
    (37) statements -> . empty
    (38) statement -> . assignation
    (39) statement -> . call_func
    (40) statement -> . return_func
    (41) statement -> . read
    (42) statement -> . write
    (43) statement -> . decision_statement
    (44) statement -> . repetition_statement
    (45) statement -> . expression
    (106) empty -> .
    (46) assignation -> . id EQUAL expression SEMICOLON
    (52) call_func -> . ID L_P args R_P SEMICOLON
    (53) return_func -> . RETURN L_P expression R_P SEMICOLON
    (54) read -> . READ L_P read_args R_P SEMICOLON
    (58) write -> . PRINT L_P write_args R_P SEMICOLON
    (64) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (67) repetition_statement -> . while_statement
    (68) repetition_statement -> . for_statement
    (72) expression -> . texp op1
    (23) id -> . ID id1
    (70) while_statement -> . WHILE L_P expression R_P do_statement
    (69) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    R_B             reduce using rule 106 (empty -> .)
    ID              shift and go to state 92
    RETURN          shift and go to state 93
    READ            shift and go to state 94
    PRINT           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    statements                     shift and go to state 209
    statement                      shift and go to state 81
    empty                          shift and go to state 82
    assignation                    shift and go to state 83
    call_func                      shift and go to state 84
    return_func                    shift and go to state 85
    read                           shift and go to state 86
    write                          shift and go to state 87
    decision_statement             shift and go to state 88
    repetition_statement           shift and go to state 89
    expression                     shift and go to state 90
    id                             shift and go to state 91
    while_statement                shift and go to state 97
    for_statement                  shift and go to state 98
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 207

    (69) for_statement -> FOR id EQUAL expression TO expression . do_statement
    (71) do_statement -> . DO L_B statements R_B

    DO              shift and go to state 201

    do_statement                   shift and go to state 210

state 208

    (64) decision_statement -> IF L_P expression R_P L_B statements R_B . decision_statement1
    (65) decision_statement1 -> . ELSE L_B statements R_B
    (66) decision_statement1 -> . empty
    (106) empty -> .

    ELSE            shift and go to state 212
    ID              reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    READ            reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    L_P             reduce using rule 106 (empty -> .)
    CTE_I           reduce using rule 106 (empty -> .)
    CTE_F           reduce using rule 106 (empty -> .)
    CTE_CHAR        reduce using rule 106 (empty -> .)
    R_B             reduce using rule 106 (empty -> .)

    decision_statement1            shift and go to state 211
    empty                          shift and go to state 213

state 209

    (71) do_statement -> DO L_B statements . R_B

    R_B             shift and go to state 214


state 210

    (69) for_statement -> FOR id EQUAL expression TO expression do_statement .

    ID              reduce using rule 69 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    RETURN          reduce using rule 69 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    READ            reduce using rule 69 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    PRINT           reduce using rule 69 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    IF              reduce using rule 69 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    WHILE           reduce using rule 69 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    FOR             reduce using rule 69 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    L_P             reduce using rule 69 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    CTE_I           reduce using rule 69 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    CTE_F           reduce using rule 69 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    CTE_CHAR        reduce using rule 69 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    R_B             reduce using rule 69 (for_statement -> FOR id EQUAL expression TO expression do_statement .)


state 211

    (64) decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .

    ID              reduce using rule 64 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    RETURN          reduce using rule 64 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    READ            reduce using rule 64 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    PRINT           reduce using rule 64 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    IF              reduce using rule 64 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    WHILE           reduce using rule 64 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    FOR             reduce using rule 64 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    L_P             reduce using rule 64 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    CTE_I           reduce using rule 64 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    CTE_F           reduce using rule 64 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    CTE_CHAR        reduce using rule 64 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    R_B             reduce using rule 64 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)


state 212

    (65) decision_statement1 -> ELSE . L_B statements R_B

    L_B             shift and go to state 215


state 213

    (66) decision_statement1 -> empty .

    ID              reduce using rule 66 (decision_statement1 -> empty .)
    RETURN          reduce using rule 66 (decision_statement1 -> empty .)
    READ            reduce using rule 66 (decision_statement1 -> empty .)
    PRINT           reduce using rule 66 (decision_statement1 -> empty .)
    IF              reduce using rule 66 (decision_statement1 -> empty .)
    WHILE           reduce using rule 66 (decision_statement1 -> empty .)
    FOR             reduce using rule 66 (decision_statement1 -> empty .)
    L_P             reduce using rule 66 (decision_statement1 -> empty .)
    CTE_I           reduce using rule 66 (decision_statement1 -> empty .)
    CTE_F           reduce using rule 66 (decision_statement1 -> empty .)
    CTE_CHAR        reduce using rule 66 (decision_statement1 -> empty .)
    R_B             reduce using rule 66 (decision_statement1 -> empty .)


state 214

    (71) do_statement -> DO L_B statements R_B .

    ID              reduce using rule 71 (do_statement -> DO L_B statements R_B .)
    RETURN          reduce using rule 71 (do_statement -> DO L_B statements R_B .)
    READ            reduce using rule 71 (do_statement -> DO L_B statements R_B .)
    PRINT           reduce using rule 71 (do_statement -> DO L_B statements R_B .)
    IF              reduce using rule 71 (do_statement -> DO L_B statements R_B .)
    WHILE           reduce using rule 71 (do_statement -> DO L_B statements R_B .)
    FOR             reduce using rule 71 (do_statement -> DO L_B statements R_B .)
    L_P             reduce using rule 71 (do_statement -> DO L_B statements R_B .)
    CTE_I           reduce using rule 71 (do_statement -> DO L_B statements R_B .)
    CTE_F           reduce using rule 71 (do_statement -> DO L_B statements R_B .)
    CTE_CHAR        reduce using rule 71 (do_statement -> DO L_B statements R_B .)
    R_B             reduce using rule 71 (do_statement -> DO L_B statements R_B .)


state 215

    (65) decision_statement1 -> ELSE L_B . statements R_B
    (36) statements -> . statement statements
    (37) statements -> . empty
    (38) statement -> . assignation
    (39) statement -> . call_func
    (40) statement -> . return_func
    (41) statement -> . read
    (42) statement -> . write
    (43) statement -> . decision_statement
    (44) statement -> . repetition_statement
    (45) statement -> . expression
    (106) empty -> .
    (46) assignation -> . id EQUAL expression SEMICOLON
    (52) call_func -> . ID L_P args R_P SEMICOLON
    (53) return_func -> . RETURN L_P expression R_P SEMICOLON
    (54) read -> . READ L_P read_args R_P SEMICOLON
    (58) write -> . PRINT L_P write_args R_P SEMICOLON
    (64) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (67) repetition_statement -> . while_statement
    (68) repetition_statement -> . for_statement
    (72) expression -> . texp op1
    (23) id -> . ID id1
    (70) while_statement -> . WHILE L_P expression R_P do_statement
    (69) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (73) texp -> . gexp op2
    (74) gexp -> . mexp op3aux
    (75) mexp -> . term op4aux
    (76) term -> . fact op5aux
    (77) fact -> . ID fact1
    (78) fact -> . L_P expression R_P
    (79) fact -> . cte
    (82) cte -> . CTE_I
    (83) cte -> . CTE_F
    (84) cte -> . CTE_CHAR

    R_B             reduce using rule 106 (empty -> .)
    ID              shift and go to state 92
    RETURN          shift and go to state 93
    READ            shift and go to state 94
    PRINT           shift and go to state 95
    IF              shift and go to state 96
    WHILE           shift and go to state 99
    FOR             shift and go to state 100
    L_P             shift and go to state 73
    CTE_I           shift and go to state 75
    CTE_F           shift and go to state 76
    CTE_CHAR        shift and go to state 77

    statements                     shift and go to state 216
    statement                      shift and go to state 81
    empty                          shift and go to state 82
    assignation                    shift and go to state 83
    call_func                      shift and go to state 84
    return_func                    shift and go to state 85
    read                           shift and go to state 86
    write                          shift and go to state 87
    decision_statement             shift and go to state 88
    repetition_statement           shift and go to state 89
    expression                     shift and go to state 90
    id                             shift and go to state 91
    while_statement                shift and go to state 97
    for_statement                  shift and go to state 98
    texp                           shift and go to state 67
    gexp                           shift and go to state 68
    mexp                           shift and go to state 69
    term                           shift and go to state 70
    fact                           shift and go to state 71
    cte                            shift and go to state 74

state 216

    (65) decision_statement1 -> ELSE L_B statements . R_B

    R_B             shift and go to state 217


state 217

    (65) decision_statement1 -> ELSE L_B statements R_B .

    ID              reduce using rule 65 (decision_statement1 -> ELSE L_B statements R_B .)
    RETURN          reduce using rule 65 (decision_statement1 -> ELSE L_B statements R_B .)
    READ            reduce using rule 65 (decision_statement1 -> ELSE L_B statements R_B .)
    PRINT           reduce using rule 65 (decision_statement1 -> ELSE L_B statements R_B .)
    IF              reduce using rule 65 (decision_statement1 -> ELSE L_B statements R_B .)
    WHILE           reduce using rule 65 (decision_statement1 -> ELSE L_B statements R_B .)
    FOR             reduce using rule 65 (decision_statement1 -> ELSE L_B statements R_B .)
    L_P             reduce using rule 65 (decision_statement1 -> ELSE L_B statements R_B .)
    CTE_I           reduce using rule 65 (decision_statement1 -> ELSE L_B statements R_B .)
    CTE_F           reduce using rule 65 (decision_statement1 -> ELSE L_B statements R_B .)
    CTE_CHAR        reduce using rule 65 (decision_statement1 -> ELSE L_B statements R_B .)
    R_B             reduce using rule 65 (decision_statement1 -> ELSE L_B statements R_B .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for L_P in state 72 resolved as shift
WARNING: shift/reduce conflict for L_P in state 92 resolved as shift
WARNING: reduce/reduce conflict in state 7 resolved using rule (g_var -> empty)
WARNING: rejected rule (var_declaration -> empty) in state 7
