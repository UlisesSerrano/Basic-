Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID main_quad SEMICOLON g_var funcs main
Rule 2     main_quad -> <empty>
Rule 3     main -> MAIN L_P params R_P var_declaration L_B main_start statements R_B
Rule 4     main_start -> <empty>
Rule 5     type -> INT
Rule 6     type -> FLOAT
Rule 7     type -> CHAR
Rule 8     g_var -> var_declaration
Rule 9     funcs -> function funcs
Rule 10    funcs -> empty
Rule 11    var_declaration -> VAR var1
Rule 12    var_declaration -> empty
Rule 13    var1 -> var_type dec_id var2 SEMICOLON var4
Rule 14    var2 -> COMA dec_id var3
Rule 15    var2 -> empty
Rule 16    var3 -> var2
Rule 17    var4 -> var1
Rule 18    var4 -> empty
Rule 19    dec_id -> ID dec_id1
Rule 20    dec_id1 -> L_SB CTE_I R_SB dec_id2
Rule 21    dec_id1 -> empty
Rule 22    dec_id2 -> L_SB CTE_I R_SB
Rule 23    dec_id2 -> empty
Rule 24    id -> ID id1
Rule 25    id1 -> L_SB expression R_SB id2
Rule 26    id1 -> empty
Rule 27    id2 -> L_SB expression R_SB
Rule 28    id2 -> empty
Rule 29    var_type -> type
Rule 30    function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
Rule 31    register_func -> <empty>
Rule 32    add_params -> <empty>
Rule 33    start_func -> <empty>
Rule 34    func_type -> VOID
Rule 35    func_type -> type
Rule 36    params -> var_type param_type dec_id params1
Rule 37    params -> empty
Rule 38    param_type -> <empty>
Rule 39    params1 -> COMA params
Rule 40    params1 -> empty
Rule 41    statements -> statement statements
Rule 42    statements -> empty
Rule 43    statement -> assignation
Rule 44    statement -> call_func
Rule 45    statement -> return_func
Rule 46    statement -> read
Rule 47    statement -> write
Rule 48    statement -> decision_statement
Rule 49    statement -> repetition_statement
Rule 50    statement -> expression
Rule 51    assignation -> id id_quad EQUAL expression SEMICOLON
Rule 52    args -> args1
Rule 53    args -> empty
Rule 54    args1 -> add_fake expression param_check remove_fake args2
Rule 55    param_check -> <empty>
Rule 56    args2 -> COMA next_arg args1
Rule 57    args2 -> empty
Rule 58    next_arg -> <empty>
Rule 59    call_func -> ID call_func_era L_P args R_P SEMICOLON
Rule 60    call_func_exp -> ID call_func_era L_P args R_P
Rule 61    call_func_era -> <empty>
Rule 62    return_func -> RETURN L_P expression R_P SEMICOLON
Rule 63    read -> READ L_P read_args R_P SEMICOLON
Rule 64    read_args -> add_fake expression remove_fake read_args1
Rule 65    read_args1 -> COMA add_fake expression remove_fake read_args1
Rule 66    read_args1 -> empty
Rule 67    write -> PRINT L_P write_args R_P SEMICOLON
Rule 68    write_args -> write_args2 write_args1
Rule 69    write_args1 -> COMA write_args2 write_args1
Rule 70    write_args1 -> empty
Rule 71    write_args2 -> add_fake expression remove_fake
Rule 72    write_args2 -> CTE_STRING add_cte_string
Rule 73    decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1
Rule 74    decision_statement1 -> ELSE else_jump L_B statements R_B
Rule 75    decision_statement1 -> empty
Rule 76    exp_type -> <empty>
Rule 77    else_jump -> <empty>
Rule 78    repetition_statement -> while_statement
Rule 79    repetition_statement -> for_statement
Rule 80    for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
Rule 81    for_id -> <empty>
Rule 82    breadcrumb -> <empty>
Rule 83    while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement
Rule 84    do_statement -> DO L_B statements R_B
Rule 85    expression -> texp generate_quad_1 op1
Rule 86    texp -> gexp generate_quad_2 op2
Rule 87    gexp -> mexp generate_quad_3 op3aux
Rule 88    mexp -> term generate_quad_4 op4aux
Rule 89    term -> fact generate_quad_5 op5aux
Rule 90    generate_quad_1 -> <empty>
Rule 91    generate_quad_2 -> <empty>
Rule 92    generate_quad_3 -> <empty>
Rule 93    generate_quad_4 -> <empty>
Rule 94    generate_quad_5 -> <empty>
Rule 95    fact -> id id_quad
Rule 96    fact -> call_func_exp
Rule 97    fact -> L_P add_fake expression R_P remove_fake
Rule 98    fact -> cte
Rule 99    add_fake -> <empty>
Rule 100   remove_fake -> <empty>
Rule 101   id_quad -> <empty>
Rule 102   cte -> CTE_CHAR add_cte_char
Rule 103   cte -> CTE_F add_cte_float
Rule 104   cte -> CTE_I add_cte_int
Rule 105   add_cte_int -> <empty>
Rule 106   add_cte_float -> <empty>
Rule 107   add_cte_char -> <empty>
Rule 108   add_cte_string -> <empty>
Rule 109   add_operator -> <empty>
Rule 110   op1 -> OR add_operator expression
Rule 111   op1 -> empty
Rule 112   op2 -> AND add_operator texp
Rule 113   op2 -> empty
Rule 114   op3 -> LESSTHAN
Rule 115   op3 -> LESSTHANEQ
Rule 116   op3 -> GREATERTHAN
Rule 117   op3 -> GREATERTHANEQ
Rule 118   op3 -> EQ
Rule 119   op3 -> DIFERENT
Rule 120   op3aux -> op3 mexp
Rule 121   op3aux -> empty
Rule 122   op4 -> PLUS
Rule 123   op4 -> MINUS
Rule 124   op4aux -> op4 mexp
Rule 125   op4aux -> empty
Rule 126   op5 -> MULT
Rule 127   op5 -> DIV
Rule 128   op5 -> MOD
Rule 129   op5aux -> op5 term
Rule 130   op5aux -> empty
Rule 131   empty -> <empty>

Terminals, with rules where they appear

AND                  : 112
CHAR                 : 7
COMA                 : 14 39 56 65 69
CTE_CHAR             : 102
CTE_F                : 103
CTE_I                : 20 22 104
CTE_STRING           : 72
DIFERENT             : 119
DIV                  : 127
DO                   : 84
ELSE                 : 74
EQ                   : 118
EQUAL                : 51 80
FLOAT                : 6
FOR                  : 80
FUNC                 : 30
GREATERTHAN          : 116
GREATERTHANEQ        : 117
ID                   : 1 19 24 30 59 60
IF                   : 73
INT                  : 5
LESSTHAN             : 114
LESSTHANEQ           : 115
L_B                  : 3 30 73 74 84
L_P                  : 3 30 59 60 62 63 67 73 83 97
L_SB                 : 20 22 25 27
MAIN                 : 3
MINUS                : 123
MOD                  : 128
MULT                 : 126
OR                   : 110
PLUS                 : 122
PRINT                : 67
PROGRAM              : 1
READ                 : 63
RETURN               : 62
R_B                  : 3 30 73 74 84
R_P                  : 3 30 59 60 62 63 67 73 83 97
R_SB                 : 20 22 25 27
SEMICOLON            : 1 13 51 59 62 63 67
TO                   : 80
VAR                  : 11
VOID                 : 34
WHILE                : 83
error                : 

Nonterminals, with rules where they appear

add_cte_char         : 102
add_cte_float        : 103
add_cte_int          : 104
add_cte_string       : 72
add_fake             : 54 64 65 71 97
add_operator         : 110 112
add_params           : 30
args                 : 59 60
args1                : 52 56
args2                : 54
assignation          : 43
breadcrumb           : 80 83
call_func            : 44
call_func_era        : 59 60
call_func_exp        : 96
cte                  : 98
dec_id               : 13 14 36
dec_id1              : 19
dec_id2              : 20
decision_statement   : 48
decision_statement1  : 73
do_statement         : 80 83
else_jump            : 74
empty                : 10 12 15 18 21 23 26 28 37 40 42 53 57 66 70 75 111 113 121 125 130
exp_type             : 73 80 83
expression           : 25 27 50 51 54 62 64 65 71 73 80 80 83 97 110
fact                 : 89
for_id               : 80
for_statement        : 79
func_type            : 30
funcs                : 1 9
function             : 9
g_var                : 1
generate_quad_1      : 85
generate_quad_2      : 86
generate_quad_3      : 87
generate_quad_4      : 88
generate_quad_5      : 89
gexp                 : 86
id                   : 51 80 95
id1                  : 24
id2                  : 25
id_quad              : 51 80 95
main                 : 1
main_quad            : 1
main_start           : 3
mexp                 : 87 120 124
next_arg             : 56
op1                  : 85
op2                  : 86
op3                  : 120
op3aux               : 87
op4                  : 124
op4aux               : 88
op5                  : 129
op5aux               : 89
param_check          : 54
param_type           : 36
params               : 3 30 39
params1              : 36
program              : 0
read                 : 46
read_args            : 63
read_args1           : 64 65
register_func        : 30
remove_fake          : 54 64 65 71 97
repetition_statement : 49
return_func          : 45
start_func           : 30
statement            : 41
statements           : 3 30 41 73 74 84
term                 : 88 129
texp                 : 85 112
type                 : 29 35
var1                 : 11 17
var2                 : 13 16
var3                 : 14
var4                 : 13
var_declaration      : 3 8 30
var_type             : 13 36
while_statement      : 78
write                : 47
write_args           : 67
write_args1          : 68 69
write_args2          : 68 69

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID main_quad SEMICOLON g_var funcs main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID main_quad SEMICOLON g_var funcs main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . main_quad SEMICOLON g_var funcs main
    (2) main_quad -> .

    SEMICOLON       reduce using rule 2 (main_quad -> .)

    main_quad                      shift and go to state 4

state 4

    (1) program -> PROGRAM ID main_quad . SEMICOLON g_var funcs main

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID main_quad SEMICOLON . g_var funcs main
    (8) g_var -> . var_declaration
    (11) var_declaration -> . VAR var1
    (12) var_declaration -> . empty
    (131) empty -> .

    VAR             shift and go to state 8
    FUNC            reduce using rule 131 (empty -> .)
    MAIN            reduce using rule 131 (empty -> .)

    g_var                          shift and go to state 6
    var_declaration                shift and go to state 7
    empty                          shift and go to state 9

state 6

    (1) program -> PROGRAM ID main_quad SEMICOLON g_var . funcs main
    (9) funcs -> . function funcs
    (10) funcs -> . empty
    (30) function -> . FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
    (131) empty -> .

    FUNC            shift and go to state 13
    MAIN            reduce using rule 131 (empty -> .)

    funcs                          shift and go to state 10
    function                       shift and go to state 11
    empty                          shift and go to state 12

state 7

    (8) g_var -> var_declaration .

    FUNC            reduce using rule 8 (g_var -> var_declaration .)
    MAIN            reduce using rule 8 (g_var -> var_declaration .)


state 8

    (11) var_declaration -> VAR . var1
    (13) var1 -> . var_type dec_id var2 SEMICOLON var4
    (29) var_type -> . type
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    var1                           shift and go to state 14
    var_type                       shift and go to state 15
    type                           shift and go to state 16

state 9

    (12) var_declaration -> empty .

    FUNC            reduce using rule 12 (var_declaration -> empty .)
    MAIN            reduce using rule 12 (var_declaration -> empty .)
    L_B             reduce using rule 12 (var_declaration -> empty .)


state 10

    (1) program -> PROGRAM ID main_quad SEMICOLON g_var funcs . main
    (3) main -> . MAIN L_P params R_P var_declaration L_B main_start statements R_B

    MAIN            shift and go to state 21

    main                           shift and go to state 20

state 11

    (9) funcs -> function . funcs
    (9) funcs -> . function funcs
    (10) funcs -> . empty
    (30) function -> . FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
    (131) empty -> .

    FUNC            shift and go to state 13
    MAIN            reduce using rule 131 (empty -> .)

    function                       shift and go to state 11
    funcs                          shift and go to state 22
    empty                          shift and go to state 12

state 12

    (10) funcs -> empty .

    MAIN            reduce using rule 10 (funcs -> empty .)


state 13

    (30) function -> FUNC . func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
    (34) func_type -> . VOID
    (35) func_type -> . type
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    VOID            shift and go to state 24
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    func_type                      shift and go to state 23
    type                           shift and go to state 25

state 14

    (11) var_declaration -> VAR var1 .

    FUNC            reduce using rule 11 (var_declaration -> VAR var1 .)
    MAIN            reduce using rule 11 (var_declaration -> VAR var1 .)
    L_B             reduce using rule 11 (var_declaration -> VAR var1 .)


state 15

    (13) var1 -> var_type . dec_id var2 SEMICOLON var4
    (19) dec_id -> . ID dec_id1

    ID              shift and go to state 27

    dec_id                         shift and go to state 26

state 16

    (29) var_type -> type .

    ID              reduce using rule 29 (var_type -> type .)


state 17

    (5) type -> INT .

    ID              reduce using rule 5 (type -> INT .)


state 18

    (6) type -> FLOAT .

    ID              reduce using rule 6 (type -> FLOAT .)


state 19

    (7) type -> CHAR .

    ID              reduce using rule 7 (type -> CHAR .)


state 20

    (1) program -> PROGRAM ID main_quad SEMICOLON g_var funcs main .

    $end            reduce using rule 1 (program -> PROGRAM ID main_quad SEMICOLON g_var funcs main .)


state 21

    (3) main -> MAIN . L_P params R_P var_declaration L_B main_start statements R_B

    L_P             shift and go to state 28


state 22

    (9) funcs -> function funcs .

    MAIN            reduce using rule 9 (funcs -> function funcs .)


state 23

    (30) function -> FUNC func_type . ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B

    ID              shift and go to state 29


state 24

    (34) func_type -> VOID .

    ID              reduce using rule 34 (func_type -> VOID .)


state 25

    (35) func_type -> type .

    ID              reduce using rule 35 (func_type -> type .)


state 26

    (13) var1 -> var_type dec_id . var2 SEMICOLON var4
    (14) var2 -> . COMA dec_id var3
    (15) var2 -> . empty
    (131) empty -> .

    COMA            shift and go to state 31
    SEMICOLON       reduce using rule 131 (empty -> .)

    var2                           shift and go to state 30
    empty                          shift and go to state 32

state 27

    (19) dec_id -> ID . dec_id1
    (20) dec_id1 -> . L_SB CTE_I R_SB dec_id2
    (21) dec_id1 -> . empty
    (131) empty -> .

    L_SB            shift and go to state 34
    COMA            reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    R_P             reduce using rule 131 (empty -> .)

    dec_id1                        shift and go to state 33
    empty                          shift and go to state 35

state 28

    (3) main -> MAIN L_P . params R_P var_declaration L_B main_start statements R_B
    (36) params -> . var_type param_type dec_id params1
    (37) params -> . empty
    (29) var_type -> . type
    (131) empty -> .
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    R_P             reduce using rule 131 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    params                         shift and go to state 36
    var_type                       shift and go to state 37
    empty                          shift and go to state 38
    type                           shift and go to state 16

state 29

    (30) function -> FUNC func_type ID . register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
    (31) register_func -> .

    L_P             reduce using rule 31 (register_func -> .)

    register_func                  shift and go to state 39

state 30

    (13) var1 -> var_type dec_id var2 . SEMICOLON var4

    SEMICOLON       shift and go to state 40


state 31

    (14) var2 -> COMA . dec_id var3
    (19) dec_id -> . ID dec_id1

    ID              shift and go to state 27

    dec_id                         shift and go to state 41

state 32

    (15) var2 -> empty .

    SEMICOLON       reduce using rule 15 (var2 -> empty .)


state 33

    (19) dec_id -> ID dec_id1 .

    COMA            reduce using rule 19 (dec_id -> ID dec_id1 .)
    SEMICOLON       reduce using rule 19 (dec_id -> ID dec_id1 .)
    R_P             reduce using rule 19 (dec_id -> ID dec_id1 .)


state 34

    (20) dec_id1 -> L_SB . CTE_I R_SB dec_id2

    CTE_I           shift and go to state 42


state 35

    (21) dec_id1 -> empty .

    COMA            reduce using rule 21 (dec_id1 -> empty .)
    SEMICOLON       reduce using rule 21 (dec_id1 -> empty .)
    R_P             reduce using rule 21 (dec_id1 -> empty .)


state 36

    (3) main -> MAIN L_P params . R_P var_declaration L_B main_start statements R_B

    R_P             shift and go to state 43


state 37

    (36) params -> var_type . param_type dec_id params1
    (38) param_type -> .

    ID              reduce using rule 38 (param_type -> .)

    param_type                     shift and go to state 44

state 38

    (37) params -> empty .

    R_P             reduce using rule 37 (params -> empty .)


state 39

    (30) function -> FUNC func_type ID register_func . L_P params R_P add_params var_declaration start_func L_B statements R_B

    L_P             shift and go to state 45


state 40

    (13) var1 -> var_type dec_id var2 SEMICOLON . var4
    (17) var4 -> . var1
    (18) var4 -> . empty
    (13) var1 -> . var_type dec_id var2 SEMICOLON var4
    (131) empty -> .
    (29) var_type -> . type
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    FUNC            reduce using rule 131 (empty -> .)
    MAIN            reduce using rule 131 (empty -> .)
    L_B             reduce using rule 131 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    var_type                       shift and go to state 15
    var4                           shift and go to state 46
    var1                           shift and go to state 47
    empty                          shift and go to state 48
    type                           shift and go to state 16

state 41

    (14) var2 -> COMA dec_id . var3
    (16) var3 -> . var2
    (14) var2 -> . COMA dec_id var3
    (15) var2 -> . empty
    (131) empty -> .

    COMA            shift and go to state 31
    SEMICOLON       reduce using rule 131 (empty -> .)

    var3                           shift and go to state 49
    var2                           shift and go to state 50
    empty                          shift and go to state 32

state 42

    (20) dec_id1 -> L_SB CTE_I . R_SB dec_id2

    R_SB            shift and go to state 51


state 43

    (3) main -> MAIN L_P params R_P . var_declaration L_B main_start statements R_B
    (11) var_declaration -> . VAR var1
    (12) var_declaration -> . empty
    (131) empty -> .

    VAR             shift and go to state 8
    L_B             reduce using rule 131 (empty -> .)

    var_declaration                shift and go to state 52
    empty                          shift and go to state 9

state 44

    (36) params -> var_type param_type . dec_id params1
    (19) dec_id -> . ID dec_id1

    ID              shift and go to state 27

    dec_id                         shift and go to state 53

state 45

    (30) function -> FUNC func_type ID register_func L_P . params R_P add_params var_declaration start_func L_B statements R_B
    (36) params -> . var_type param_type dec_id params1
    (37) params -> . empty
    (29) var_type -> . type
    (131) empty -> .
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    R_P             reduce using rule 131 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    params                         shift and go to state 54
    var_type                       shift and go to state 37
    empty                          shift and go to state 38
    type                           shift and go to state 16

state 46

    (13) var1 -> var_type dec_id var2 SEMICOLON var4 .

    FUNC            reduce using rule 13 (var1 -> var_type dec_id var2 SEMICOLON var4 .)
    MAIN            reduce using rule 13 (var1 -> var_type dec_id var2 SEMICOLON var4 .)
    L_B             reduce using rule 13 (var1 -> var_type dec_id var2 SEMICOLON var4 .)


state 47

    (17) var4 -> var1 .

    FUNC            reduce using rule 17 (var4 -> var1 .)
    MAIN            reduce using rule 17 (var4 -> var1 .)
    L_B             reduce using rule 17 (var4 -> var1 .)


state 48

    (18) var4 -> empty .

    FUNC            reduce using rule 18 (var4 -> empty .)
    MAIN            reduce using rule 18 (var4 -> empty .)
    L_B             reduce using rule 18 (var4 -> empty .)


state 49

    (14) var2 -> COMA dec_id var3 .

    SEMICOLON       reduce using rule 14 (var2 -> COMA dec_id var3 .)


state 50

    (16) var3 -> var2 .

    SEMICOLON       reduce using rule 16 (var3 -> var2 .)


state 51

    (20) dec_id1 -> L_SB CTE_I R_SB . dec_id2
    (22) dec_id2 -> . L_SB CTE_I R_SB
    (23) dec_id2 -> . empty
    (131) empty -> .

    L_SB            shift and go to state 55
    COMA            reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    R_P             reduce using rule 131 (empty -> .)

    dec_id2                        shift and go to state 56
    empty                          shift and go to state 57

state 52

    (3) main -> MAIN L_P params R_P var_declaration . L_B main_start statements R_B

    L_B             shift and go to state 58


state 53

    (36) params -> var_type param_type dec_id . params1
    (39) params1 -> . COMA params
    (40) params1 -> . empty
    (131) empty -> .

    COMA            shift and go to state 60
    R_P             reduce using rule 131 (empty -> .)

    params1                        shift and go to state 59
    empty                          shift and go to state 61

state 54

    (30) function -> FUNC func_type ID register_func L_P params . R_P add_params var_declaration start_func L_B statements R_B

    R_P             shift and go to state 62


state 55

    (22) dec_id2 -> L_SB . CTE_I R_SB

    CTE_I           shift and go to state 63


state 56

    (20) dec_id1 -> L_SB CTE_I R_SB dec_id2 .

    COMA            reduce using rule 20 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)
    SEMICOLON       reduce using rule 20 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)
    R_P             reduce using rule 20 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)


state 57

    (23) dec_id2 -> empty .

    COMA            reduce using rule 23 (dec_id2 -> empty .)
    SEMICOLON       reduce using rule 23 (dec_id2 -> empty .)
    R_P             reduce using rule 23 (dec_id2 -> empty .)


state 58

    (3) main -> MAIN L_P params R_P var_declaration L_B . main_start statements R_B
    (4) main_start -> .

    ID              reduce using rule 4 (main_start -> .)
    RETURN          reduce using rule 4 (main_start -> .)
    READ            reduce using rule 4 (main_start -> .)
    PRINT           reduce using rule 4 (main_start -> .)
    IF              reduce using rule 4 (main_start -> .)
    WHILE           reduce using rule 4 (main_start -> .)
    FOR             reduce using rule 4 (main_start -> .)
    L_P             reduce using rule 4 (main_start -> .)
    CTE_CHAR        reduce using rule 4 (main_start -> .)
    CTE_F           reduce using rule 4 (main_start -> .)
    CTE_I           reduce using rule 4 (main_start -> .)
    R_B             reduce using rule 4 (main_start -> .)

    main_start                     shift and go to state 64

state 59

    (36) params -> var_type param_type dec_id params1 .

    R_P             reduce using rule 36 (params -> var_type param_type dec_id params1 .)


state 60

    (39) params1 -> COMA . params
    (36) params -> . var_type param_type dec_id params1
    (37) params -> . empty
    (29) var_type -> . type
    (131) empty -> .
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    R_P             reduce using rule 131 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    params                         shift and go to state 65
    var_type                       shift and go to state 37
    empty                          shift and go to state 38
    type                           shift and go to state 16

state 61

    (40) params1 -> empty .

    R_P             reduce using rule 40 (params1 -> empty .)


state 62

    (30) function -> FUNC func_type ID register_func L_P params R_P . add_params var_declaration start_func L_B statements R_B
    (32) add_params -> .

    VAR             reduce using rule 32 (add_params -> .)
    L_B             reduce using rule 32 (add_params -> .)

    add_params                     shift and go to state 66

state 63

    (22) dec_id2 -> L_SB CTE_I . R_SB

    R_SB            shift and go to state 67


state 64

    (3) main -> MAIN L_P params R_P var_declaration L_B main_start . statements R_B
    (41) statements -> . statement statements
    (42) statements -> . empty
    (43) statement -> . assignation
    (44) statement -> . call_func
    (45) statement -> . return_func
    (46) statement -> . read
    (47) statement -> . write
    (48) statement -> . decision_statement
    (49) statement -> . repetition_statement
    (50) statement -> . expression
    (131) empty -> .
    (51) assignation -> . id id_quad EQUAL expression SEMICOLON
    (59) call_func -> . ID call_func_era L_P args R_P SEMICOLON
    (62) return_func -> . RETURN L_P expression R_P SEMICOLON
    (63) read -> . READ L_P read_args R_P SEMICOLON
    (67) write -> . PRINT L_P write_args R_P SEMICOLON
    (73) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (78) repetition_statement -> . while_statement
    (79) repetition_statement -> . for_statement
    (85) expression -> . texp generate_quad_1 op1
    (24) id -> . ID id1
    (83) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (80) for_statement -> . FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    R_B             reduce using rule 131 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 82
    READ            shift and go to state 83
    PRINT           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    L_P             shift and go to state 68
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    statements                     shift and go to state 69
    statement                      shift and go to state 70
    empty                          shift and go to state 71
    assignation                    shift and go to state 72
    call_func                      shift and go to state 73
    return_func                    shift and go to state 74
    read                           shift and go to state 75
    write                          shift and go to state 76
    decision_statement             shift and go to state 77
    repetition_statement           shift and go to state 78
    expression                     shift and go to state 79
    id                             shift and go to state 80
    while_statement                shift and go to state 86
    for_statement                  shift and go to state 87
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 65

    (39) params1 -> COMA params .

    R_P             reduce using rule 39 (params1 -> COMA params .)


state 66

    (30) function -> FUNC func_type ID register_func L_P params R_P add_params . var_declaration start_func L_B statements R_B
    (11) var_declaration -> . VAR var1
    (12) var_declaration -> . empty
    (131) empty -> .

    VAR             shift and go to state 8
    L_B             reduce using rule 131 (empty -> .)

    var_declaration                shift and go to state 100
    empty                          shift and go to state 9

state 67

    (22) dec_id2 -> L_SB CTE_I R_SB .

    COMA            reduce using rule 22 (dec_id2 -> L_SB CTE_I R_SB .)
    SEMICOLON       reduce using rule 22 (dec_id2 -> L_SB CTE_I R_SB .)
    R_P             reduce using rule 22 (dec_id2 -> L_SB CTE_I R_SB .)


state 68

    (97) fact -> L_P . add_fake expression R_P remove_fake
    (99) add_fake -> .

    L_P             reduce using rule 99 (add_fake -> .)
    ID              reduce using rule 99 (add_fake -> .)
    CTE_CHAR        reduce using rule 99 (add_fake -> .)
    CTE_F           reduce using rule 99 (add_fake -> .)
    CTE_I           reduce using rule 99 (add_fake -> .)

    add_fake                       shift and go to state 101

state 69

    (3) main -> MAIN L_P params R_P var_declaration L_B main_start statements . R_B

    R_B             shift and go to state 102


state 70

    (41) statements -> statement . statements
    (41) statements -> . statement statements
    (42) statements -> . empty
    (43) statement -> . assignation
    (44) statement -> . call_func
    (45) statement -> . return_func
    (46) statement -> . read
    (47) statement -> . write
    (48) statement -> . decision_statement
    (49) statement -> . repetition_statement
    (50) statement -> . expression
    (131) empty -> .
    (51) assignation -> . id id_quad EQUAL expression SEMICOLON
    (59) call_func -> . ID call_func_era L_P args R_P SEMICOLON
    (62) return_func -> . RETURN L_P expression R_P SEMICOLON
    (63) read -> . READ L_P read_args R_P SEMICOLON
    (67) write -> . PRINT L_P write_args R_P SEMICOLON
    (73) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (78) repetition_statement -> . while_statement
    (79) repetition_statement -> . for_statement
    (85) expression -> . texp generate_quad_1 op1
    (24) id -> . ID id1
    (83) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (80) for_statement -> . FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    R_B             reduce using rule 131 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 82
    READ            shift and go to state 83
    PRINT           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    L_P             shift and go to state 68
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    statement                      shift and go to state 70
    statements                     shift and go to state 103
    empty                          shift and go to state 71
    assignation                    shift and go to state 72
    call_func                      shift and go to state 73
    return_func                    shift and go to state 74
    read                           shift and go to state 75
    write                          shift and go to state 76
    decision_statement             shift and go to state 77
    repetition_statement           shift and go to state 78
    expression                     shift and go to state 79
    id                             shift and go to state 80
    while_statement                shift and go to state 86
    for_statement                  shift and go to state 87
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 71

    (42) statements -> empty .

    R_B             reduce using rule 42 (statements -> empty .)


state 72

    (43) statement -> assignation .

    ID              reduce using rule 43 (statement -> assignation .)
    RETURN          reduce using rule 43 (statement -> assignation .)
    READ            reduce using rule 43 (statement -> assignation .)
    PRINT           reduce using rule 43 (statement -> assignation .)
    IF              reduce using rule 43 (statement -> assignation .)
    WHILE           reduce using rule 43 (statement -> assignation .)
    FOR             reduce using rule 43 (statement -> assignation .)
    L_P             reduce using rule 43 (statement -> assignation .)
    CTE_CHAR        reduce using rule 43 (statement -> assignation .)
    CTE_F           reduce using rule 43 (statement -> assignation .)
    CTE_I           reduce using rule 43 (statement -> assignation .)
    R_B             reduce using rule 43 (statement -> assignation .)


state 73

    (44) statement -> call_func .

    ID              reduce using rule 44 (statement -> call_func .)
    RETURN          reduce using rule 44 (statement -> call_func .)
    READ            reduce using rule 44 (statement -> call_func .)
    PRINT           reduce using rule 44 (statement -> call_func .)
    IF              reduce using rule 44 (statement -> call_func .)
    WHILE           reduce using rule 44 (statement -> call_func .)
    FOR             reduce using rule 44 (statement -> call_func .)
    L_P             reduce using rule 44 (statement -> call_func .)
    CTE_CHAR        reduce using rule 44 (statement -> call_func .)
    CTE_F           reduce using rule 44 (statement -> call_func .)
    CTE_I           reduce using rule 44 (statement -> call_func .)
    R_B             reduce using rule 44 (statement -> call_func .)


state 74

    (45) statement -> return_func .

    ID              reduce using rule 45 (statement -> return_func .)
    RETURN          reduce using rule 45 (statement -> return_func .)
    READ            reduce using rule 45 (statement -> return_func .)
    PRINT           reduce using rule 45 (statement -> return_func .)
    IF              reduce using rule 45 (statement -> return_func .)
    WHILE           reduce using rule 45 (statement -> return_func .)
    FOR             reduce using rule 45 (statement -> return_func .)
    L_P             reduce using rule 45 (statement -> return_func .)
    CTE_CHAR        reduce using rule 45 (statement -> return_func .)
    CTE_F           reduce using rule 45 (statement -> return_func .)
    CTE_I           reduce using rule 45 (statement -> return_func .)
    R_B             reduce using rule 45 (statement -> return_func .)


state 75

    (46) statement -> read .

    ID              reduce using rule 46 (statement -> read .)
    RETURN          reduce using rule 46 (statement -> read .)
    READ            reduce using rule 46 (statement -> read .)
    PRINT           reduce using rule 46 (statement -> read .)
    IF              reduce using rule 46 (statement -> read .)
    WHILE           reduce using rule 46 (statement -> read .)
    FOR             reduce using rule 46 (statement -> read .)
    L_P             reduce using rule 46 (statement -> read .)
    CTE_CHAR        reduce using rule 46 (statement -> read .)
    CTE_F           reduce using rule 46 (statement -> read .)
    CTE_I           reduce using rule 46 (statement -> read .)
    R_B             reduce using rule 46 (statement -> read .)


state 76

    (47) statement -> write .

    ID              reduce using rule 47 (statement -> write .)
    RETURN          reduce using rule 47 (statement -> write .)
    READ            reduce using rule 47 (statement -> write .)
    PRINT           reduce using rule 47 (statement -> write .)
    IF              reduce using rule 47 (statement -> write .)
    WHILE           reduce using rule 47 (statement -> write .)
    FOR             reduce using rule 47 (statement -> write .)
    L_P             reduce using rule 47 (statement -> write .)
    CTE_CHAR        reduce using rule 47 (statement -> write .)
    CTE_F           reduce using rule 47 (statement -> write .)
    CTE_I           reduce using rule 47 (statement -> write .)
    R_B             reduce using rule 47 (statement -> write .)


state 77

    (48) statement -> decision_statement .

    ID              reduce using rule 48 (statement -> decision_statement .)
    RETURN          reduce using rule 48 (statement -> decision_statement .)
    READ            reduce using rule 48 (statement -> decision_statement .)
    PRINT           reduce using rule 48 (statement -> decision_statement .)
    IF              reduce using rule 48 (statement -> decision_statement .)
    WHILE           reduce using rule 48 (statement -> decision_statement .)
    FOR             reduce using rule 48 (statement -> decision_statement .)
    L_P             reduce using rule 48 (statement -> decision_statement .)
    CTE_CHAR        reduce using rule 48 (statement -> decision_statement .)
    CTE_F           reduce using rule 48 (statement -> decision_statement .)
    CTE_I           reduce using rule 48 (statement -> decision_statement .)
    R_B             reduce using rule 48 (statement -> decision_statement .)


state 78

    (49) statement -> repetition_statement .

    ID              reduce using rule 49 (statement -> repetition_statement .)
    RETURN          reduce using rule 49 (statement -> repetition_statement .)
    READ            reduce using rule 49 (statement -> repetition_statement .)
    PRINT           reduce using rule 49 (statement -> repetition_statement .)
    IF              reduce using rule 49 (statement -> repetition_statement .)
    WHILE           reduce using rule 49 (statement -> repetition_statement .)
    FOR             reduce using rule 49 (statement -> repetition_statement .)
    L_P             reduce using rule 49 (statement -> repetition_statement .)
    CTE_CHAR        reduce using rule 49 (statement -> repetition_statement .)
    CTE_F           reduce using rule 49 (statement -> repetition_statement .)
    CTE_I           reduce using rule 49 (statement -> repetition_statement .)
    R_B             reduce using rule 49 (statement -> repetition_statement .)


state 79

    (50) statement -> expression .

    ID              reduce using rule 50 (statement -> expression .)
    RETURN          reduce using rule 50 (statement -> expression .)
    READ            reduce using rule 50 (statement -> expression .)
    PRINT           reduce using rule 50 (statement -> expression .)
    IF              reduce using rule 50 (statement -> expression .)
    WHILE           reduce using rule 50 (statement -> expression .)
    FOR             reduce using rule 50 (statement -> expression .)
    L_P             reduce using rule 50 (statement -> expression .)
    CTE_CHAR        reduce using rule 50 (statement -> expression .)
    CTE_F           reduce using rule 50 (statement -> expression .)
    CTE_I           reduce using rule 50 (statement -> expression .)
    R_B             reduce using rule 50 (statement -> expression .)


state 80

    (51) assignation -> id . id_quad EQUAL expression SEMICOLON
    (95) fact -> id . id_quad
    (101) id_quad -> .

    EQUAL           reduce using rule 101 (id_quad -> .)
    MULT            reduce using rule 101 (id_quad -> .)
    DIV             reduce using rule 101 (id_quad -> .)
    MOD             reduce using rule 101 (id_quad -> .)
    PLUS            reduce using rule 101 (id_quad -> .)
    MINUS           reduce using rule 101 (id_quad -> .)
    LESSTHAN        reduce using rule 101 (id_quad -> .)
    LESSTHANEQ      reduce using rule 101 (id_quad -> .)
    GREATERTHAN     reduce using rule 101 (id_quad -> .)
    GREATERTHANEQ   reduce using rule 101 (id_quad -> .)
    EQ              reduce using rule 101 (id_quad -> .)
    DIFERENT        reduce using rule 101 (id_quad -> .)
    AND             reduce using rule 101 (id_quad -> .)
    OR              reduce using rule 101 (id_quad -> .)
    ID              reduce using rule 101 (id_quad -> .)
    RETURN          reduce using rule 101 (id_quad -> .)
    READ            reduce using rule 101 (id_quad -> .)
    PRINT           reduce using rule 101 (id_quad -> .)
    IF              reduce using rule 101 (id_quad -> .)
    WHILE           reduce using rule 101 (id_quad -> .)
    FOR             reduce using rule 101 (id_quad -> .)
    L_P             reduce using rule 101 (id_quad -> .)
    CTE_CHAR        reduce using rule 101 (id_quad -> .)
    CTE_F           reduce using rule 101 (id_quad -> .)
    CTE_I           reduce using rule 101 (id_quad -> .)
    R_B             reduce using rule 101 (id_quad -> .)

    id_quad                        shift and go to state 104

state 81

    (59) call_func -> ID . call_func_era L_P args R_P SEMICOLON
    (24) id -> ID . id1
    (60) call_func_exp -> ID . call_func_era L_P args R_P
    (61) call_func_era -> .
    (25) id1 -> . L_SB expression R_SB id2
    (26) id1 -> . empty
    (131) empty -> .

  ! reduce/reduce conflict for L_P resolved using rule 61 (call_func_era -> .)
    L_P             reduce using rule 61 (call_func_era -> .)
    L_SB            shift and go to state 107
    EQUAL           reduce using rule 131 (empty -> .)
    MULT            reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    MOD             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESSTHAN        reduce using rule 131 (empty -> .)
    LESSTHANEQ      reduce using rule 131 (empty -> .)
    GREATERTHAN     reduce using rule 131 (empty -> .)
    GREATERTHANEQ   reduce using rule 131 (empty -> .)
    EQ              reduce using rule 131 (empty -> .)
    DIFERENT        reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    CTE_CHAR        reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    R_B             reduce using rule 131 (empty -> .)

  ! L_P             [ reduce using rule 131 (empty -> .) ]

    call_func_era                  shift and go to state 105
    id1                            shift and go to state 106
    empty                          shift and go to state 108

state 82

    (62) return_func -> RETURN . L_P expression R_P SEMICOLON

    L_P             shift and go to state 109


state 83

    (63) read -> READ . L_P read_args R_P SEMICOLON

    L_P             shift and go to state 110


state 84

    (67) write -> PRINT . L_P write_args R_P SEMICOLON

    L_P             shift and go to state 111


state 85

    (73) decision_statement -> IF . L_P expression R_P exp_type L_B statements R_B decision_statement1

    L_P             shift and go to state 112


state 86

    (78) repetition_statement -> while_statement .

    ID              reduce using rule 78 (repetition_statement -> while_statement .)
    RETURN          reduce using rule 78 (repetition_statement -> while_statement .)
    READ            reduce using rule 78 (repetition_statement -> while_statement .)
    PRINT           reduce using rule 78 (repetition_statement -> while_statement .)
    IF              reduce using rule 78 (repetition_statement -> while_statement .)
    WHILE           reduce using rule 78 (repetition_statement -> while_statement .)
    FOR             reduce using rule 78 (repetition_statement -> while_statement .)
    L_P             reduce using rule 78 (repetition_statement -> while_statement .)
    CTE_CHAR        reduce using rule 78 (repetition_statement -> while_statement .)
    CTE_F           reduce using rule 78 (repetition_statement -> while_statement .)
    CTE_I           reduce using rule 78 (repetition_statement -> while_statement .)
    R_B             reduce using rule 78 (repetition_statement -> while_statement .)


state 87

    (79) repetition_statement -> for_statement .

    ID              reduce using rule 79 (repetition_statement -> for_statement .)
    RETURN          reduce using rule 79 (repetition_statement -> for_statement .)
    READ            reduce using rule 79 (repetition_statement -> for_statement .)
    PRINT           reduce using rule 79 (repetition_statement -> for_statement .)
    IF              reduce using rule 79 (repetition_statement -> for_statement .)
    WHILE           reduce using rule 79 (repetition_statement -> for_statement .)
    FOR             reduce using rule 79 (repetition_statement -> for_statement .)
    L_P             reduce using rule 79 (repetition_statement -> for_statement .)
    CTE_CHAR        reduce using rule 79 (repetition_statement -> for_statement .)
    CTE_F           reduce using rule 79 (repetition_statement -> for_statement .)
    CTE_I           reduce using rule 79 (repetition_statement -> for_statement .)
    R_B             reduce using rule 79 (repetition_statement -> for_statement .)


state 88

    (85) expression -> texp . generate_quad_1 op1
    (90) generate_quad_1 -> .

    OR              reduce using rule 90 (generate_quad_1 -> .)
    ID              reduce using rule 90 (generate_quad_1 -> .)
    RETURN          reduce using rule 90 (generate_quad_1 -> .)
    READ            reduce using rule 90 (generate_quad_1 -> .)
    PRINT           reduce using rule 90 (generate_quad_1 -> .)
    IF              reduce using rule 90 (generate_quad_1 -> .)
    WHILE           reduce using rule 90 (generate_quad_1 -> .)
    FOR             reduce using rule 90 (generate_quad_1 -> .)
    L_P             reduce using rule 90 (generate_quad_1 -> .)
    CTE_CHAR        reduce using rule 90 (generate_quad_1 -> .)
    CTE_F           reduce using rule 90 (generate_quad_1 -> .)
    CTE_I           reduce using rule 90 (generate_quad_1 -> .)
    R_B             reduce using rule 90 (generate_quad_1 -> .)
    R_P             reduce using rule 90 (generate_quad_1 -> .)
    R_SB            reduce using rule 90 (generate_quad_1 -> .)
    SEMICOLON       reduce using rule 90 (generate_quad_1 -> .)
    COMA            reduce using rule 90 (generate_quad_1 -> .)
    TO              reduce using rule 90 (generate_quad_1 -> .)
    DO              reduce using rule 90 (generate_quad_1 -> .)

    generate_quad_1                shift and go to state 113

state 89

    (83) while_statement -> WHILE . L_P breadcrumb expression R_P exp_type do_statement

    L_P             shift and go to state 114


state 90

    (80) for_statement -> FOR . id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (24) id -> . ID id1

    ID              shift and go to state 116

    id                             shift and go to state 115

state 91

    (86) texp -> gexp . generate_quad_2 op2
    (91) generate_quad_2 -> .

    AND             reduce using rule 91 (generate_quad_2 -> .)
    OR              reduce using rule 91 (generate_quad_2 -> .)
    ID              reduce using rule 91 (generate_quad_2 -> .)
    RETURN          reduce using rule 91 (generate_quad_2 -> .)
    READ            reduce using rule 91 (generate_quad_2 -> .)
    PRINT           reduce using rule 91 (generate_quad_2 -> .)
    IF              reduce using rule 91 (generate_quad_2 -> .)
    WHILE           reduce using rule 91 (generate_quad_2 -> .)
    FOR             reduce using rule 91 (generate_quad_2 -> .)
    L_P             reduce using rule 91 (generate_quad_2 -> .)
    CTE_CHAR        reduce using rule 91 (generate_quad_2 -> .)
    CTE_F           reduce using rule 91 (generate_quad_2 -> .)
    CTE_I           reduce using rule 91 (generate_quad_2 -> .)
    R_B             reduce using rule 91 (generate_quad_2 -> .)
    R_P             reduce using rule 91 (generate_quad_2 -> .)
    R_SB            reduce using rule 91 (generate_quad_2 -> .)
    SEMICOLON       reduce using rule 91 (generate_quad_2 -> .)
    COMA            reduce using rule 91 (generate_quad_2 -> .)
    TO              reduce using rule 91 (generate_quad_2 -> .)
    DO              reduce using rule 91 (generate_quad_2 -> .)

    generate_quad_2                shift and go to state 117

state 92

    (87) gexp -> mexp . generate_quad_3 op3aux
    (92) generate_quad_3 -> .

    LESSTHAN        reduce using rule 92 (generate_quad_3 -> .)
    LESSTHANEQ      reduce using rule 92 (generate_quad_3 -> .)
    GREATERTHAN     reduce using rule 92 (generate_quad_3 -> .)
    GREATERTHANEQ   reduce using rule 92 (generate_quad_3 -> .)
    EQ              reduce using rule 92 (generate_quad_3 -> .)
    DIFERENT        reduce using rule 92 (generate_quad_3 -> .)
    AND             reduce using rule 92 (generate_quad_3 -> .)
    OR              reduce using rule 92 (generate_quad_3 -> .)
    ID              reduce using rule 92 (generate_quad_3 -> .)
    RETURN          reduce using rule 92 (generate_quad_3 -> .)
    READ            reduce using rule 92 (generate_quad_3 -> .)
    PRINT           reduce using rule 92 (generate_quad_3 -> .)
    IF              reduce using rule 92 (generate_quad_3 -> .)
    WHILE           reduce using rule 92 (generate_quad_3 -> .)
    FOR             reduce using rule 92 (generate_quad_3 -> .)
    L_P             reduce using rule 92 (generate_quad_3 -> .)
    CTE_CHAR        reduce using rule 92 (generate_quad_3 -> .)
    CTE_F           reduce using rule 92 (generate_quad_3 -> .)
    CTE_I           reduce using rule 92 (generate_quad_3 -> .)
    R_B             reduce using rule 92 (generate_quad_3 -> .)
    R_P             reduce using rule 92 (generate_quad_3 -> .)
    R_SB            reduce using rule 92 (generate_quad_3 -> .)
    SEMICOLON       reduce using rule 92 (generate_quad_3 -> .)
    COMA            reduce using rule 92 (generate_quad_3 -> .)
    TO              reduce using rule 92 (generate_quad_3 -> .)
    DO              reduce using rule 92 (generate_quad_3 -> .)

    generate_quad_3                shift and go to state 118

state 93

    (88) mexp -> term . generate_quad_4 op4aux
    (93) generate_quad_4 -> .

    PLUS            reduce using rule 93 (generate_quad_4 -> .)
    MINUS           reduce using rule 93 (generate_quad_4 -> .)
    LESSTHAN        reduce using rule 93 (generate_quad_4 -> .)
    LESSTHANEQ      reduce using rule 93 (generate_quad_4 -> .)
    GREATERTHAN     reduce using rule 93 (generate_quad_4 -> .)
    GREATERTHANEQ   reduce using rule 93 (generate_quad_4 -> .)
    EQ              reduce using rule 93 (generate_quad_4 -> .)
    DIFERENT        reduce using rule 93 (generate_quad_4 -> .)
    AND             reduce using rule 93 (generate_quad_4 -> .)
    OR              reduce using rule 93 (generate_quad_4 -> .)
    ID              reduce using rule 93 (generate_quad_4 -> .)
    RETURN          reduce using rule 93 (generate_quad_4 -> .)
    READ            reduce using rule 93 (generate_quad_4 -> .)
    PRINT           reduce using rule 93 (generate_quad_4 -> .)
    IF              reduce using rule 93 (generate_quad_4 -> .)
    WHILE           reduce using rule 93 (generate_quad_4 -> .)
    FOR             reduce using rule 93 (generate_quad_4 -> .)
    L_P             reduce using rule 93 (generate_quad_4 -> .)
    CTE_CHAR        reduce using rule 93 (generate_quad_4 -> .)
    CTE_F           reduce using rule 93 (generate_quad_4 -> .)
    CTE_I           reduce using rule 93 (generate_quad_4 -> .)
    R_B             reduce using rule 93 (generate_quad_4 -> .)
    R_P             reduce using rule 93 (generate_quad_4 -> .)
    R_SB            reduce using rule 93 (generate_quad_4 -> .)
    SEMICOLON       reduce using rule 93 (generate_quad_4 -> .)
    COMA            reduce using rule 93 (generate_quad_4 -> .)
    TO              reduce using rule 93 (generate_quad_4 -> .)
    DO              reduce using rule 93 (generate_quad_4 -> .)

    generate_quad_4                shift and go to state 119

state 94

    (89) term -> fact . generate_quad_5 op5aux
    (94) generate_quad_5 -> .

    MULT            reduce using rule 94 (generate_quad_5 -> .)
    DIV             reduce using rule 94 (generate_quad_5 -> .)
    MOD             reduce using rule 94 (generate_quad_5 -> .)
    PLUS            reduce using rule 94 (generate_quad_5 -> .)
    MINUS           reduce using rule 94 (generate_quad_5 -> .)
    LESSTHAN        reduce using rule 94 (generate_quad_5 -> .)
    LESSTHANEQ      reduce using rule 94 (generate_quad_5 -> .)
    GREATERTHAN     reduce using rule 94 (generate_quad_5 -> .)
    GREATERTHANEQ   reduce using rule 94 (generate_quad_5 -> .)
    EQ              reduce using rule 94 (generate_quad_5 -> .)
    DIFERENT        reduce using rule 94 (generate_quad_5 -> .)
    AND             reduce using rule 94 (generate_quad_5 -> .)
    OR              reduce using rule 94 (generate_quad_5 -> .)
    ID              reduce using rule 94 (generate_quad_5 -> .)
    RETURN          reduce using rule 94 (generate_quad_5 -> .)
    READ            reduce using rule 94 (generate_quad_5 -> .)
    PRINT           reduce using rule 94 (generate_quad_5 -> .)
    IF              reduce using rule 94 (generate_quad_5 -> .)
    WHILE           reduce using rule 94 (generate_quad_5 -> .)
    FOR             reduce using rule 94 (generate_quad_5 -> .)
    L_P             reduce using rule 94 (generate_quad_5 -> .)
    CTE_CHAR        reduce using rule 94 (generate_quad_5 -> .)
    CTE_F           reduce using rule 94 (generate_quad_5 -> .)
    CTE_I           reduce using rule 94 (generate_quad_5 -> .)
    R_B             reduce using rule 94 (generate_quad_5 -> .)
    R_P             reduce using rule 94 (generate_quad_5 -> .)
    R_SB            reduce using rule 94 (generate_quad_5 -> .)
    SEMICOLON       reduce using rule 94 (generate_quad_5 -> .)
    COMA            reduce using rule 94 (generate_quad_5 -> .)
    TO              reduce using rule 94 (generate_quad_5 -> .)
    DO              reduce using rule 94 (generate_quad_5 -> .)

    generate_quad_5                shift and go to state 120

state 95

    (96) fact -> call_func_exp .

    MULT            reduce using rule 96 (fact -> call_func_exp .)
    DIV             reduce using rule 96 (fact -> call_func_exp .)
    MOD             reduce using rule 96 (fact -> call_func_exp .)
    PLUS            reduce using rule 96 (fact -> call_func_exp .)
    MINUS           reduce using rule 96 (fact -> call_func_exp .)
    LESSTHAN        reduce using rule 96 (fact -> call_func_exp .)
    LESSTHANEQ      reduce using rule 96 (fact -> call_func_exp .)
    GREATERTHAN     reduce using rule 96 (fact -> call_func_exp .)
    GREATERTHANEQ   reduce using rule 96 (fact -> call_func_exp .)
    EQ              reduce using rule 96 (fact -> call_func_exp .)
    DIFERENT        reduce using rule 96 (fact -> call_func_exp .)
    AND             reduce using rule 96 (fact -> call_func_exp .)
    OR              reduce using rule 96 (fact -> call_func_exp .)
    ID              reduce using rule 96 (fact -> call_func_exp .)
    RETURN          reduce using rule 96 (fact -> call_func_exp .)
    READ            reduce using rule 96 (fact -> call_func_exp .)
    PRINT           reduce using rule 96 (fact -> call_func_exp .)
    IF              reduce using rule 96 (fact -> call_func_exp .)
    WHILE           reduce using rule 96 (fact -> call_func_exp .)
    FOR             reduce using rule 96 (fact -> call_func_exp .)
    L_P             reduce using rule 96 (fact -> call_func_exp .)
    CTE_CHAR        reduce using rule 96 (fact -> call_func_exp .)
    CTE_F           reduce using rule 96 (fact -> call_func_exp .)
    CTE_I           reduce using rule 96 (fact -> call_func_exp .)
    R_B             reduce using rule 96 (fact -> call_func_exp .)
    R_P             reduce using rule 96 (fact -> call_func_exp .)
    R_SB            reduce using rule 96 (fact -> call_func_exp .)
    SEMICOLON       reduce using rule 96 (fact -> call_func_exp .)
    COMA            reduce using rule 96 (fact -> call_func_exp .)
    TO              reduce using rule 96 (fact -> call_func_exp .)
    DO              reduce using rule 96 (fact -> call_func_exp .)


state 96

    (98) fact -> cte .

    MULT            reduce using rule 98 (fact -> cte .)
    DIV             reduce using rule 98 (fact -> cte .)
    MOD             reduce using rule 98 (fact -> cte .)
    PLUS            reduce using rule 98 (fact -> cte .)
    MINUS           reduce using rule 98 (fact -> cte .)
    LESSTHAN        reduce using rule 98 (fact -> cte .)
    LESSTHANEQ      reduce using rule 98 (fact -> cte .)
    GREATERTHAN     reduce using rule 98 (fact -> cte .)
    GREATERTHANEQ   reduce using rule 98 (fact -> cte .)
    EQ              reduce using rule 98 (fact -> cte .)
    DIFERENT        reduce using rule 98 (fact -> cte .)
    AND             reduce using rule 98 (fact -> cte .)
    OR              reduce using rule 98 (fact -> cte .)
    ID              reduce using rule 98 (fact -> cte .)
    RETURN          reduce using rule 98 (fact -> cte .)
    READ            reduce using rule 98 (fact -> cte .)
    PRINT           reduce using rule 98 (fact -> cte .)
    IF              reduce using rule 98 (fact -> cte .)
    WHILE           reduce using rule 98 (fact -> cte .)
    FOR             reduce using rule 98 (fact -> cte .)
    L_P             reduce using rule 98 (fact -> cte .)
    CTE_CHAR        reduce using rule 98 (fact -> cte .)
    CTE_F           reduce using rule 98 (fact -> cte .)
    CTE_I           reduce using rule 98 (fact -> cte .)
    R_B             reduce using rule 98 (fact -> cte .)
    R_P             reduce using rule 98 (fact -> cte .)
    R_SB            reduce using rule 98 (fact -> cte .)
    SEMICOLON       reduce using rule 98 (fact -> cte .)
    COMA            reduce using rule 98 (fact -> cte .)
    TO              reduce using rule 98 (fact -> cte .)
    DO              reduce using rule 98 (fact -> cte .)


state 97

    (102) cte -> CTE_CHAR . add_cte_char
    (107) add_cte_char -> .

    MULT            reduce using rule 107 (add_cte_char -> .)
    DIV             reduce using rule 107 (add_cte_char -> .)
    MOD             reduce using rule 107 (add_cte_char -> .)
    PLUS            reduce using rule 107 (add_cte_char -> .)
    MINUS           reduce using rule 107 (add_cte_char -> .)
    LESSTHAN        reduce using rule 107 (add_cte_char -> .)
    LESSTHANEQ      reduce using rule 107 (add_cte_char -> .)
    GREATERTHAN     reduce using rule 107 (add_cte_char -> .)
    GREATERTHANEQ   reduce using rule 107 (add_cte_char -> .)
    EQ              reduce using rule 107 (add_cte_char -> .)
    DIFERENT        reduce using rule 107 (add_cte_char -> .)
    AND             reduce using rule 107 (add_cte_char -> .)
    OR              reduce using rule 107 (add_cte_char -> .)
    ID              reduce using rule 107 (add_cte_char -> .)
    RETURN          reduce using rule 107 (add_cte_char -> .)
    READ            reduce using rule 107 (add_cte_char -> .)
    PRINT           reduce using rule 107 (add_cte_char -> .)
    IF              reduce using rule 107 (add_cte_char -> .)
    WHILE           reduce using rule 107 (add_cte_char -> .)
    FOR             reduce using rule 107 (add_cte_char -> .)
    L_P             reduce using rule 107 (add_cte_char -> .)
    CTE_CHAR        reduce using rule 107 (add_cte_char -> .)
    CTE_F           reduce using rule 107 (add_cte_char -> .)
    CTE_I           reduce using rule 107 (add_cte_char -> .)
    R_B             reduce using rule 107 (add_cte_char -> .)
    R_P             reduce using rule 107 (add_cte_char -> .)
    R_SB            reduce using rule 107 (add_cte_char -> .)
    SEMICOLON       reduce using rule 107 (add_cte_char -> .)
    COMA            reduce using rule 107 (add_cte_char -> .)
    TO              reduce using rule 107 (add_cte_char -> .)
    DO              reduce using rule 107 (add_cte_char -> .)

    add_cte_char                   shift and go to state 121

state 98

    (103) cte -> CTE_F . add_cte_float
    (106) add_cte_float -> .

    MULT            reduce using rule 106 (add_cte_float -> .)
    DIV             reduce using rule 106 (add_cte_float -> .)
    MOD             reduce using rule 106 (add_cte_float -> .)
    PLUS            reduce using rule 106 (add_cte_float -> .)
    MINUS           reduce using rule 106 (add_cte_float -> .)
    LESSTHAN        reduce using rule 106 (add_cte_float -> .)
    LESSTHANEQ      reduce using rule 106 (add_cte_float -> .)
    GREATERTHAN     reduce using rule 106 (add_cte_float -> .)
    GREATERTHANEQ   reduce using rule 106 (add_cte_float -> .)
    EQ              reduce using rule 106 (add_cte_float -> .)
    DIFERENT        reduce using rule 106 (add_cte_float -> .)
    AND             reduce using rule 106 (add_cte_float -> .)
    OR              reduce using rule 106 (add_cte_float -> .)
    ID              reduce using rule 106 (add_cte_float -> .)
    RETURN          reduce using rule 106 (add_cte_float -> .)
    READ            reduce using rule 106 (add_cte_float -> .)
    PRINT           reduce using rule 106 (add_cte_float -> .)
    IF              reduce using rule 106 (add_cte_float -> .)
    WHILE           reduce using rule 106 (add_cte_float -> .)
    FOR             reduce using rule 106 (add_cte_float -> .)
    L_P             reduce using rule 106 (add_cte_float -> .)
    CTE_CHAR        reduce using rule 106 (add_cte_float -> .)
    CTE_F           reduce using rule 106 (add_cte_float -> .)
    CTE_I           reduce using rule 106 (add_cte_float -> .)
    R_B             reduce using rule 106 (add_cte_float -> .)
    R_P             reduce using rule 106 (add_cte_float -> .)
    R_SB            reduce using rule 106 (add_cte_float -> .)
    SEMICOLON       reduce using rule 106 (add_cte_float -> .)
    COMA            reduce using rule 106 (add_cte_float -> .)
    TO              reduce using rule 106 (add_cte_float -> .)
    DO              reduce using rule 106 (add_cte_float -> .)

    add_cte_float                  shift and go to state 122

state 99

    (104) cte -> CTE_I . add_cte_int
    (105) add_cte_int -> .

    MULT            reduce using rule 105 (add_cte_int -> .)
    DIV             reduce using rule 105 (add_cte_int -> .)
    MOD             reduce using rule 105 (add_cte_int -> .)
    PLUS            reduce using rule 105 (add_cte_int -> .)
    MINUS           reduce using rule 105 (add_cte_int -> .)
    LESSTHAN        reduce using rule 105 (add_cte_int -> .)
    LESSTHANEQ      reduce using rule 105 (add_cte_int -> .)
    GREATERTHAN     reduce using rule 105 (add_cte_int -> .)
    GREATERTHANEQ   reduce using rule 105 (add_cte_int -> .)
    EQ              reduce using rule 105 (add_cte_int -> .)
    DIFERENT        reduce using rule 105 (add_cte_int -> .)
    AND             reduce using rule 105 (add_cte_int -> .)
    OR              reduce using rule 105 (add_cte_int -> .)
    ID              reduce using rule 105 (add_cte_int -> .)
    RETURN          reduce using rule 105 (add_cte_int -> .)
    READ            reduce using rule 105 (add_cte_int -> .)
    PRINT           reduce using rule 105 (add_cte_int -> .)
    IF              reduce using rule 105 (add_cte_int -> .)
    WHILE           reduce using rule 105 (add_cte_int -> .)
    FOR             reduce using rule 105 (add_cte_int -> .)
    L_P             reduce using rule 105 (add_cte_int -> .)
    CTE_CHAR        reduce using rule 105 (add_cte_int -> .)
    CTE_F           reduce using rule 105 (add_cte_int -> .)
    CTE_I           reduce using rule 105 (add_cte_int -> .)
    R_B             reduce using rule 105 (add_cte_int -> .)
    R_P             reduce using rule 105 (add_cte_int -> .)
    R_SB            reduce using rule 105 (add_cte_int -> .)
    SEMICOLON       reduce using rule 105 (add_cte_int -> .)
    COMA            reduce using rule 105 (add_cte_int -> .)
    TO              reduce using rule 105 (add_cte_int -> .)
    DO              reduce using rule 105 (add_cte_int -> .)

    add_cte_int                    shift and go to state 123

state 100

    (30) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration . start_func L_B statements R_B
    (33) start_func -> .

    L_B             reduce using rule 33 (start_func -> .)

    start_func                     shift and go to state 124

state 101

    (97) fact -> L_P add_fake . expression R_P remove_fake
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    expression                     shift and go to state 125
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 102

    (3) main -> MAIN L_P params R_P var_declaration L_B main_start statements R_B .

    $end            reduce using rule 3 (main -> MAIN L_P params R_P var_declaration L_B main_start statements R_B .)


state 103

    (41) statements -> statement statements .

    R_B             reduce using rule 41 (statements -> statement statements .)


state 104

    (51) assignation -> id id_quad . EQUAL expression SEMICOLON
    (95) fact -> id id_quad .

    EQUAL           shift and go to state 128
    MULT            reduce using rule 95 (fact -> id id_quad .)
    DIV             reduce using rule 95 (fact -> id id_quad .)
    MOD             reduce using rule 95 (fact -> id id_quad .)
    PLUS            reduce using rule 95 (fact -> id id_quad .)
    MINUS           reduce using rule 95 (fact -> id id_quad .)
    LESSTHAN        reduce using rule 95 (fact -> id id_quad .)
    LESSTHANEQ      reduce using rule 95 (fact -> id id_quad .)
    GREATERTHAN     reduce using rule 95 (fact -> id id_quad .)
    GREATERTHANEQ   reduce using rule 95 (fact -> id id_quad .)
    EQ              reduce using rule 95 (fact -> id id_quad .)
    DIFERENT        reduce using rule 95 (fact -> id id_quad .)
    AND             reduce using rule 95 (fact -> id id_quad .)
    OR              reduce using rule 95 (fact -> id id_quad .)
    ID              reduce using rule 95 (fact -> id id_quad .)
    RETURN          reduce using rule 95 (fact -> id id_quad .)
    READ            reduce using rule 95 (fact -> id id_quad .)
    PRINT           reduce using rule 95 (fact -> id id_quad .)
    IF              reduce using rule 95 (fact -> id id_quad .)
    WHILE           reduce using rule 95 (fact -> id id_quad .)
    FOR             reduce using rule 95 (fact -> id id_quad .)
    L_P             reduce using rule 95 (fact -> id id_quad .)
    CTE_CHAR        reduce using rule 95 (fact -> id id_quad .)
    CTE_F           reduce using rule 95 (fact -> id id_quad .)
    CTE_I           reduce using rule 95 (fact -> id id_quad .)
    R_B             reduce using rule 95 (fact -> id id_quad .)


state 105

    (59) call_func -> ID call_func_era . L_P args R_P SEMICOLON
    (60) call_func_exp -> ID call_func_era . L_P args R_P

    L_P             shift and go to state 129


state 106

    (24) id -> ID id1 .

    EQUAL           reduce using rule 24 (id -> ID id1 .)
    MULT            reduce using rule 24 (id -> ID id1 .)
    DIV             reduce using rule 24 (id -> ID id1 .)
    MOD             reduce using rule 24 (id -> ID id1 .)
    PLUS            reduce using rule 24 (id -> ID id1 .)
    MINUS           reduce using rule 24 (id -> ID id1 .)
    LESSTHAN        reduce using rule 24 (id -> ID id1 .)
    LESSTHANEQ      reduce using rule 24 (id -> ID id1 .)
    GREATERTHAN     reduce using rule 24 (id -> ID id1 .)
    GREATERTHANEQ   reduce using rule 24 (id -> ID id1 .)
    EQ              reduce using rule 24 (id -> ID id1 .)
    DIFERENT        reduce using rule 24 (id -> ID id1 .)
    AND             reduce using rule 24 (id -> ID id1 .)
    OR              reduce using rule 24 (id -> ID id1 .)
    ID              reduce using rule 24 (id -> ID id1 .)
    RETURN          reduce using rule 24 (id -> ID id1 .)
    READ            reduce using rule 24 (id -> ID id1 .)
    PRINT           reduce using rule 24 (id -> ID id1 .)
    IF              reduce using rule 24 (id -> ID id1 .)
    WHILE           reduce using rule 24 (id -> ID id1 .)
    FOR             reduce using rule 24 (id -> ID id1 .)
    L_P             reduce using rule 24 (id -> ID id1 .)
    CTE_CHAR        reduce using rule 24 (id -> ID id1 .)
    CTE_F           reduce using rule 24 (id -> ID id1 .)
    CTE_I           reduce using rule 24 (id -> ID id1 .)
    R_B             reduce using rule 24 (id -> ID id1 .)
    R_P             reduce using rule 24 (id -> ID id1 .)
    R_SB            reduce using rule 24 (id -> ID id1 .)
    SEMICOLON       reduce using rule 24 (id -> ID id1 .)
    COMA            reduce using rule 24 (id -> ID id1 .)
    TO              reduce using rule 24 (id -> ID id1 .)
    DO              reduce using rule 24 (id -> ID id1 .)


state 107

    (25) id1 -> L_SB . expression R_SB id2
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    expression                     shift and go to state 130
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 108

    (26) id1 -> empty .

    EQUAL           reduce using rule 26 (id1 -> empty .)
    MULT            reduce using rule 26 (id1 -> empty .)
    DIV             reduce using rule 26 (id1 -> empty .)
    MOD             reduce using rule 26 (id1 -> empty .)
    PLUS            reduce using rule 26 (id1 -> empty .)
    MINUS           reduce using rule 26 (id1 -> empty .)
    LESSTHAN        reduce using rule 26 (id1 -> empty .)
    LESSTHANEQ      reduce using rule 26 (id1 -> empty .)
    GREATERTHAN     reduce using rule 26 (id1 -> empty .)
    GREATERTHANEQ   reduce using rule 26 (id1 -> empty .)
    EQ              reduce using rule 26 (id1 -> empty .)
    DIFERENT        reduce using rule 26 (id1 -> empty .)
    AND             reduce using rule 26 (id1 -> empty .)
    OR              reduce using rule 26 (id1 -> empty .)
    ID              reduce using rule 26 (id1 -> empty .)
    RETURN          reduce using rule 26 (id1 -> empty .)
    READ            reduce using rule 26 (id1 -> empty .)
    PRINT           reduce using rule 26 (id1 -> empty .)
    IF              reduce using rule 26 (id1 -> empty .)
    WHILE           reduce using rule 26 (id1 -> empty .)
    FOR             reduce using rule 26 (id1 -> empty .)
    L_P             reduce using rule 26 (id1 -> empty .)
    CTE_CHAR        reduce using rule 26 (id1 -> empty .)
    CTE_F           reduce using rule 26 (id1 -> empty .)
    CTE_I           reduce using rule 26 (id1 -> empty .)
    R_B             reduce using rule 26 (id1 -> empty .)
    R_P             reduce using rule 26 (id1 -> empty .)
    R_SB            reduce using rule 26 (id1 -> empty .)
    SEMICOLON       reduce using rule 26 (id1 -> empty .)
    COMA            reduce using rule 26 (id1 -> empty .)
    TO              reduce using rule 26 (id1 -> empty .)
    DO              reduce using rule 26 (id1 -> empty .)


state 109

    (62) return_func -> RETURN L_P . expression R_P SEMICOLON
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    expression                     shift and go to state 131
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 110

    (63) read -> READ L_P . read_args R_P SEMICOLON
    (64) read_args -> . add_fake expression remove_fake read_args1
    (99) add_fake -> .

    L_P             reduce using rule 99 (add_fake -> .)
    ID              reduce using rule 99 (add_fake -> .)
    CTE_CHAR        reduce using rule 99 (add_fake -> .)
    CTE_F           reduce using rule 99 (add_fake -> .)
    CTE_I           reduce using rule 99 (add_fake -> .)

    read_args                      shift and go to state 132
    add_fake                       shift and go to state 133

state 111

    (67) write -> PRINT L_P . write_args R_P SEMICOLON
    (68) write_args -> . write_args2 write_args1
    (71) write_args2 -> . add_fake expression remove_fake
    (72) write_args2 -> . CTE_STRING add_cte_string
    (99) add_fake -> .

    CTE_STRING      shift and go to state 137
    L_P             reduce using rule 99 (add_fake -> .)
    ID              reduce using rule 99 (add_fake -> .)
    CTE_CHAR        reduce using rule 99 (add_fake -> .)
    CTE_F           reduce using rule 99 (add_fake -> .)
    CTE_I           reduce using rule 99 (add_fake -> .)

    write_args                     shift and go to state 134
    write_args2                    shift and go to state 135
    add_fake                       shift and go to state 136

state 112

    (73) decision_statement -> IF L_P . expression R_P exp_type L_B statements R_B decision_statement1
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    expression                     shift and go to state 138
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 113

    (85) expression -> texp generate_quad_1 . op1
    (110) op1 -> . OR add_operator expression
    (111) op1 -> . empty
    (131) empty -> .

    OR              shift and go to state 140
    ID              reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    L_P             reduce using rule 131 (empty -> .)
    CTE_CHAR        reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    R_B             reduce using rule 131 (empty -> .)
    R_P             reduce using rule 131 (empty -> .)
    R_SB            reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    COMA            reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    DO              reduce using rule 131 (empty -> .)

    op1                            shift and go to state 139
    empty                          shift and go to state 141

state 114

    (83) while_statement -> WHILE L_P . breadcrumb expression R_P exp_type do_statement
    (82) breadcrumb -> .

    L_P             reduce using rule 82 (breadcrumb -> .)
    ID              reduce using rule 82 (breadcrumb -> .)
    CTE_CHAR        reduce using rule 82 (breadcrumb -> .)
    CTE_F           reduce using rule 82 (breadcrumb -> .)
    CTE_I           reduce using rule 82 (breadcrumb -> .)

    breadcrumb                     shift and go to state 142

state 115

    (80) for_statement -> FOR id . id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (101) id_quad -> .

    EQUAL           reduce using rule 101 (id_quad -> .)

    id_quad                        shift and go to state 143

state 116

    (24) id -> ID . id1
    (25) id1 -> . L_SB expression R_SB id2
    (26) id1 -> . empty
    (131) empty -> .

    L_SB            shift and go to state 107
    EQUAL           reduce using rule 131 (empty -> .)

    id1                            shift and go to state 106
    empty                          shift and go to state 108

state 117

    (86) texp -> gexp generate_quad_2 . op2
    (112) op2 -> . AND add_operator texp
    (113) op2 -> . empty
    (131) empty -> .

    AND             shift and go to state 145
    OR              reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    L_P             reduce using rule 131 (empty -> .)
    CTE_CHAR        reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    R_B             reduce using rule 131 (empty -> .)
    R_P             reduce using rule 131 (empty -> .)
    R_SB            reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    COMA            reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    DO              reduce using rule 131 (empty -> .)

    op2                            shift and go to state 144
    empty                          shift and go to state 146

state 118

    (87) gexp -> mexp generate_quad_3 . op3aux
    (120) op3aux -> . op3 mexp
    (121) op3aux -> . empty
    (114) op3 -> . LESSTHAN
    (115) op3 -> . LESSTHANEQ
    (116) op3 -> . GREATERTHAN
    (117) op3 -> . GREATERTHANEQ
    (118) op3 -> . EQ
    (119) op3 -> . DIFERENT
    (131) empty -> .

    LESSTHAN        shift and go to state 150
    LESSTHANEQ      shift and go to state 151
    GREATERTHAN     shift and go to state 152
    GREATERTHANEQ   shift and go to state 153
    EQ              shift and go to state 154
    DIFERENT        shift and go to state 155
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    L_P             reduce using rule 131 (empty -> .)
    CTE_CHAR        reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    R_B             reduce using rule 131 (empty -> .)
    R_P             reduce using rule 131 (empty -> .)
    R_SB            reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    COMA            reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    DO              reduce using rule 131 (empty -> .)

    op3aux                         shift and go to state 147
    op3                            shift and go to state 148
    empty                          shift and go to state 149

state 119

    (88) mexp -> term generate_quad_4 . op4aux
    (124) op4aux -> . op4 mexp
    (125) op4aux -> . empty
    (122) op4 -> . PLUS
    (123) op4 -> . MINUS
    (131) empty -> .

    PLUS            shift and go to state 159
    MINUS           shift and go to state 160
    LESSTHAN        reduce using rule 131 (empty -> .)
    LESSTHANEQ      reduce using rule 131 (empty -> .)
    GREATERTHAN     reduce using rule 131 (empty -> .)
    GREATERTHANEQ   reduce using rule 131 (empty -> .)
    EQ              reduce using rule 131 (empty -> .)
    DIFERENT        reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    L_P             reduce using rule 131 (empty -> .)
    CTE_CHAR        reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    R_B             reduce using rule 131 (empty -> .)
    R_P             reduce using rule 131 (empty -> .)
    R_SB            reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    COMA            reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    DO              reduce using rule 131 (empty -> .)

    op4aux                         shift and go to state 156
    op4                            shift and go to state 157
    empty                          shift and go to state 158

state 120

    (89) term -> fact generate_quad_5 . op5aux
    (129) op5aux -> . op5 term
    (130) op5aux -> . empty
    (126) op5 -> . MULT
    (127) op5 -> . DIV
    (128) op5 -> . MOD
    (131) empty -> .

    MULT            shift and go to state 164
    DIV             shift and go to state 165
    MOD             shift and go to state 166
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESSTHAN        reduce using rule 131 (empty -> .)
    LESSTHANEQ      reduce using rule 131 (empty -> .)
    GREATERTHAN     reduce using rule 131 (empty -> .)
    GREATERTHANEQ   reduce using rule 131 (empty -> .)
    EQ              reduce using rule 131 (empty -> .)
    DIFERENT        reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    L_P             reduce using rule 131 (empty -> .)
    CTE_CHAR        reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    R_B             reduce using rule 131 (empty -> .)
    R_P             reduce using rule 131 (empty -> .)
    R_SB            reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    COMA            reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    DO              reduce using rule 131 (empty -> .)

    op5aux                         shift and go to state 161
    op5                            shift and go to state 162
    empty                          shift and go to state 163

state 121

    (102) cte -> CTE_CHAR add_cte_char .

    MULT            reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    DIV             reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    MOD             reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    PLUS            reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    MINUS           reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    LESSTHAN        reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    LESSTHANEQ      reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    GREATERTHAN     reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    GREATERTHANEQ   reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    EQ              reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    DIFERENT        reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    AND             reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    OR              reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    ID              reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    RETURN          reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    READ            reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    PRINT           reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    IF              reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    WHILE           reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    FOR             reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    L_P             reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    CTE_CHAR        reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    CTE_F           reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    CTE_I           reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    R_B             reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    R_P             reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    R_SB            reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    SEMICOLON       reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    COMA            reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    TO              reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)
    DO              reduce using rule 102 (cte -> CTE_CHAR add_cte_char .)


state 122

    (103) cte -> CTE_F add_cte_float .

    MULT            reduce using rule 103 (cte -> CTE_F add_cte_float .)
    DIV             reduce using rule 103 (cte -> CTE_F add_cte_float .)
    MOD             reduce using rule 103 (cte -> CTE_F add_cte_float .)
    PLUS            reduce using rule 103 (cte -> CTE_F add_cte_float .)
    MINUS           reduce using rule 103 (cte -> CTE_F add_cte_float .)
    LESSTHAN        reduce using rule 103 (cte -> CTE_F add_cte_float .)
    LESSTHANEQ      reduce using rule 103 (cte -> CTE_F add_cte_float .)
    GREATERTHAN     reduce using rule 103 (cte -> CTE_F add_cte_float .)
    GREATERTHANEQ   reduce using rule 103 (cte -> CTE_F add_cte_float .)
    EQ              reduce using rule 103 (cte -> CTE_F add_cte_float .)
    DIFERENT        reduce using rule 103 (cte -> CTE_F add_cte_float .)
    AND             reduce using rule 103 (cte -> CTE_F add_cte_float .)
    OR              reduce using rule 103 (cte -> CTE_F add_cte_float .)
    ID              reduce using rule 103 (cte -> CTE_F add_cte_float .)
    RETURN          reduce using rule 103 (cte -> CTE_F add_cte_float .)
    READ            reduce using rule 103 (cte -> CTE_F add_cte_float .)
    PRINT           reduce using rule 103 (cte -> CTE_F add_cte_float .)
    IF              reduce using rule 103 (cte -> CTE_F add_cte_float .)
    WHILE           reduce using rule 103 (cte -> CTE_F add_cte_float .)
    FOR             reduce using rule 103 (cte -> CTE_F add_cte_float .)
    L_P             reduce using rule 103 (cte -> CTE_F add_cte_float .)
    CTE_CHAR        reduce using rule 103 (cte -> CTE_F add_cte_float .)
    CTE_F           reduce using rule 103 (cte -> CTE_F add_cte_float .)
    CTE_I           reduce using rule 103 (cte -> CTE_F add_cte_float .)
    R_B             reduce using rule 103 (cte -> CTE_F add_cte_float .)
    R_P             reduce using rule 103 (cte -> CTE_F add_cte_float .)
    R_SB            reduce using rule 103 (cte -> CTE_F add_cte_float .)
    SEMICOLON       reduce using rule 103 (cte -> CTE_F add_cte_float .)
    COMA            reduce using rule 103 (cte -> CTE_F add_cte_float .)
    TO              reduce using rule 103 (cte -> CTE_F add_cte_float .)
    DO              reduce using rule 103 (cte -> CTE_F add_cte_float .)


state 123

    (104) cte -> CTE_I add_cte_int .

    MULT            reduce using rule 104 (cte -> CTE_I add_cte_int .)
    DIV             reduce using rule 104 (cte -> CTE_I add_cte_int .)
    MOD             reduce using rule 104 (cte -> CTE_I add_cte_int .)
    PLUS            reduce using rule 104 (cte -> CTE_I add_cte_int .)
    MINUS           reduce using rule 104 (cte -> CTE_I add_cte_int .)
    LESSTHAN        reduce using rule 104 (cte -> CTE_I add_cte_int .)
    LESSTHANEQ      reduce using rule 104 (cte -> CTE_I add_cte_int .)
    GREATERTHAN     reduce using rule 104 (cte -> CTE_I add_cte_int .)
    GREATERTHANEQ   reduce using rule 104 (cte -> CTE_I add_cte_int .)
    EQ              reduce using rule 104 (cte -> CTE_I add_cte_int .)
    DIFERENT        reduce using rule 104 (cte -> CTE_I add_cte_int .)
    AND             reduce using rule 104 (cte -> CTE_I add_cte_int .)
    OR              reduce using rule 104 (cte -> CTE_I add_cte_int .)
    ID              reduce using rule 104 (cte -> CTE_I add_cte_int .)
    RETURN          reduce using rule 104 (cte -> CTE_I add_cte_int .)
    READ            reduce using rule 104 (cte -> CTE_I add_cte_int .)
    PRINT           reduce using rule 104 (cte -> CTE_I add_cte_int .)
    IF              reduce using rule 104 (cte -> CTE_I add_cte_int .)
    WHILE           reduce using rule 104 (cte -> CTE_I add_cte_int .)
    FOR             reduce using rule 104 (cte -> CTE_I add_cte_int .)
    L_P             reduce using rule 104 (cte -> CTE_I add_cte_int .)
    CTE_CHAR        reduce using rule 104 (cte -> CTE_I add_cte_int .)
    CTE_F           reduce using rule 104 (cte -> CTE_I add_cte_int .)
    CTE_I           reduce using rule 104 (cte -> CTE_I add_cte_int .)
    R_B             reduce using rule 104 (cte -> CTE_I add_cte_int .)
    R_P             reduce using rule 104 (cte -> CTE_I add_cte_int .)
    R_SB            reduce using rule 104 (cte -> CTE_I add_cte_int .)
    SEMICOLON       reduce using rule 104 (cte -> CTE_I add_cte_int .)
    COMA            reduce using rule 104 (cte -> CTE_I add_cte_int .)
    TO              reduce using rule 104 (cte -> CTE_I add_cte_int .)
    DO              reduce using rule 104 (cte -> CTE_I add_cte_int .)


state 124

    (30) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func . L_B statements R_B

    L_B             shift and go to state 167


state 125

    (97) fact -> L_P add_fake expression . R_P remove_fake

    R_P             shift and go to state 168


state 126

    (95) fact -> id . id_quad
    (101) id_quad -> .

    MULT            reduce using rule 101 (id_quad -> .)
    DIV             reduce using rule 101 (id_quad -> .)
    MOD             reduce using rule 101 (id_quad -> .)
    PLUS            reduce using rule 101 (id_quad -> .)
    MINUS           reduce using rule 101 (id_quad -> .)
    LESSTHAN        reduce using rule 101 (id_quad -> .)
    LESSTHANEQ      reduce using rule 101 (id_quad -> .)
    GREATERTHAN     reduce using rule 101 (id_quad -> .)
    GREATERTHANEQ   reduce using rule 101 (id_quad -> .)
    EQ              reduce using rule 101 (id_quad -> .)
    DIFERENT        reduce using rule 101 (id_quad -> .)
    AND             reduce using rule 101 (id_quad -> .)
    OR              reduce using rule 101 (id_quad -> .)
    R_P             reduce using rule 101 (id_quad -> .)
    R_SB            reduce using rule 101 (id_quad -> .)
    SEMICOLON       reduce using rule 101 (id_quad -> .)
    COMA            reduce using rule 101 (id_quad -> .)
    ID              reduce using rule 101 (id_quad -> .)
    RETURN          reduce using rule 101 (id_quad -> .)
    READ            reduce using rule 101 (id_quad -> .)
    PRINT           reduce using rule 101 (id_quad -> .)
    IF              reduce using rule 101 (id_quad -> .)
    WHILE           reduce using rule 101 (id_quad -> .)
    FOR             reduce using rule 101 (id_quad -> .)
    L_P             reduce using rule 101 (id_quad -> .)
    CTE_CHAR        reduce using rule 101 (id_quad -> .)
    CTE_F           reduce using rule 101 (id_quad -> .)
    CTE_I           reduce using rule 101 (id_quad -> .)
    R_B             reduce using rule 101 (id_quad -> .)
    TO              reduce using rule 101 (id_quad -> .)
    DO              reduce using rule 101 (id_quad -> .)

    id_quad                        shift and go to state 169

state 127

    (24) id -> ID . id1
    (60) call_func_exp -> ID . call_func_era L_P args R_P
    (25) id1 -> . L_SB expression R_SB id2
    (26) id1 -> . empty
    (61) call_func_era -> .
    (131) empty -> .

  ! reduce/reduce conflict for L_P resolved using rule 61 (call_func_era -> .)
    L_SB            shift and go to state 107
    L_P             reduce using rule 61 (call_func_era -> .)
    MULT            reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    MOD             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESSTHAN        reduce using rule 131 (empty -> .)
    LESSTHANEQ      reduce using rule 131 (empty -> .)
    GREATERTHAN     reduce using rule 131 (empty -> .)
    GREATERTHANEQ   reduce using rule 131 (empty -> .)
    EQ              reduce using rule 131 (empty -> .)
    DIFERENT        reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    R_P             reduce using rule 131 (empty -> .)
    R_SB            reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    COMA            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    CTE_CHAR        reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    R_B             reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    DO              reduce using rule 131 (empty -> .)

  ! L_P             [ reduce using rule 131 (empty -> .) ]

    id1                            shift and go to state 106
    call_func_era                  shift and go to state 170
    empty                          shift and go to state 108

state 128

    (51) assignation -> id id_quad EQUAL . expression SEMICOLON
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    id                             shift and go to state 126
    expression                     shift and go to state 171
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 129

    (59) call_func -> ID call_func_era L_P . args R_P SEMICOLON
    (60) call_func_exp -> ID call_func_era L_P . args R_P
    (52) args -> . args1
    (53) args -> . empty
    (54) args1 -> . add_fake expression param_check remove_fake args2
    (131) empty -> .
    (99) add_fake -> .

    R_P             reduce using rule 131 (empty -> .)
    L_P             reduce using rule 99 (add_fake -> .)
    ID              reduce using rule 99 (add_fake -> .)
    CTE_CHAR        reduce using rule 99 (add_fake -> .)
    CTE_F           reduce using rule 99 (add_fake -> .)
    CTE_I           reduce using rule 99 (add_fake -> .)

    args                           shift and go to state 172
    args1                          shift and go to state 173
    empty                          shift and go to state 174
    add_fake                       shift and go to state 175

state 130

    (25) id1 -> L_SB expression . R_SB id2

    R_SB            shift and go to state 176


state 131

    (62) return_func -> RETURN L_P expression . R_P SEMICOLON

    R_P             shift and go to state 177


state 132

    (63) read -> READ L_P read_args . R_P SEMICOLON

    R_P             shift and go to state 178


state 133

    (64) read_args -> add_fake . expression remove_fake read_args1
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    expression                     shift and go to state 179
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 134

    (67) write -> PRINT L_P write_args . R_P SEMICOLON

    R_P             shift and go to state 180


state 135

    (68) write_args -> write_args2 . write_args1
    (69) write_args1 -> . COMA write_args2 write_args1
    (70) write_args1 -> . empty
    (131) empty -> .

    COMA            shift and go to state 182
    R_P             reduce using rule 131 (empty -> .)

    write_args1                    shift and go to state 181
    empty                          shift and go to state 183

state 136

    (71) write_args2 -> add_fake . expression remove_fake
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    expression                     shift and go to state 184
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 137

    (72) write_args2 -> CTE_STRING . add_cte_string
    (108) add_cte_string -> .

    COMA            reduce using rule 108 (add_cte_string -> .)
    R_P             reduce using rule 108 (add_cte_string -> .)

    add_cte_string                 shift and go to state 185

state 138

    (73) decision_statement -> IF L_P expression . R_P exp_type L_B statements R_B decision_statement1

    R_P             shift and go to state 186


state 139

    (85) expression -> texp generate_quad_1 op1 .

    ID              reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    RETURN          reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    READ            reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    PRINT           reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    IF              reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    WHILE           reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    FOR             reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    L_P             reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    CTE_CHAR        reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    CTE_F           reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    CTE_I           reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    R_B             reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    R_P             reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    R_SB            reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    SEMICOLON       reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    COMA            reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    TO              reduce using rule 85 (expression -> texp generate_quad_1 op1 .)
    DO              reduce using rule 85 (expression -> texp generate_quad_1 op1 .)


state 140

    (110) op1 -> OR . add_operator expression
    (109) add_operator -> .

    L_P             reduce using rule 109 (add_operator -> .)
    ID              reduce using rule 109 (add_operator -> .)
    CTE_CHAR        reduce using rule 109 (add_operator -> .)
    CTE_F           reduce using rule 109 (add_operator -> .)
    CTE_I           reduce using rule 109 (add_operator -> .)

    add_operator                   shift and go to state 187

state 141

    (111) op1 -> empty .

    ID              reduce using rule 111 (op1 -> empty .)
    RETURN          reduce using rule 111 (op1 -> empty .)
    READ            reduce using rule 111 (op1 -> empty .)
    PRINT           reduce using rule 111 (op1 -> empty .)
    IF              reduce using rule 111 (op1 -> empty .)
    WHILE           reduce using rule 111 (op1 -> empty .)
    FOR             reduce using rule 111 (op1 -> empty .)
    L_P             reduce using rule 111 (op1 -> empty .)
    CTE_CHAR        reduce using rule 111 (op1 -> empty .)
    CTE_F           reduce using rule 111 (op1 -> empty .)
    CTE_I           reduce using rule 111 (op1 -> empty .)
    R_B             reduce using rule 111 (op1 -> empty .)
    R_P             reduce using rule 111 (op1 -> empty .)
    R_SB            reduce using rule 111 (op1 -> empty .)
    SEMICOLON       reduce using rule 111 (op1 -> empty .)
    COMA            reduce using rule 111 (op1 -> empty .)
    TO              reduce using rule 111 (op1 -> empty .)
    DO              reduce using rule 111 (op1 -> empty .)


state 142

    (83) while_statement -> WHILE L_P breadcrumb . expression R_P exp_type do_statement
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    expression                     shift and go to state 188
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 143

    (80) for_statement -> FOR id id_quad . EQUAL expression for_id TO breadcrumb expression exp_type do_statement

    EQUAL           shift and go to state 189


state 144

    (86) texp -> gexp generate_quad_2 op2 .

    OR              reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    ID              reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    RETURN          reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    READ            reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    PRINT           reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    IF              reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    WHILE           reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    FOR             reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    L_P             reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    CTE_CHAR        reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    CTE_F           reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    CTE_I           reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    R_B             reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    R_P             reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    R_SB            reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    SEMICOLON       reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    COMA            reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    TO              reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)
    DO              reduce using rule 86 (texp -> gexp generate_quad_2 op2 .)


state 145

    (112) op2 -> AND . add_operator texp
    (109) add_operator -> .

    L_P             reduce using rule 109 (add_operator -> .)
    ID              reduce using rule 109 (add_operator -> .)
    CTE_CHAR        reduce using rule 109 (add_operator -> .)
    CTE_F           reduce using rule 109 (add_operator -> .)
    CTE_I           reduce using rule 109 (add_operator -> .)

    add_operator                   shift and go to state 190

state 146

    (113) op2 -> empty .

    OR              reduce using rule 113 (op2 -> empty .)
    ID              reduce using rule 113 (op2 -> empty .)
    RETURN          reduce using rule 113 (op2 -> empty .)
    READ            reduce using rule 113 (op2 -> empty .)
    PRINT           reduce using rule 113 (op2 -> empty .)
    IF              reduce using rule 113 (op2 -> empty .)
    WHILE           reduce using rule 113 (op2 -> empty .)
    FOR             reduce using rule 113 (op2 -> empty .)
    L_P             reduce using rule 113 (op2 -> empty .)
    CTE_CHAR        reduce using rule 113 (op2 -> empty .)
    CTE_F           reduce using rule 113 (op2 -> empty .)
    CTE_I           reduce using rule 113 (op2 -> empty .)
    R_B             reduce using rule 113 (op2 -> empty .)
    R_P             reduce using rule 113 (op2 -> empty .)
    R_SB            reduce using rule 113 (op2 -> empty .)
    SEMICOLON       reduce using rule 113 (op2 -> empty .)
    COMA            reduce using rule 113 (op2 -> empty .)
    TO              reduce using rule 113 (op2 -> empty .)
    DO              reduce using rule 113 (op2 -> empty .)


state 147

    (87) gexp -> mexp generate_quad_3 op3aux .

    AND             reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    OR              reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    ID              reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    RETURN          reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    READ            reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    PRINT           reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    IF              reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    WHILE           reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    FOR             reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    L_P             reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    CTE_CHAR        reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    CTE_F           reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    CTE_I           reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    R_B             reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    R_P             reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    R_SB            reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    SEMICOLON       reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    COMA            reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    TO              reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)
    DO              reduce using rule 87 (gexp -> mexp generate_quad_3 op3aux .)


state 148

    (120) op3aux -> op3 . mexp
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    mexp                           shift and go to state 191
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 149

    (121) op3aux -> empty .

    AND             reduce using rule 121 (op3aux -> empty .)
    OR              reduce using rule 121 (op3aux -> empty .)
    ID              reduce using rule 121 (op3aux -> empty .)
    RETURN          reduce using rule 121 (op3aux -> empty .)
    READ            reduce using rule 121 (op3aux -> empty .)
    PRINT           reduce using rule 121 (op3aux -> empty .)
    IF              reduce using rule 121 (op3aux -> empty .)
    WHILE           reduce using rule 121 (op3aux -> empty .)
    FOR             reduce using rule 121 (op3aux -> empty .)
    L_P             reduce using rule 121 (op3aux -> empty .)
    CTE_CHAR        reduce using rule 121 (op3aux -> empty .)
    CTE_F           reduce using rule 121 (op3aux -> empty .)
    CTE_I           reduce using rule 121 (op3aux -> empty .)
    R_B             reduce using rule 121 (op3aux -> empty .)
    R_P             reduce using rule 121 (op3aux -> empty .)
    R_SB            reduce using rule 121 (op3aux -> empty .)
    SEMICOLON       reduce using rule 121 (op3aux -> empty .)
    COMA            reduce using rule 121 (op3aux -> empty .)
    TO              reduce using rule 121 (op3aux -> empty .)
    DO              reduce using rule 121 (op3aux -> empty .)


state 150

    (114) op3 -> LESSTHAN .

    L_P             reduce using rule 114 (op3 -> LESSTHAN .)
    ID              reduce using rule 114 (op3 -> LESSTHAN .)
    CTE_CHAR        reduce using rule 114 (op3 -> LESSTHAN .)
    CTE_F           reduce using rule 114 (op3 -> LESSTHAN .)
    CTE_I           reduce using rule 114 (op3 -> LESSTHAN .)


state 151

    (115) op3 -> LESSTHANEQ .

    L_P             reduce using rule 115 (op3 -> LESSTHANEQ .)
    ID              reduce using rule 115 (op3 -> LESSTHANEQ .)
    CTE_CHAR        reduce using rule 115 (op3 -> LESSTHANEQ .)
    CTE_F           reduce using rule 115 (op3 -> LESSTHANEQ .)
    CTE_I           reduce using rule 115 (op3 -> LESSTHANEQ .)


state 152

    (116) op3 -> GREATERTHAN .

    L_P             reduce using rule 116 (op3 -> GREATERTHAN .)
    ID              reduce using rule 116 (op3 -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 116 (op3 -> GREATERTHAN .)
    CTE_F           reduce using rule 116 (op3 -> GREATERTHAN .)
    CTE_I           reduce using rule 116 (op3 -> GREATERTHAN .)


state 153

    (117) op3 -> GREATERTHANEQ .

    L_P             reduce using rule 117 (op3 -> GREATERTHANEQ .)
    ID              reduce using rule 117 (op3 -> GREATERTHANEQ .)
    CTE_CHAR        reduce using rule 117 (op3 -> GREATERTHANEQ .)
    CTE_F           reduce using rule 117 (op3 -> GREATERTHANEQ .)
    CTE_I           reduce using rule 117 (op3 -> GREATERTHANEQ .)


state 154

    (118) op3 -> EQ .

    L_P             reduce using rule 118 (op3 -> EQ .)
    ID              reduce using rule 118 (op3 -> EQ .)
    CTE_CHAR        reduce using rule 118 (op3 -> EQ .)
    CTE_F           reduce using rule 118 (op3 -> EQ .)
    CTE_I           reduce using rule 118 (op3 -> EQ .)


state 155

    (119) op3 -> DIFERENT .

    L_P             reduce using rule 119 (op3 -> DIFERENT .)
    ID              reduce using rule 119 (op3 -> DIFERENT .)
    CTE_CHAR        reduce using rule 119 (op3 -> DIFERENT .)
    CTE_F           reduce using rule 119 (op3 -> DIFERENT .)
    CTE_I           reduce using rule 119 (op3 -> DIFERENT .)


state 156

    (88) mexp -> term generate_quad_4 op4aux .

    LESSTHAN        reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    LESSTHANEQ      reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    GREATERTHAN     reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    GREATERTHANEQ   reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    EQ              reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    DIFERENT        reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    AND             reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    OR              reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    ID              reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    RETURN          reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    READ            reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    PRINT           reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    IF              reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    WHILE           reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    FOR             reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    L_P             reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    CTE_CHAR        reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    CTE_F           reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    CTE_I           reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    R_B             reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    R_P             reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    R_SB            reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    SEMICOLON       reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    COMA            reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    TO              reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)
    DO              reduce using rule 88 (mexp -> term generate_quad_4 op4aux .)


state 157

    (124) op4aux -> op4 . mexp
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    mexp                           shift and go to state 192
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 158

    (125) op4aux -> empty .

    LESSTHAN        reduce using rule 125 (op4aux -> empty .)
    LESSTHANEQ      reduce using rule 125 (op4aux -> empty .)
    GREATERTHAN     reduce using rule 125 (op4aux -> empty .)
    GREATERTHANEQ   reduce using rule 125 (op4aux -> empty .)
    EQ              reduce using rule 125 (op4aux -> empty .)
    DIFERENT        reduce using rule 125 (op4aux -> empty .)
    AND             reduce using rule 125 (op4aux -> empty .)
    OR              reduce using rule 125 (op4aux -> empty .)
    ID              reduce using rule 125 (op4aux -> empty .)
    RETURN          reduce using rule 125 (op4aux -> empty .)
    READ            reduce using rule 125 (op4aux -> empty .)
    PRINT           reduce using rule 125 (op4aux -> empty .)
    IF              reduce using rule 125 (op4aux -> empty .)
    WHILE           reduce using rule 125 (op4aux -> empty .)
    FOR             reduce using rule 125 (op4aux -> empty .)
    L_P             reduce using rule 125 (op4aux -> empty .)
    CTE_CHAR        reduce using rule 125 (op4aux -> empty .)
    CTE_F           reduce using rule 125 (op4aux -> empty .)
    CTE_I           reduce using rule 125 (op4aux -> empty .)
    R_B             reduce using rule 125 (op4aux -> empty .)
    R_P             reduce using rule 125 (op4aux -> empty .)
    R_SB            reduce using rule 125 (op4aux -> empty .)
    SEMICOLON       reduce using rule 125 (op4aux -> empty .)
    COMA            reduce using rule 125 (op4aux -> empty .)
    TO              reduce using rule 125 (op4aux -> empty .)
    DO              reduce using rule 125 (op4aux -> empty .)


state 159

    (122) op4 -> PLUS .

    L_P             reduce using rule 122 (op4 -> PLUS .)
    ID              reduce using rule 122 (op4 -> PLUS .)
    CTE_CHAR        reduce using rule 122 (op4 -> PLUS .)
    CTE_F           reduce using rule 122 (op4 -> PLUS .)
    CTE_I           reduce using rule 122 (op4 -> PLUS .)


state 160

    (123) op4 -> MINUS .

    L_P             reduce using rule 123 (op4 -> MINUS .)
    ID              reduce using rule 123 (op4 -> MINUS .)
    CTE_CHAR        reduce using rule 123 (op4 -> MINUS .)
    CTE_F           reduce using rule 123 (op4 -> MINUS .)
    CTE_I           reduce using rule 123 (op4 -> MINUS .)


state 161

    (89) term -> fact generate_quad_5 op5aux .

    PLUS            reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    MINUS           reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    LESSTHAN        reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    LESSTHANEQ      reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    GREATERTHAN     reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    GREATERTHANEQ   reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    EQ              reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    DIFERENT        reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    AND             reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    OR              reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    ID              reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    RETURN          reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    READ            reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    PRINT           reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    IF              reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    WHILE           reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    FOR             reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    L_P             reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    CTE_CHAR        reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    CTE_F           reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    CTE_I           reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    R_B             reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    R_P             reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    R_SB            reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    SEMICOLON       reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    COMA            reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    TO              reduce using rule 89 (term -> fact generate_quad_5 op5aux .)
    DO              reduce using rule 89 (term -> fact generate_quad_5 op5aux .)


state 162

    (129) op5aux -> op5 . term
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    term                           shift and go to state 193
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 163

    (130) op5aux -> empty .

    PLUS            reduce using rule 130 (op5aux -> empty .)
    MINUS           reduce using rule 130 (op5aux -> empty .)
    LESSTHAN        reduce using rule 130 (op5aux -> empty .)
    LESSTHANEQ      reduce using rule 130 (op5aux -> empty .)
    GREATERTHAN     reduce using rule 130 (op5aux -> empty .)
    GREATERTHANEQ   reduce using rule 130 (op5aux -> empty .)
    EQ              reduce using rule 130 (op5aux -> empty .)
    DIFERENT        reduce using rule 130 (op5aux -> empty .)
    AND             reduce using rule 130 (op5aux -> empty .)
    OR              reduce using rule 130 (op5aux -> empty .)
    ID              reduce using rule 130 (op5aux -> empty .)
    RETURN          reduce using rule 130 (op5aux -> empty .)
    READ            reduce using rule 130 (op5aux -> empty .)
    PRINT           reduce using rule 130 (op5aux -> empty .)
    IF              reduce using rule 130 (op5aux -> empty .)
    WHILE           reduce using rule 130 (op5aux -> empty .)
    FOR             reduce using rule 130 (op5aux -> empty .)
    L_P             reduce using rule 130 (op5aux -> empty .)
    CTE_CHAR        reduce using rule 130 (op5aux -> empty .)
    CTE_F           reduce using rule 130 (op5aux -> empty .)
    CTE_I           reduce using rule 130 (op5aux -> empty .)
    R_B             reduce using rule 130 (op5aux -> empty .)
    R_P             reduce using rule 130 (op5aux -> empty .)
    R_SB            reduce using rule 130 (op5aux -> empty .)
    SEMICOLON       reduce using rule 130 (op5aux -> empty .)
    COMA            reduce using rule 130 (op5aux -> empty .)
    TO              reduce using rule 130 (op5aux -> empty .)
    DO              reduce using rule 130 (op5aux -> empty .)


state 164

    (126) op5 -> MULT .

    L_P             reduce using rule 126 (op5 -> MULT .)
    ID              reduce using rule 126 (op5 -> MULT .)
    CTE_CHAR        reduce using rule 126 (op5 -> MULT .)
    CTE_F           reduce using rule 126 (op5 -> MULT .)
    CTE_I           reduce using rule 126 (op5 -> MULT .)


state 165

    (127) op5 -> DIV .

    L_P             reduce using rule 127 (op5 -> DIV .)
    ID              reduce using rule 127 (op5 -> DIV .)
    CTE_CHAR        reduce using rule 127 (op5 -> DIV .)
    CTE_F           reduce using rule 127 (op5 -> DIV .)
    CTE_I           reduce using rule 127 (op5 -> DIV .)


state 166

    (128) op5 -> MOD .

    L_P             reduce using rule 128 (op5 -> MOD .)
    ID              reduce using rule 128 (op5 -> MOD .)
    CTE_CHAR        reduce using rule 128 (op5 -> MOD .)
    CTE_F           reduce using rule 128 (op5 -> MOD .)
    CTE_I           reduce using rule 128 (op5 -> MOD .)


state 167

    (30) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B . statements R_B
    (41) statements -> . statement statements
    (42) statements -> . empty
    (43) statement -> . assignation
    (44) statement -> . call_func
    (45) statement -> . return_func
    (46) statement -> . read
    (47) statement -> . write
    (48) statement -> . decision_statement
    (49) statement -> . repetition_statement
    (50) statement -> . expression
    (131) empty -> .
    (51) assignation -> . id id_quad EQUAL expression SEMICOLON
    (59) call_func -> . ID call_func_era L_P args R_P SEMICOLON
    (62) return_func -> . RETURN L_P expression R_P SEMICOLON
    (63) read -> . READ L_P read_args R_P SEMICOLON
    (67) write -> . PRINT L_P write_args R_P SEMICOLON
    (73) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (78) repetition_statement -> . while_statement
    (79) repetition_statement -> . for_statement
    (85) expression -> . texp generate_quad_1 op1
    (24) id -> . ID id1
    (83) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (80) for_statement -> . FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    R_B             reduce using rule 131 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 82
    READ            shift and go to state 83
    PRINT           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    L_P             shift and go to state 68
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    statements                     shift and go to state 194
    statement                      shift and go to state 70
    empty                          shift and go to state 71
    assignation                    shift and go to state 72
    call_func                      shift and go to state 73
    return_func                    shift and go to state 74
    read                           shift and go to state 75
    write                          shift and go to state 76
    decision_statement             shift and go to state 77
    repetition_statement           shift and go to state 78
    expression                     shift and go to state 79
    id                             shift and go to state 80
    while_statement                shift and go to state 86
    for_statement                  shift and go to state 87
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 168

    (97) fact -> L_P add_fake expression R_P . remove_fake
    (100) remove_fake -> .

    MULT            reduce using rule 100 (remove_fake -> .)
    DIV             reduce using rule 100 (remove_fake -> .)
    MOD             reduce using rule 100 (remove_fake -> .)
    PLUS            reduce using rule 100 (remove_fake -> .)
    MINUS           reduce using rule 100 (remove_fake -> .)
    LESSTHAN        reduce using rule 100 (remove_fake -> .)
    LESSTHANEQ      reduce using rule 100 (remove_fake -> .)
    GREATERTHAN     reduce using rule 100 (remove_fake -> .)
    GREATERTHANEQ   reduce using rule 100 (remove_fake -> .)
    EQ              reduce using rule 100 (remove_fake -> .)
    DIFERENT        reduce using rule 100 (remove_fake -> .)
    AND             reduce using rule 100 (remove_fake -> .)
    OR              reduce using rule 100 (remove_fake -> .)
    ID              reduce using rule 100 (remove_fake -> .)
    RETURN          reduce using rule 100 (remove_fake -> .)
    READ            reduce using rule 100 (remove_fake -> .)
    PRINT           reduce using rule 100 (remove_fake -> .)
    IF              reduce using rule 100 (remove_fake -> .)
    WHILE           reduce using rule 100 (remove_fake -> .)
    FOR             reduce using rule 100 (remove_fake -> .)
    L_P             reduce using rule 100 (remove_fake -> .)
    CTE_CHAR        reduce using rule 100 (remove_fake -> .)
    CTE_F           reduce using rule 100 (remove_fake -> .)
    CTE_I           reduce using rule 100 (remove_fake -> .)
    R_B             reduce using rule 100 (remove_fake -> .)
    R_P             reduce using rule 100 (remove_fake -> .)
    R_SB            reduce using rule 100 (remove_fake -> .)
    SEMICOLON       reduce using rule 100 (remove_fake -> .)
    COMA            reduce using rule 100 (remove_fake -> .)
    TO              reduce using rule 100 (remove_fake -> .)
    DO              reduce using rule 100 (remove_fake -> .)

    remove_fake                    shift and go to state 195

state 169

    (95) fact -> id id_quad .

    MULT            reduce using rule 95 (fact -> id id_quad .)
    DIV             reduce using rule 95 (fact -> id id_quad .)
    MOD             reduce using rule 95 (fact -> id id_quad .)
    PLUS            reduce using rule 95 (fact -> id id_quad .)
    MINUS           reduce using rule 95 (fact -> id id_quad .)
    LESSTHAN        reduce using rule 95 (fact -> id id_quad .)
    LESSTHANEQ      reduce using rule 95 (fact -> id id_quad .)
    GREATERTHAN     reduce using rule 95 (fact -> id id_quad .)
    GREATERTHANEQ   reduce using rule 95 (fact -> id id_quad .)
    EQ              reduce using rule 95 (fact -> id id_quad .)
    DIFERENT        reduce using rule 95 (fact -> id id_quad .)
    AND             reduce using rule 95 (fact -> id id_quad .)
    OR              reduce using rule 95 (fact -> id id_quad .)
    R_P             reduce using rule 95 (fact -> id id_quad .)
    R_SB            reduce using rule 95 (fact -> id id_quad .)
    SEMICOLON       reduce using rule 95 (fact -> id id_quad .)
    COMA            reduce using rule 95 (fact -> id id_quad .)
    ID              reduce using rule 95 (fact -> id id_quad .)
    RETURN          reduce using rule 95 (fact -> id id_quad .)
    READ            reduce using rule 95 (fact -> id id_quad .)
    PRINT           reduce using rule 95 (fact -> id id_quad .)
    IF              reduce using rule 95 (fact -> id id_quad .)
    WHILE           reduce using rule 95 (fact -> id id_quad .)
    FOR             reduce using rule 95 (fact -> id id_quad .)
    L_P             reduce using rule 95 (fact -> id id_quad .)
    CTE_CHAR        reduce using rule 95 (fact -> id id_quad .)
    CTE_F           reduce using rule 95 (fact -> id id_quad .)
    CTE_I           reduce using rule 95 (fact -> id id_quad .)
    R_B             reduce using rule 95 (fact -> id id_quad .)
    TO              reduce using rule 95 (fact -> id id_quad .)
    DO              reduce using rule 95 (fact -> id id_quad .)


state 170

    (60) call_func_exp -> ID call_func_era . L_P args R_P

    L_P             shift and go to state 196


state 171

    (51) assignation -> id id_quad EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 197


state 172

    (59) call_func -> ID call_func_era L_P args . R_P SEMICOLON
    (60) call_func_exp -> ID call_func_era L_P args . R_P

    R_P             shift and go to state 198


state 173

    (52) args -> args1 .

    R_P             reduce using rule 52 (args -> args1 .)


state 174

    (53) args -> empty .

    R_P             reduce using rule 53 (args -> empty .)


state 175

    (54) args1 -> add_fake . expression param_check remove_fake args2
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    expression                     shift and go to state 199
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 176

    (25) id1 -> L_SB expression R_SB . id2
    (27) id2 -> . L_SB expression R_SB
    (28) id2 -> . empty
    (131) empty -> .

    L_SB            shift and go to state 200
    EQUAL           reduce using rule 131 (empty -> .)
    MULT            reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    MOD             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    LESSTHAN        reduce using rule 131 (empty -> .)
    LESSTHANEQ      reduce using rule 131 (empty -> .)
    GREATERTHAN     reduce using rule 131 (empty -> .)
    GREATERTHANEQ   reduce using rule 131 (empty -> .)
    EQ              reduce using rule 131 (empty -> .)
    DIFERENT        reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    L_P             reduce using rule 131 (empty -> .)
    CTE_CHAR        reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    R_B             reduce using rule 131 (empty -> .)
    R_P             reduce using rule 131 (empty -> .)
    R_SB            reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    COMA            reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    DO              reduce using rule 131 (empty -> .)

    id2                            shift and go to state 201
    empty                          shift and go to state 202

state 177

    (62) return_func -> RETURN L_P expression R_P . SEMICOLON

    SEMICOLON       shift and go to state 203


state 178

    (63) read -> READ L_P read_args R_P . SEMICOLON

    SEMICOLON       shift and go to state 204


state 179

    (64) read_args -> add_fake expression . remove_fake read_args1
    (100) remove_fake -> .

    COMA            reduce using rule 100 (remove_fake -> .)
    R_P             reduce using rule 100 (remove_fake -> .)

    remove_fake                    shift and go to state 205

state 180

    (67) write -> PRINT L_P write_args R_P . SEMICOLON

    SEMICOLON       shift and go to state 206


state 181

    (68) write_args -> write_args2 write_args1 .

    R_P             reduce using rule 68 (write_args -> write_args2 write_args1 .)


state 182

    (69) write_args1 -> COMA . write_args2 write_args1
    (71) write_args2 -> . add_fake expression remove_fake
    (72) write_args2 -> . CTE_STRING add_cte_string
    (99) add_fake -> .

    CTE_STRING      shift and go to state 137
    L_P             reduce using rule 99 (add_fake -> .)
    ID              reduce using rule 99 (add_fake -> .)
    CTE_CHAR        reduce using rule 99 (add_fake -> .)
    CTE_F           reduce using rule 99 (add_fake -> .)
    CTE_I           reduce using rule 99 (add_fake -> .)

    write_args2                    shift and go to state 207
    add_fake                       shift and go to state 136

state 183

    (70) write_args1 -> empty .

    R_P             reduce using rule 70 (write_args1 -> empty .)


state 184

    (71) write_args2 -> add_fake expression . remove_fake
    (100) remove_fake -> .

    COMA            reduce using rule 100 (remove_fake -> .)
    R_P             reduce using rule 100 (remove_fake -> .)

    remove_fake                    shift and go to state 208

state 185

    (72) write_args2 -> CTE_STRING add_cte_string .

    COMA            reduce using rule 72 (write_args2 -> CTE_STRING add_cte_string .)
    R_P             reduce using rule 72 (write_args2 -> CTE_STRING add_cte_string .)


state 186

    (73) decision_statement -> IF L_P expression R_P . exp_type L_B statements R_B decision_statement1
    (76) exp_type -> .

    L_B             reduce using rule 76 (exp_type -> .)

    exp_type                       shift and go to state 209

state 187

    (110) op1 -> OR add_operator . expression
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    expression                     shift and go to state 210
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 188

    (83) while_statement -> WHILE L_P breadcrumb expression . R_P exp_type do_statement

    R_P             shift and go to state 211


state 189

    (80) for_statement -> FOR id id_quad EQUAL . expression for_id TO breadcrumb expression exp_type do_statement
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    id                             shift and go to state 126
    expression                     shift and go to state 212
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 190

    (112) op2 -> AND add_operator . texp
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    texp                           shift and go to state 213
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 191

    (120) op3aux -> op3 mexp .

    AND             reduce using rule 120 (op3aux -> op3 mexp .)
    OR              reduce using rule 120 (op3aux -> op3 mexp .)
    ID              reduce using rule 120 (op3aux -> op3 mexp .)
    RETURN          reduce using rule 120 (op3aux -> op3 mexp .)
    READ            reduce using rule 120 (op3aux -> op3 mexp .)
    PRINT           reduce using rule 120 (op3aux -> op3 mexp .)
    IF              reduce using rule 120 (op3aux -> op3 mexp .)
    WHILE           reduce using rule 120 (op3aux -> op3 mexp .)
    FOR             reduce using rule 120 (op3aux -> op3 mexp .)
    L_P             reduce using rule 120 (op3aux -> op3 mexp .)
    CTE_CHAR        reduce using rule 120 (op3aux -> op3 mexp .)
    CTE_F           reduce using rule 120 (op3aux -> op3 mexp .)
    CTE_I           reduce using rule 120 (op3aux -> op3 mexp .)
    R_B             reduce using rule 120 (op3aux -> op3 mexp .)
    R_P             reduce using rule 120 (op3aux -> op3 mexp .)
    R_SB            reduce using rule 120 (op3aux -> op3 mexp .)
    SEMICOLON       reduce using rule 120 (op3aux -> op3 mexp .)
    COMA            reduce using rule 120 (op3aux -> op3 mexp .)
    TO              reduce using rule 120 (op3aux -> op3 mexp .)
    DO              reduce using rule 120 (op3aux -> op3 mexp .)


state 192

    (124) op4aux -> op4 mexp .

    LESSTHAN        reduce using rule 124 (op4aux -> op4 mexp .)
    LESSTHANEQ      reduce using rule 124 (op4aux -> op4 mexp .)
    GREATERTHAN     reduce using rule 124 (op4aux -> op4 mexp .)
    GREATERTHANEQ   reduce using rule 124 (op4aux -> op4 mexp .)
    EQ              reduce using rule 124 (op4aux -> op4 mexp .)
    DIFERENT        reduce using rule 124 (op4aux -> op4 mexp .)
    AND             reduce using rule 124 (op4aux -> op4 mexp .)
    OR              reduce using rule 124 (op4aux -> op4 mexp .)
    ID              reduce using rule 124 (op4aux -> op4 mexp .)
    RETURN          reduce using rule 124 (op4aux -> op4 mexp .)
    READ            reduce using rule 124 (op4aux -> op4 mexp .)
    PRINT           reduce using rule 124 (op4aux -> op4 mexp .)
    IF              reduce using rule 124 (op4aux -> op4 mexp .)
    WHILE           reduce using rule 124 (op4aux -> op4 mexp .)
    FOR             reduce using rule 124 (op4aux -> op4 mexp .)
    L_P             reduce using rule 124 (op4aux -> op4 mexp .)
    CTE_CHAR        reduce using rule 124 (op4aux -> op4 mexp .)
    CTE_F           reduce using rule 124 (op4aux -> op4 mexp .)
    CTE_I           reduce using rule 124 (op4aux -> op4 mexp .)
    R_B             reduce using rule 124 (op4aux -> op4 mexp .)
    R_P             reduce using rule 124 (op4aux -> op4 mexp .)
    R_SB            reduce using rule 124 (op4aux -> op4 mexp .)
    SEMICOLON       reduce using rule 124 (op4aux -> op4 mexp .)
    COMA            reduce using rule 124 (op4aux -> op4 mexp .)
    TO              reduce using rule 124 (op4aux -> op4 mexp .)
    DO              reduce using rule 124 (op4aux -> op4 mexp .)


state 193

    (129) op5aux -> op5 term .

    PLUS            reduce using rule 129 (op5aux -> op5 term .)
    MINUS           reduce using rule 129 (op5aux -> op5 term .)
    LESSTHAN        reduce using rule 129 (op5aux -> op5 term .)
    LESSTHANEQ      reduce using rule 129 (op5aux -> op5 term .)
    GREATERTHAN     reduce using rule 129 (op5aux -> op5 term .)
    GREATERTHANEQ   reduce using rule 129 (op5aux -> op5 term .)
    EQ              reduce using rule 129 (op5aux -> op5 term .)
    DIFERENT        reduce using rule 129 (op5aux -> op5 term .)
    AND             reduce using rule 129 (op5aux -> op5 term .)
    OR              reduce using rule 129 (op5aux -> op5 term .)
    ID              reduce using rule 129 (op5aux -> op5 term .)
    RETURN          reduce using rule 129 (op5aux -> op5 term .)
    READ            reduce using rule 129 (op5aux -> op5 term .)
    PRINT           reduce using rule 129 (op5aux -> op5 term .)
    IF              reduce using rule 129 (op5aux -> op5 term .)
    WHILE           reduce using rule 129 (op5aux -> op5 term .)
    FOR             reduce using rule 129 (op5aux -> op5 term .)
    L_P             reduce using rule 129 (op5aux -> op5 term .)
    CTE_CHAR        reduce using rule 129 (op5aux -> op5 term .)
    CTE_F           reduce using rule 129 (op5aux -> op5 term .)
    CTE_I           reduce using rule 129 (op5aux -> op5 term .)
    R_B             reduce using rule 129 (op5aux -> op5 term .)
    R_P             reduce using rule 129 (op5aux -> op5 term .)
    R_SB            reduce using rule 129 (op5aux -> op5 term .)
    SEMICOLON       reduce using rule 129 (op5aux -> op5 term .)
    COMA            reduce using rule 129 (op5aux -> op5 term .)
    TO              reduce using rule 129 (op5aux -> op5 term .)
    DO              reduce using rule 129 (op5aux -> op5 term .)


state 194

    (30) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements . R_B

    R_B             shift and go to state 214


state 195

    (97) fact -> L_P add_fake expression R_P remove_fake .

    MULT            reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    DIV             reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    MOD             reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    PLUS            reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    MINUS           reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    LESSTHAN        reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    LESSTHANEQ      reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    GREATERTHAN     reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    GREATERTHANEQ   reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    EQ              reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    DIFERENT        reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    AND             reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    OR              reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    ID              reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    RETURN          reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    READ            reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    PRINT           reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    IF              reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    WHILE           reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    FOR             reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    L_P             reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    CTE_CHAR        reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    CTE_F           reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    CTE_I           reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    R_B             reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    R_P             reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    R_SB            reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    SEMICOLON       reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    COMA            reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    TO              reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)
    DO              reduce using rule 97 (fact -> L_P add_fake expression R_P remove_fake .)


state 196

    (60) call_func_exp -> ID call_func_era L_P . args R_P
    (52) args -> . args1
    (53) args -> . empty
    (54) args1 -> . add_fake expression param_check remove_fake args2
    (131) empty -> .
    (99) add_fake -> .

    R_P             reduce using rule 131 (empty -> .)
    L_P             reduce using rule 99 (add_fake -> .)
    ID              reduce using rule 99 (add_fake -> .)
    CTE_CHAR        reduce using rule 99 (add_fake -> .)
    CTE_F           reduce using rule 99 (add_fake -> .)
    CTE_I           reduce using rule 99 (add_fake -> .)

    args                           shift and go to state 215
    args1                          shift and go to state 173
    empty                          shift and go to state 174
    add_fake                       shift and go to state 175

state 197

    (51) assignation -> id id_quad EQUAL expression SEMICOLON .

    ID              reduce using rule 51 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 51 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    READ            reduce using rule 51 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 51 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    IF              reduce using rule 51 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 51 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    FOR             reduce using rule 51 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    L_P             reduce using rule 51 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    CTE_CHAR        reduce using rule 51 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    CTE_F           reduce using rule 51 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    CTE_I           reduce using rule 51 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    R_B             reduce using rule 51 (assignation -> id id_quad EQUAL expression SEMICOLON .)


state 198

    (59) call_func -> ID call_func_era L_P args R_P . SEMICOLON
    (60) call_func_exp -> ID call_func_era L_P args R_P .

    SEMICOLON       shift and go to state 216
    MULT            reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    DIV             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    MOD             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    PLUS            reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    MINUS           reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    LESSTHAN        reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    LESSTHANEQ      reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    GREATERTHAN     reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    GREATERTHANEQ   reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    EQ              reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    DIFERENT        reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    AND             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    OR              reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    ID              reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    RETURN          reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    READ            reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    PRINT           reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    IF              reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    WHILE           reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    FOR             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    L_P             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    CTE_CHAR        reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    CTE_F           reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    CTE_I           reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    R_B             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)


state 199

    (54) args1 -> add_fake expression . param_check remove_fake args2
    (55) param_check -> .

    COMA            reduce using rule 55 (param_check -> .)
    R_P             reduce using rule 55 (param_check -> .)

    param_check                    shift and go to state 217

state 200

    (27) id2 -> L_SB . expression R_SB
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    expression                     shift and go to state 218
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 201

    (25) id1 -> L_SB expression R_SB id2 .

    EQUAL           reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    MULT            reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    DIV             reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    MOD             reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    PLUS            reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    MINUS           reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    LESSTHAN        reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    LESSTHANEQ      reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    GREATERTHAN     reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    GREATERTHANEQ   reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    EQ              reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    DIFERENT        reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    AND             reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    OR              reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    ID              reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    RETURN          reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    READ            reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    PRINT           reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    IF              reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    WHILE           reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    FOR             reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    L_P             reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    CTE_CHAR        reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    CTE_F           reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    CTE_I           reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    R_B             reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    R_P             reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    R_SB            reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    SEMICOLON       reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    COMA            reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    TO              reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)
    DO              reduce using rule 25 (id1 -> L_SB expression R_SB id2 .)


state 202

    (28) id2 -> empty .

    EQUAL           reduce using rule 28 (id2 -> empty .)
    MULT            reduce using rule 28 (id2 -> empty .)
    DIV             reduce using rule 28 (id2 -> empty .)
    MOD             reduce using rule 28 (id2 -> empty .)
    PLUS            reduce using rule 28 (id2 -> empty .)
    MINUS           reduce using rule 28 (id2 -> empty .)
    LESSTHAN        reduce using rule 28 (id2 -> empty .)
    LESSTHANEQ      reduce using rule 28 (id2 -> empty .)
    GREATERTHAN     reduce using rule 28 (id2 -> empty .)
    GREATERTHANEQ   reduce using rule 28 (id2 -> empty .)
    EQ              reduce using rule 28 (id2 -> empty .)
    DIFERENT        reduce using rule 28 (id2 -> empty .)
    AND             reduce using rule 28 (id2 -> empty .)
    OR              reduce using rule 28 (id2 -> empty .)
    ID              reduce using rule 28 (id2 -> empty .)
    RETURN          reduce using rule 28 (id2 -> empty .)
    READ            reduce using rule 28 (id2 -> empty .)
    PRINT           reduce using rule 28 (id2 -> empty .)
    IF              reduce using rule 28 (id2 -> empty .)
    WHILE           reduce using rule 28 (id2 -> empty .)
    FOR             reduce using rule 28 (id2 -> empty .)
    L_P             reduce using rule 28 (id2 -> empty .)
    CTE_CHAR        reduce using rule 28 (id2 -> empty .)
    CTE_F           reduce using rule 28 (id2 -> empty .)
    CTE_I           reduce using rule 28 (id2 -> empty .)
    R_B             reduce using rule 28 (id2 -> empty .)
    R_P             reduce using rule 28 (id2 -> empty .)
    R_SB            reduce using rule 28 (id2 -> empty .)
    SEMICOLON       reduce using rule 28 (id2 -> empty .)
    COMA            reduce using rule 28 (id2 -> empty .)
    TO              reduce using rule 28 (id2 -> empty .)
    DO              reduce using rule 28 (id2 -> empty .)


state 203

    (62) return_func -> RETURN L_P expression R_P SEMICOLON .

    ID              reduce using rule 62 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    RETURN          reduce using rule 62 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    READ            reduce using rule 62 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    PRINT           reduce using rule 62 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    IF              reduce using rule 62 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    WHILE           reduce using rule 62 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    FOR             reduce using rule 62 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    L_P             reduce using rule 62 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 62 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_F           reduce using rule 62 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_I           reduce using rule 62 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    R_B             reduce using rule 62 (return_func -> RETURN L_P expression R_P SEMICOLON .)


state 204

    (63) read -> READ L_P read_args R_P SEMICOLON .

    ID              reduce using rule 63 (read -> READ L_P read_args R_P SEMICOLON .)
    RETURN          reduce using rule 63 (read -> READ L_P read_args R_P SEMICOLON .)
    READ            reduce using rule 63 (read -> READ L_P read_args R_P SEMICOLON .)
    PRINT           reduce using rule 63 (read -> READ L_P read_args R_P SEMICOLON .)
    IF              reduce using rule 63 (read -> READ L_P read_args R_P SEMICOLON .)
    WHILE           reduce using rule 63 (read -> READ L_P read_args R_P SEMICOLON .)
    FOR             reduce using rule 63 (read -> READ L_P read_args R_P SEMICOLON .)
    L_P             reduce using rule 63 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 63 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_F           reduce using rule 63 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_I           reduce using rule 63 (read -> READ L_P read_args R_P SEMICOLON .)
    R_B             reduce using rule 63 (read -> READ L_P read_args R_P SEMICOLON .)


state 205

    (64) read_args -> add_fake expression remove_fake . read_args1
    (65) read_args1 -> . COMA add_fake expression remove_fake read_args1
    (66) read_args1 -> . empty
    (131) empty -> .

    COMA            shift and go to state 220
    R_P             reduce using rule 131 (empty -> .)

    read_args1                     shift and go to state 219
    empty                          shift and go to state 221

state 206

    (67) write -> PRINT L_P write_args R_P SEMICOLON .

    ID              reduce using rule 67 (write -> PRINT L_P write_args R_P SEMICOLON .)
    RETURN          reduce using rule 67 (write -> PRINT L_P write_args R_P SEMICOLON .)
    READ            reduce using rule 67 (write -> PRINT L_P write_args R_P SEMICOLON .)
    PRINT           reduce using rule 67 (write -> PRINT L_P write_args R_P SEMICOLON .)
    IF              reduce using rule 67 (write -> PRINT L_P write_args R_P SEMICOLON .)
    WHILE           reduce using rule 67 (write -> PRINT L_P write_args R_P SEMICOLON .)
    FOR             reduce using rule 67 (write -> PRINT L_P write_args R_P SEMICOLON .)
    L_P             reduce using rule 67 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 67 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_F           reduce using rule 67 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_I           reduce using rule 67 (write -> PRINT L_P write_args R_P SEMICOLON .)
    R_B             reduce using rule 67 (write -> PRINT L_P write_args R_P SEMICOLON .)


state 207

    (69) write_args1 -> COMA write_args2 . write_args1
    (69) write_args1 -> . COMA write_args2 write_args1
    (70) write_args1 -> . empty
    (131) empty -> .

    COMA            shift and go to state 182
    R_P             reduce using rule 131 (empty -> .)

    write_args1                    shift and go to state 222
    empty                          shift and go to state 183

state 208

    (71) write_args2 -> add_fake expression remove_fake .

    COMA            reduce using rule 71 (write_args2 -> add_fake expression remove_fake .)
    R_P             reduce using rule 71 (write_args2 -> add_fake expression remove_fake .)


state 209

    (73) decision_statement -> IF L_P expression R_P exp_type . L_B statements R_B decision_statement1

    L_B             shift and go to state 223


state 210

    (110) op1 -> OR add_operator expression .

    ID              reduce using rule 110 (op1 -> OR add_operator expression .)
    RETURN          reduce using rule 110 (op1 -> OR add_operator expression .)
    READ            reduce using rule 110 (op1 -> OR add_operator expression .)
    PRINT           reduce using rule 110 (op1 -> OR add_operator expression .)
    IF              reduce using rule 110 (op1 -> OR add_operator expression .)
    WHILE           reduce using rule 110 (op1 -> OR add_operator expression .)
    FOR             reduce using rule 110 (op1 -> OR add_operator expression .)
    L_P             reduce using rule 110 (op1 -> OR add_operator expression .)
    CTE_CHAR        reduce using rule 110 (op1 -> OR add_operator expression .)
    CTE_F           reduce using rule 110 (op1 -> OR add_operator expression .)
    CTE_I           reduce using rule 110 (op1 -> OR add_operator expression .)
    R_B             reduce using rule 110 (op1 -> OR add_operator expression .)
    R_P             reduce using rule 110 (op1 -> OR add_operator expression .)
    R_SB            reduce using rule 110 (op1 -> OR add_operator expression .)
    SEMICOLON       reduce using rule 110 (op1 -> OR add_operator expression .)
    COMA            reduce using rule 110 (op1 -> OR add_operator expression .)
    TO              reduce using rule 110 (op1 -> OR add_operator expression .)
    DO              reduce using rule 110 (op1 -> OR add_operator expression .)


state 211

    (83) while_statement -> WHILE L_P breadcrumb expression R_P . exp_type do_statement
    (76) exp_type -> .

    DO              reduce using rule 76 (exp_type -> .)

    exp_type                       shift and go to state 224

state 212

    (80) for_statement -> FOR id id_quad EQUAL expression . for_id TO breadcrumb expression exp_type do_statement
    (81) for_id -> .

    TO              reduce using rule 81 (for_id -> .)

    for_id                         shift and go to state 225

state 213

    (112) op2 -> AND add_operator texp .

    OR              reduce using rule 112 (op2 -> AND add_operator texp .)
    ID              reduce using rule 112 (op2 -> AND add_operator texp .)
    RETURN          reduce using rule 112 (op2 -> AND add_operator texp .)
    READ            reduce using rule 112 (op2 -> AND add_operator texp .)
    PRINT           reduce using rule 112 (op2 -> AND add_operator texp .)
    IF              reduce using rule 112 (op2 -> AND add_operator texp .)
    WHILE           reduce using rule 112 (op2 -> AND add_operator texp .)
    FOR             reduce using rule 112 (op2 -> AND add_operator texp .)
    L_P             reduce using rule 112 (op2 -> AND add_operator texp .)
    CTE_CHAR        reduce using rule 112 (op2 -> AND add_operator texp .)
    CTE_F           reduce using rule 112 (op2 -> AND add_operator texp .)
    CTE_I           reduce using rule 112 (op2 -> AND add_operator texp .)
    R_B             reduce using rule 112 (op2 -> AND add_operator texp .)
    R_P             reduce using rule 112 (op2 -> AND add_operator texp .)
    R_SB            reduce using rule 112 (op2 -> AND add_operator texp .)
    SEMICOLON       reduce using rule 112 (op2 -> AND add_operator texp .)
    COMA            reduce using rule 112 (op2 -> AND add_operator texp .)
    TO              reduce using rule 112 (op2 -> AND add_operator texp .)
    DO              reduce using rule 112 (op2 -> AND add_operator texp .)


state 214

    (30) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B .

    FUNC            reduce using rule 30 (function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B .)
    MAIN            reduce using rule 30 (function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B .)


state 215

    (60) call_func_exp -> ID call_func_era L_P args . R_P

    R_P             shift and go to state 226


state 216

    (59) call_func -> ID call_func_era L_P args R_P SEMICOLON .

    ID              reduce using rule 59 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    RETURN          reduce using rule 59 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    READ            reduce using rule 59 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    PRINT           reduce using rule 59 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    IF              reduce using rule 59 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    WHILE           reduce using rule 59 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    FOR             reduce using rule 59 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    L_P             reduce using rule 59 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 59 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    CTE_F           reduce using rule 59 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    CTE_I           reduce using rule 59 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    R_B             reduce using rule 59 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)


state 217

    (54) args1 -> add_fake expression param_check . remove_fake args2
    (100) remove_fake -> .

    COMA            reduce using rule 100 (remove_fake -> .)
    R_P             reduce using rule 100 (remove_fake -> .)

    remove_fake                    shift and go to state 227

state 218

    (27) id2 -> L_SB expression . R_SB

    R_SB            shift and go to state 228


state 219

    (64) read_args -> add_fake expression remove_fake read_args1 .

    R_P             reduce using rule 64 (read_args -> add_fake expression remove_fake read_args1 .)


state 220

    (65) read_args1 -> COMA . add_fake expression remove_fake read_args1
    (99) add_fake -> .

    L_P             reduce using rule 99 (add_fake -> .)
    ID              reduce using rule 99 (add_fake -> .)
    CTE_CHAR        reduce using rule 99 (add_fake -> .)
    CTE_F           reduce using rule 99 (add_fake -> .)
    CTE_I           reduce using rule 99 (add_fake -> .)

    add_fake                       shift and go to state 229

state 221

    (66) read_args1 -> empty .

    R_P             reduce using rule 66 (read_args1 -> empty .)


state 222

    (69) write_args1 -> COMA write_args2 write_args1 .

    R_P             reduce using rule 69 (write_args1 -> COMA write_args2 write_args1 .)


state 223

    (73) decision_statement -> IF L_P expression R_P exp_type L_B . statements R_B decision_statement1
    (41) statements -> . statement statements
    (42) statements -> . empty
    (43) statement -> . assignation
    (44) statement -> . call_func
    (45) statement -> . return_func
    (46) statement -> . read
    (47) statement -> . write
    (48) statement -> . decision_statement
    (49) statement -> . repetition_statement
    (50) statement -> . expression
    (131) empty -> .
    (51) assignation -> . id id_quad EQUAL expression SEMICOLON
    (59) call_func -> . ID call_func_era L_P args R_P SEMICOLON
    (62) return_func -> . RETURN L_P expression R_P SEMICOLON
    (63) read -> . READ L_P read_args R_P SEMICOLON
    (67) write -> . PRINT L_P write_args R_P SEMICOLON
    (73) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (78) repetition_statement -> . while_statement
    (79) repetition_statement -> . for_statement
    (85) expression -> . texp generate_quad_1 op1
    (24) id -> . ID id1
    (83) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (80) for_statement -> . FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    R_B             reduce using rule 131 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 82
    READ            shift and go to state 83
    PRINT           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    L_P             shift and go to state 68
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    expression                     shift and go to state 79
    statements                     shift and go to state 230
    statement                      shift and go to state 70
    empty                          shift and go to state 71
    assignation                    shift and go to state 72
    call_func                      shift and go to state 73
    return_func                    shift and go to state 74
    read                           shift and go to state 75
    write                          shift and go to state 76
    decision_statement             shift and go to state 77
    repetition_statement           shift and go to state 78
    id                             shift and go to state 80
    while_statement                shift and go to state 86
    for_statement                  shift and go to state 87
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 224

    (83) while_statement -> WHILE L_P breadcrumb expression R_P exp_type . do_statement
    (84) do_statement -> . DO L_B statements R_B

    DO              shift and go to state 232

    do_statement                   shift and go to state 231

state 225

    (80) for_statement -> FOR id id_quad EQUAL expression for_id . TO breadcrumb expression exp_type do_statement

    TO              shift and go to state 233


state 226

    (60) call_func_exp -> ID call_func_era L_P args R_P .

    MULT            reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    DIV             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    MOD             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    PLUS            reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    MINUS           reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    LESSTHAN        reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    LESSTHANEQ      reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    GREATERTHAN     reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    GREATERTHANEQ   reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    EQ              reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    DIFERENT        reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    AND             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    OR              reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    R_P             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    R_SB            reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    SEMICOLON       reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    COMA            reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    ID              reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    RETURN          reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    READ            reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    PRINT           reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    IF              reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    WHILE           reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    FOR             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    L_P             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    CTE_CHAR        reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    CTE_F           reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    CTE_I           reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    R_B             reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    TO              reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)
    DO              reduce using rule 60 (call_func_exp -> ID call_func_era L_P args R_P .)


state 227

    (54) args1 -> add_fake expression param_check remove_fake . args2
    (56) args2 -> . COMA next_arg args1
    (57) args2 -> . empty
    (131) empty -> .

    COMA            shift and go to state 235
    R_P             reduce using rule 131 (empty -> .)

    args2                          shift and go to state 234
    empty                          shift and go to state 236

state 228

    (27) id2 -> L_SB expression R_SB .

    EQUAL           reduce using rule 27 (id2 -> L_SB expression R_SB .)
    MULT            reduce using rule 27 (id2 -> L_SB expression R_SB .)
    DIV             reduce using rule 27 (id2 -> L_SB expression R_SB .)
    MOD             reduce using rule 27 (id2 -> L_SB expression R_SB .)
    PLUS            reduce using rule 27 (id2 -> L_SB expression R_SB .)
    MINUS           reduce using rule 27 (id2 -> L_SB expression R_SB .)
    LESSTHAN        reduce using rule 27 (id2 -> L_SB expression R_SB .)
    LESSTHANEQ      reduce using rule 27 (id2 -> L_SB expression R_SB .)
    GREATERTHAN     reduce using rule 27 (id2 -> L_SB expression R_SB .)
    GREATERTHANEQ   reduce using rule 27 (id2 -> L_SB expression R_SB .)
    EQ              reduce using rule 27 (id2 -> L_SB expression R_SB .)
    DIFERENT        reduce using rule 27 (id2 -> L_SB expression R_SB .)
    AND             reduce using rule 27 (id2 -> L_SB expression R_SB .)
    OR              reduce using rule 27 (id2 -> L_SB expression R_SB .)
    ID              reduce using rule 27 (id2 -> L_SB expression R_SB .)
    RETURN          reduce using rule 27 (id2 -> L_SB expression R_SB .)
    READ            reduce using rule 27 (id2 -> L_SB expression R_SB .)
    PRINT           reduce using rule 27 (id2 -> L_SB expression R_SB .)
    IF              reduce using rule 27 (id2 -> L_SB expression R_SB .)
    WHILE           reduce using rule 27 (id2 -> L_SB expression R_SB .)
    FOR             reduce using rule 27 (id2 -> L_SB expression R_SB .)
    L_P             reduce using rule 27 (id2 -> L_SB expression R_SB .)
    CTE_CHAR        reduce using rule 27 (id2 -> L_SB expression R_SB .)
    CTE_F           reduce using rule 27 (id2 -> L_SB expression R_SB .)
    CTE_I           reduce using rule 27 (id2 -> L_SB expression R_SB .)
    R_B             reduce using rule 27 (id2 -> L_SB expression R_SB .)
    R_P             reduce using rule 27 (id2 -> L_SB expression R_SB .)
    R_SB            reduce using rule 27 (id2 -> L_SB expression R_SB .)
    SEMICOLON       reduce using rule 27 (id2 -> L_SB expression R_SB .)
    COMA            reduce using rule 27 (id2 -> L_SB expression R_SB .)
    TO              reduce using rule 27 (id2 -> L_SB expression R_SB .)
    DO              reduce using rule 27 (id2 -> L_SB expression R_SB .)


state 229

    (65) read_args1 -> COMA add_fake . expression remove_fake read_args1
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    expression                     shift and go to state 237
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    id                             shift and go to state 126
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 230

    (73) decision_statement -> IF L_P expression R_P exp_type L_B statements . R_B decision_statement1

    R_B             shift and go to state 238


state 231

    (83) while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .

    ID              reduce using rule 83 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    RETURN          reduce using rule 83 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    READ            reduce using rule 83 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    PRINT           reduce using rule 83 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    IF              reduce using rule 83 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    WHILE           reduce using rule 83 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    FOR             reduce using rule 83 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    L_P             reduce using rule 83 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    CTE_CHAR        reduce using rule 83 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    CTE_F           reduce using rule 83 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    CTE_I           reduce using rule 83 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    R_B             reduce using rule 83 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)


state 232

    (84) do_statement -> DO . L_B statements R_B

    L_B             shift and go to state 239


state 233

    (80) for_statement -> FOR id id_quad EQUAL expression for_id TO . breadcrumb expression exp_type do_statement
    (82) breadcrumb -> .

    L_P             reduce using rule 82 (breadcrumb -> .)
    ID              reduce using rule 82 (breadcrumb -> .)
    CTE_CHAR        reduce using rule 82 (breadcrumb -> .)
    CTE_F           reduce using rule 82 (breadcrumb -> .)
    CTE_I           reduce using rule 82 (breadcrumb -> .)

    breadcrumb                     shift and go to state 240

state 234

    (54) args1 -> add_fake expression param_check remove_fake args2 .

    R_P             reduce using rule 54 (args1 -> add_fake expression param_check remove_fake args2 .)


state 235

    (56) args2 -> COMA . next_arg args1
    (58) next_arg -> .

    L_P             reduce using rule 58 (next_arg -> .)
    ID              reduce using rule 58 (next_arg -> .)
    CTE_CHAR        reduce using rule 58 (next_arg -> .)
    CTE_F           reduce using rule 58 (next_arg -> .)
    CTE_I           reduce using rule 58 (next_arg -> .)

    next_arg                       shift and go to state 241

state 236

    (57) args2 -> empty .

    R_P             reduce using rule 57 (args2 -> empty .)


state 237

    (65) read_args1 -> COMA add_fake expression . remove_fake read_args1
    (100) remove_fake -> .

    COMA            reduce using rule 100 (remove_fake -> .)
    R_P             reduce using rule 100 (remove_fake -> .)

    remove_fake                    shift and go to state 242

state 238

    (73) decision_statement -> IF L_P expression R_P exp_type L_B statements R_B . decision_statement1
    (74) decision_statement1 -> . ELSE else_jump L_B statements R_B
    (75) decision_statement1 -> . empty
    (131) empty -> .

    ELSE            shift and go to state 244
    ID              reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    L_P             reduce using rule 131 (empty -> .)
    CTE_CHAR        reduce using rule 131 (empty -> .)
    CTE_F           reduce using rule 131 (empty -> .)
    CTE_I           reduce using rule 131 (empty -> .)
    R_B             reduce using rule 131 (empty -> .)

    decision_statement1            shift and go to state 243
    empty                          shift and go to state 245

state 239

    (84) do_statement -> DO L_B . statements R_B
    (41) statements -> . statement statements
    (42) statements -> . empty
    (43) statement -> . assignation
    (44) statement -> . call_func
    (45) statement -> . return_func
    (46) statement -> . read
    (47) statement -> . write
    (48) statement -> . decision_statement
    (49) statement -> . repetition_statement
    (50) statement -> . expression
    (131) empty -> .
    (51) assignation -> . id id_quad EQUAL expression SEMICOLON
    (59) call_func -> . ID call_func_era L_P args R_P SEMICOLON
    (62) return_func -> . RETURN L_P expression R_P SEMICOLON
    (63) read -> . READ L_P read_args R_P SEMICOLON
    (67) write -> . PRINT L_P write_args R_P SEMICOLON
    (73) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (78) repetition_statement -> . while_statement
    (79) repetition_statement -> . for_statement
    (85) expression -> . texp generate_quad_1 op1
    (24) id -> . ID id1
    (83) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (80) for_statement -> . FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    R_B             reduce using rule 131 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 82
    READ            shift and go to state 83
    PRINT           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    L_P             shift and go to state 68
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    statements                     shift and go to state 246
    statement                      shift and go to state 70
    empty                          shift and go to state 71
    assignation                    shift and go to state 72
    call_func                      shift and go to state 73
    return_func                    shift and go to state 74
    read                           shift and go to state 75
    write                          shift and go to state 76
    decision_statement             shift and go to state 77
    repetition_statement           shift and go to state 78
    expression                     shift and go to state 79
    id                             shift and go to state 80
    while_statement                shift and go to state 86
    for_statement                  shift and go to state 87
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 240

    (80) for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb . expression exp_type do_statement
    (85) expression -> . texp generate_quad_1 op1
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (24) id -> . ID id1
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    L_P             shift and go to state 68
    ID              shift and go to state 127
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    id                             shift and go to state 126
    expression                     shift and go to state 247
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 241

    (56) args2 -> COMA next_arg . args1
    (54) args1 -> . add_fake expression param_check remove_fake args2
    (99) add_fake -> .

    L_P             reduce using rule 99 (add_fake -> .)
    ID              reduce using rule 99 (add_fake -> .)
    CTE_CHAR        reduce using rule 99 (add_fake -> .)
    CTE_F           reduce using rule 99 (add_fake -> .)
    CTE_I           reduce using rule 99 (add_fake -> .)

    args1                          shift and go to state 248
    add_fake                       shift and go to state 175

state 242

    (65) read_args1 -> COMA add_fake expression remove_fake . read_args1
    (65) read_args1 -> . COMA add_fake expression remove_fake read_args1
    (66) read_args1 -> . empty
    (131) empty -> .

    COMA            shift and go to state 220
    R_P             reduce using rule 131 (empty -> .)

    read_args1                     shift and go to state 249
    empty                          shift and go to state 221

state 243

    (73) decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .

    ID              reduce using rule 73 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    RETURN          reduce using rule 73 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    READ            reduce using rule 73 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    PRINT           reduce using rule 73 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    IF              reduce using rule 73 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    WHILE           reduce using rule 73 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    FOR             reduce using rule 73 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    L_P             reduce using rule 73 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    CTE_CHAR        reduce using rule 73 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    CTE_F           reduce using rule 73 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    CTE_I           reduce using rule 73 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    R_B             reduce using rule 73 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)


state 244

    (74) decision_statement1 -> ELSE . else_jump L_B statements R_B
    (77) else_jump -> .

    L_B             reduce using rule 77 (else_jump -> .)

    else_jump                      shift and go to state 250

state 245

    (75) decision_statement1 -> empty .

    ID              reduce using rule 75 (decision_statement1 -> empty .)
    RETURN          reduce using rule 75 (decision_statement1 -> empty .)
    READ            reduce using rule 75 (decision_statement1 -> empty .)
    PRINT           reduce using rule 75 (decision_statement1 -> empty .)
    IF              reduce using rule 75 (decision_statement1 -> empty .)
    WHILE           reduce using rule 75 (decision_statement1 -> empty .)
    FOR             reduce using rule 75 (decision_statement1 -> empty .)
    L_P             reduce using rule 75 (decision_statement1 -> empty .)
    CTE_CHAR        reduce using rule 75 (decision_statement1 -> empty .)
    CTE_F           reduce using rule 75 (decision_statement1 -> empty .)
    CTE_I           reduce using rule 75 (decision_statement1 -> empty .)
    R_B             reduce using rule 75 (decision_statement1 -> empty .)


state 246

    (84) do_statement -> DO L_B statements . R_B

    R_B             shift and go to state 251


state 247

    (80) for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression . exp_type do_statement
    (76) exp_type -> .

    DO              reduce using rule 76 (exp_type -> .)

    exp_type                       shift and go to state 252

state 248

    (56) args2 -> COMA next_arg args1 .

    R_P             reduce using rule 56 (args2 -> COMA next_arg args1 .)


state 249

    (65) read_args1 -> COMA add_fake expression remove_fake read_args1 .

    R_P             reduce using rule 65 (read_args1 -> COMA add_fake expression remove_fake read_args1 .)


state 250

    (74) decision_statement1 -> ELSE else_jump . L_B statements R_B

    L_B             shift and go to state 253


state 251

    (84) do_statement -> DO L_B statements R_B .

    ID              reduce using rule 84 (do_statement -> DO L_B statements R_B .)
    RETURN          reduce using rule 84 (do_statement -> DO L_B statements R_B .)
    READ            reduce using rule 84 (do_statement -> DO L_B statements R_B .)
    PRINT           reduce using rule 84 (do_statement -> DO L_B statements R_B .)
    IF              reduce using rule 84 (do_statement -> DO L_B statements R_B .)
    WHILE           reduce using rule 84 (do_statement -> DO L_B statements R_B .)
    FOR             reduce using rule 84 (do_statement -> DO L_B statements R_B .)
    L_P             reduce using rule 84 (do_statement -> DO L_B statements R_B .)
    CTE_CHAR        reduce using rule 84 (do_statement -> DO L_B statements R_B .)
    CTE_F           reduce using rule 84 (do_statement -> DO L_B statements R_B .)
    CTE_I           reduce using rule 84 (do_statement -> DO L_B statements R_B .)
    R_B             reduce using rule 84 (do_statement -> DO L_B statements R_B .)


state 252

    (80) for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type . do_statement
    (84) do_statement -> . DO L_B statements R_B

    DO              shift and go to state 232

    do_statement                   shift and go to state 254

state 253

    (74) decision_statement1 -> ELSE else_jump L_B . statements R_B
    (41) statements -> . statement statements
    (42) statements -> . empty
    (43) statement -> . assignation
    (44) statement -> . call_func
    (45) statement -> . return_func
    (46) statement -> . read
    (47) statement -> . write
    (48) statement -> . decision_statement
    (49) statement -> . repetition_statement
    (50) statement -> . expression
    (131) empty -> .
    (51) assignation -> . id id_quad EQUAL expression SEMICOLON
    (59) call_func -> . ID call_func_era L_P args R_P SEMICOLON
    (62) return_func -> . RETURN L_P expression R_P SEMICOLON
    (63) read -> . READ L_P read_args R_P SEMICOLON
    (67) write -> . PRINT L_P write_args R_P SEMICOLON
    (73) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (78) repetition_statement -> . while_statement
    (79) repetition_statement -> . for_statement
    (85) expression -> . texp generate_quad_1 op1
    (24) id -> . ID id1
    (83) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (80) for_statement -> . FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (86) texp -> . gexp generate_quad_2 op2
    (87) gexp -> . mexp generate_quad_3 op3aux
    (88) mexp -> . term generate_quad_4 op4aux
    (89) term -> . fact generate_quad_5 op5aux
    (95) fact -> . id id_quad
    (96) fact -> . call_func_exp
    (97) fact -> . L_P add_fake expression R_P remove_fake
    (98) fact -> . cte
    (60) call_func_exp -> . ID call_func_era L_P args R_P
    (102) cte -> . CTE_CHAR add_cte_char
    (103) cte -> . CTE_F add_cte_float
    (104) cte -> . CTE_I add_cte_int

    R_B             reduce using rule 131 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 82
    READ            shift and go to state 83
    PRINT           shift and go to state 84
    IF              shift and go to state 85
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    L_P             shift and go to state 68
    CTE_CHAR        shift and go to state 97
    CTE_F           shift and go to state 98
    CTE_I           shift and go to state 99

    statements                     shift and go to state 255
    statement                      shift and go to state 70
    empty                          shift and go to state 71
    assignation                    shift and go to state 72
    call_func                      shift and go to state 73
    return_func                    shift and go to state 74
    read                           shift and go to state 75
    write                          shift and go to state 76
    decision_statement             shift and go to state 77
    repetition_statement           shift and go to state 78
    expression                     shift and go to state 79
    id                             shift and go to state 80
    while_statement                shift and go to state 86
    for_statement                  shift and go to state 87
    texp                           shift and go to state 88
    gexp                           shift and go to state 91
    mexp                           shift and go to state 92
    term                           shift and go to state 93
    fact                           shift and go to state 94
    call_func_exp                  shift and go to state 95
    cte                            shift and go to state 96

state 254

    (80) for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .

    ID              reduce using rule 80 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    RETURN          reduce using rule 80 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    READ            reduce using rule 80 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    PRINT           reduce using rule 80 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    IF              reduce using rule 80 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    WHILE           reduce using rule 80 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    FOR             reduce using rule 80 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    L_P             reduce using rule 80 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    CTE_CHAR        reduce using rule 80 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    CTE_F           reduce using rule 80 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    CTE_I           reduce using rule 80 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    R_B             reduce using rule 80 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)


state 255

    (74) decision_statement1 -> ELSE else_jump L_B statements . R_B

    R_B             shift and go to state 256


state 256

    (74) decision_statement1 -> ELSE else_jump L_B statements R_B .

    ID              reduce using rule 74 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    RETURN          reduce using rule 74 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    READ            reduce using rule 74 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    PRINT           reduce using rule 74 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    IF              reduce using rule 74 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    WHILE           reduce using rule 74 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    FOR             reduce using rule 74 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    L_P             reduce using rule 74 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    CTE_CHAR        reduce using rule 74 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    CTE_F           reduce using rule 74 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    CTE_I           reduce using rule 74 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    R_B             reduce using rule 74 (decision_statement1 -> ELSE else_jump L_B statements R_B .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 81 resolved using rule (call_func_era -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 81
WARNING: reduce/reduce conflict in state 127 resolved using rule (call_func_era -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 127
