Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON g_var funcs main
Rule 2     main -> MAIN L_P params R_P var_declaration L_B statements R_B
Rule 3     type -> INT
Rule 4     type -> FLOAT
Rule 5     type -> CHAR
Rule 6     g_var -> var_declaration
Rule 7     funcs -> function funcs
Rule 8     funcs -> empty
Rule 9     var_declaration -> VAR var1
Rule 10    var_declaration -> empty
Rule 11    var1 -> var_type dec_id var2 SEMICOLON var4
Rule 12    var2 -> COMA dec_id var3
Rule 13    var2 -> empty
Rule 14    var3 -> var2
Rule 15    var4 -> var1
Rule 16    var4 -> empty
Rule 17    dec_id -> ID dec_id1
Rule 18    dec_id1 -> L_SB CTE_I R_SB dec_id2
Rule 19    dec_id1 -> empty
Rule 20    dec_id2 -> L_SB CTE_I R_SB
Rule 21    dec_id2 -> empty
Rule 22    id -> ID id1
Rule 23    id1 -> L_SB expression R_SB id2
Rule 24    id1 -> empty
Rule 25    id2 -> L_SB expression R_SB
Rule 26    id2 -> empty
Rule 27    var_type -> type
Rule 28    function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
Rule 29    register_func -> <empty>
Rule 30    add_params -> <empty>
Rule 31    start_func -> <empty>
Rule 32    func_type -> VOID
Rule 33    func_type -> type
Rule 34    params -> var_type param_type dec_id params1
Rule 35    params -> empty
Rule 36    param_type -> <empty>
Rule 37    params1 -> COMA params
Rule 38    params1 -> empty
Rule 39    statements -> statement statements
Rule 40    statements -> empty
Rule 41    statement -> assignation
Rule 42    statement -> call_func
Rule 43    statement -> return_func
Rule 44    statement -> read
Rule 45    statement -> write
Rule 46    statement -> decision_statement
Rule 47    statement -> repetition_statement
Rule 48    statement -> expression
Rule 49    assignation -> id id_quad EQUAL expression SEMICOLON
Rule 50    args -> args1
Rule 51    args -> empty
Rule 52    args1 -> expression param_check args2
Rule 53    param_check -> <empty>
Rule 54    args2 -> COMA next_arg args1
Rule 55    args2 -> empty
Rule 56    next_arg -> <empty>
Rule 57    call_func -> ID call_func_era L_P args R_P SEMICOLON
Rule 58    call_func_exp -> ID call_func_era L_P args R_P
Rule 59    call_func_era -> <empty>
Rule 60    return_func -> RETURN L_P expression R_P SEMICOLON
Rule 61    read -> READ L_P read_args R_P SEMICOLON
Rule 62    read_args -> expression read_args1
Rule 63    read_args1 -> COMA expression read_args1
Rule 64    read_args1 -> empty
Rule 65    write -> PRINT L_P write_args R_P SEMICOLON
Rule 66    write_args -> write_args2 write_args1
Rule 67    write_args1 -> COMA write_args2 write_args1
Rule 68    write_args1 -> empty
Rule 69    write_args2 -> expression
Rule 70    write_args2 -> CTE_STRING
Rule 71    decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1
Rule 72    decision_statement1 -> ELSE else_jump L_B statements R_B
Rule 73    decision_statement1 -> empty
Rule 74    exp_type -> <empty>
Rule 75    else_jump -> <empty>
Rule 76    repetition_statement -> while_statement
Rule 77    repetition_statement -> for_statement
Rule 78    for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
Rule 79    for_id -> <empty>
Rule 80    breadcrumb -> <empty>
Rule 81    while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement
Rule 82    do_statement -> DO L_B statements R_B
Rule 83    expression -> texp generate_quad op1
Rule 84    texp -> gexp generate_quad op2
Rule 85    gexp -> mexp generate_quad op3aux
Rule 86    mexp -> term generate_quad op4aux
Rule 87    term -> fact generate_quad op5aux
Rule 88    generate_quad -> <empty>
Rule 89    fact -> id id_quad
Rule 90    fact -> call_func_exp
Rule 91    fact -> L_P add_fake expression R_P remove_fake
Rule 92    fact -> cte
Rule 93    add_fake -> <empty>
Rule 94    remove_fake -> <empty>
Rule 95    id_quad -> <empty>
Rule 96    cte -> CTE_F add_cte_float
Rule 97    cte -> CTE_I add_cte_int
Rule 98    cte -> CTE_CHAR add_cte_char
Rule 99    add_cte_int -> <empty>
Rule 100   add_cte_float -> <empty>
Rule 101   add_cte_char -> <empty>
Rule 102   op1 -> OR expression
Rule 103   op1 -> empty
Rule 104   op2 -> AND texp
Rule 105   op2 -> empty
Rule 106   op3 -> LESSTHAN
Rule 107   op3 -> LESSTHANEQ
Rule 108   op3 -> GREATERTHAN
Rule 109   op3 -> GREATERTHANEQ
Rule 110   op3 -> EQ
Rule 111   op3 -> DIFERENT
Rule 112   op3aux -> op3 mexp
Rule 113   op3aux -> empty
Rule 114   op4 -> PLUS
Rule 115   op4 -> MINUS
Rule 116   op4aux -> op4 mexp
Rule 117   op4aux -> empty
Rule 118   op5 -> MULT
Rule 119   op5 -> DIV
Rule 120   op5 -> MOD
Rule 121   op5aux -> op5 term
Rule 122   op5aux -> empty
Rule 123   empty -> <empty>

Terminals, with rules where they appear

AND                  : 104
CHAR                 : 5
COMA                 : 12 37 54 63 67
CTE_CHAR             : 98
CTE_F                : 96
CTE_I                : 18 20 97
CTE_STRING           : 70
DIFERENT             : 111
DIV                  : 119
DO                   : 82
ELSE                 : 72
EQ                   : 110
EQUAL                : 49 78
FLOAT                : 4
FOR                  : 78
FUNC                 : 28
GREATERTHAN          : 108
GREATERTHANEQ        : 109
ID                   : 1 17 22 28 57 58
IF                   : 71
INT                  : 3
LESSTHAN             : 106
LESSTHANEQ           : 107
L_B                  : 2 28 71 72 82
L_P                  : 2 28 57 58 60 61 65 71 81 91
L_SB                 : 18 20 23 25
MAIN                 : 2
MINUS                : 115
MOD                  : 120
MULT                 : 118
OR                   : 102
PLUS                 : 114
PRINT                : 65
PROGRAM              : 1
READ                 : 61
RETURN               : 60
R_B                  : 2 28 71 72 82
R_P                  : 2 28 57 58 60 61 65 71 81 91
R_SB                 : 18 20 23 25
SEMICOLON            : 1 11 49 57 60 61 65
TO                   : 78
VAR                  : 9
VOID                 : 32
WHILE                : 81
error                : 

Nonterminals, with rules where they appear

add_cte_char         : 98
add_cte_float        : 96
add_cte_int          : 97
add_fake             : 91
add_params           : 28
args                 : 57 58
args1                : 50 54
args2                : 52
assignation          : 41
breadcrumb           : 78 81
call_func            : 42
call_func_era        : 57 58
call_func_exp        : 90
cte                  : 92
dec_id               : 11 12 34
dec_id1              : 17
dec_id2              : 18
decision_statement   : 46
decision_statement1  : 71
do_statement         : 78 81
else_jump            : 72
empty                : 8 10 13 16 19 21 24 26 35 38 40 51 55 64 68 73 103 105 113 117 122
exp_type             : 71 78 81
expression           : 23 25 48 49 52 60 62 63 69 71 78 78 81 91 102
fact                 : 87
for_id               : 78
for_statement        : 77
func_type            : 28
funcs                : 1 7
function             : 7
g_var                : 1
generate_quad        : 83 84 85 86 87
gexp                 : 84
id                   : 49 78 89
id1                  : 22
id2                  : 23
id_quad              : 49 78 89
main                 : 1
mexp                 : 85 112 116
next_arg             : 54
op1                  : 83
op2                  : 84
op3                  : 112
op3aux               : 85
op4                  : 116
op4aux               : 86
op5                  : 121
op5aux               : 87
param_check          : 52
param_type           : 34
params               : 2 28 37
params1              : 34
program              : 0
read                 : 44
read_args            : 61
read_args1           : 62 63
register_func        : 28
remove_fake          : 91
repetition_statement : 47
return_func          : 43
start_func           : 28
statement            : 39
statements           : 2 28 39 71 72 82
term                 : 86 121
texp                 : 83 104
type                 : 27 33
var1                 : 9 15
var2                 : 11 14
var3                 : 12
var4                 : 11
var_declaration      : 2 6 28
var_type             : 11 34
while_statement      : 76
write                : 45
write_args           : 65
write_args1          : 66 67
write_args2          : 66 67

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON g_var funcs main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON g_var funcs main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON g_var funcs main

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . g_var funcs main
    (6) g_var -> . var_declaration
    (9) var_declaration -> . VAR var1
    (10) var_declaration -> . empty
    (123) empty -> .

    VAR             shift and go to state 7
    FUNC            reduce using rule 123 (empty -> .)
    MAIN            reduce using rule 123 (empty -> .)

    g_var                          shift and go to state 5
    var_declaration                shift and go to state 6
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID SEMICOLON g_var . funcs main
    (7) funcs -> . function funcs
    (8) funcs -> . empty
    (28) function -> . FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
    (123) empty -> .

    FUNC            shift and go to state 12
    MAIN            reduce using rule 123 (empty -> .)

    funcs                          shift and go to state 9
    function                       shift and go to state 10
    empty                          shift and go to state 11

state 6

    (6) g_var -> var_declaration .

    FUNC            reduce using rule 6 (g_var -> var_declaration .)
    MAIN            reduce using rule 6 (g_var -> var_declaration .)


state 7

    (9) var_declaration -> VAR . var1
    (11) var1 -> . var_type dec_id var2 SEMICOLON var4
    (27) var_type -> . type
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    var1                           shift and go to state 13
    var_type                       shift and go to state 14
    type                           shift and go to state 15

state 8

    (10) var_declaration -> empty .

    FUNC            reduce using rule 10 (var_declaration -> empty .)
    MAIN            reduce using rule 10 (var_declaration -> empty .)
    L_B             reduce using rule 10 (var_declaration -> empty .)


state 9

    (1) program -> PROGRAM ID SEMICOLON g_var funcs . main
    (2) main -> . MAIN L_P params R_P var_declaration L_B statements R_B

    MAIN            shift and go to state 20

    main                           shift and go to state 19

state 10

    (7) funcs -> function . funcs
    (7) funcs -> . function funcs
    (8) funcs -> . empty
    (28) function -> . FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
    (123) empty -> .

    FUNC            shift and go to state 12
    MAIN            reduce using rule 123 (empty -> .)

    function                       shift and go to state 10
    funcs                          shift and go to state 21
    empty                          shift and go to state 11

state 11

    (8) funcs -> empty .

    MAIN            reduce using rule 8 (funcs -> empty .)


state 12

    (28) function -> FUNC . func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
    (32) func_type -> . VOID
    (33) func_type -> . type
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    VOID            shift and go to state 23
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    func_type                      shift and go to state 22
    type                           shift and go to state 24

state 13

    (9) var_declaration -> VAR var1 .

    FUNC            reduce using rule 9 (var_declaration -> VAR var1 .)
    MAIN            reduce using rule 9 (var_declaration -> VAR var1 .)
    L_B             reduce using rule 9 (var_declaration -> VAR var1 .)


state 14

    (11) var1 -> var_type . dec_id var2 SEMICOLON var4
    (17) dec_id -> . ID dec_id1

    ID              shift and go to state 26

    dec_id                         shift and go to state 25

state 15

    (27) var_type -> type .

    ID              reduce using rule 27 (var_type -> type .)


state 16

    (3) type -> INT .

    ID              reduce using rule 3 (type -> INT .)


state 17

    (4) type -> FLOAT .

    ID              reduce using rule 4 (type -> FLOAT .)


state 18

    (5) type -> CHAR .

    ID              reduce using rule 5 (type -> CHAR .)


state 19

    (1) program -> PROGRAM ID SEMICOLON g_var funcs main .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON g_var funcs main .)


state 20

    (2) main -> MAIN . L_P params R_P var_declaration L_B statements R_B

    L_P             shift and go to state 27


state 21

    (7) funcs -> function funcs .

    MAIN            reduce using rule 7 (funcs -> function funcs .)


state 22

    (28) function -> FUNC func_type . ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B

    ID              shift and go to state 28


state 23

    (32) func_type -> VOID .

    ID              reduce using rule 32 (func_type -> VOID .)


state 24

    (33) func_type -> type .

    ID              reduce using rule 33 (func_type -> type .)


state 25

    (11) var1 -> var_type dec_id . var2 SEMICOLON var4
    (12) var2 -> . COMA dec_id var3
    (13) var2 -> . empty
    (123) empty -> .

    COMA            shift and go to state 30
    SEMICOLON       reduce using rule 123 (empty -> .)

    var2                           shift and go to state 29
    empty                          shift and go to state 31

state 26

    (17) dec_id -> ID . dec_id1
    (18) dec_id1 -> . L_SB CTE_I R_SB dec_id2
    (19) dec_id1 -> . empty
    (123) empty -> .

    L_SB            shift and go to state 33
    COMA            reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    R_P             reduce using rule 123 (empty -> .)

    dec_id1                        shift and go to state 32
    empty                          shift and go to state 34

state 27

    (2) main -> MAIN L_P . params R_P var_declaration L_B statements R_B
    (34) params -> . var_type param_type dec_id params1
    (35) params -> . empty
    (27) var_type -> . type
    (123) empty -> .
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    R_P             reduce using rule 123 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    params                         shift and go to state 35
    var_type                       shift and go to state 36
    empty                          shift and go to state 37
    type                           shift and go to state 15

state 28

    (28) function -> FUNC func_type ID . register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
    (29) register_func -> .

    L_P             reduce using rule 29 (register_func -> .)

    register_func                  shift and go to state 38

state 29

    (11) var1 -> var_type dec_id var2 . SEMICOLON var4

    SEMICOLON       shift and go to state 39


state 30

    (12) var2 -> COMA . dec_id var3
    (17) dec_id -> . ID dec_id1

    ID              shift and go to state 26

    dec_id                         shift and go to state 40

state 31

    (13) var2 -> empty .

    SEMICOLON       reduce using rule 13 (var2 -> empty .)


state 32

    (17) dec_id -> ID dec_id1 .

    COMA            reduce using rule 17 (dec_id -> ID dec_id1 .)
    SEMICOLON       reduce using rule 17 (dec_id -> ID dec_id1 .)
    R_P             reduce using rule 17 (dec_id -> ID dec_id1 .)


state 33

    (18) dec_id1 -> L_SB . CTE_I R_SB dec_id2

    CTE_I           shift and go to state 41


state 34

    (19) dec_id1 -> empty .

    COMA            reduce using rule 19 (dec_id1 -> empty .)
    SEMICOLON       reduce using rule 19 (dec_id1 -> empty .)
    R_P             reduce using rule 19 (dec_id1 -> empty .)


state 35

    (2) main -> MAIN L_P params . R_P var_declaration L_B statements R_B

    R_P             shift and go to state 42


state 36

    (34) params -> var_type . param_type dec_id params1
    (36) param_type -> .

    ID              reduce using rule 36 (param_type -> .)

    param_type                     shift and go to state 43

state 37

    (35) params -> empty .

    R_P             reduce using rule 35 (params -> empty .)


state 38

    (28) function -> FUNC func_type ID register_func . L_P params R_P add_params var_declaration start_func L_B statements R_B

    L_P             shift and go to state 44


state 39

    (11) var1 -> var_type dec_id var2 SEMICOLON . var4
    (15) var4 -> . var1
    (16) var4 -> . empty
    (11) var1 -> . var_type dec_id var2 SEMICOLON var4
    (123) empty -> .
    (27) var_type -> . type
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    FUNC            reduce using rule 123 (empty -> .)
    MAIN            reduce using rule 123 (empty -> .)
    L_B             reduce using rule 123 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    var_type                       shift and go to state 14
    var4                           shift and go to state 45
    var1                           shift and go to state 46
    empty                          shift and go to state 47
    type                           shift and go to state 15

state 40

    (12) var2 -> COMA dec_id . var3
    (14) var3 -> . var2
    (12) var2 -> . COMA dec_id var3
    (13) var2 -> . empty
    (123) empty -> .

    COMA            shift and go to state 30
    SEMICOLON       reduce using rule 123 (empty -> .)

    var3                           shift and go to state 48
    var2                           shift and go to state 49
    empty                          shift and go to state 31

state 41

    (18) dec_id1 -> L_SB CTE_I . R_SB dec_id2

    R_SB            shift and go to state 50


state 42

    (2) main -> MAIN L_P params R_P . var_declaration L_B statements R_B
    (9) var_declaration -> . VAR var1
    (10) var_declaration -> . empty
    (123) empty -> .

    VAR             shift and go to state 7
    L_B             reduce using rule 123 (empty -> .)

    var_declaration                shift and go to state 51
    empty                          shift and go to state 8

state 43

    (34) params -> var_type param_type . dec_id params1
    (17) dec_id -> . ID dec_id1

    ID              shift and go to state 26

    dec_id                         shift and go to state 52

state 44

    (28) function -> FUNC func_type ID register_func L_P . params R_P add_params var_declaration start_func L_B statements R_B
    (34) params -> . var_type param_type dec_id params1
    (35) params -> . empty
    (27) var_type -> . type
    (123) empty -> .
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    R_P             reduce using rule 123 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    params                         shift and go to state 53
    var_type                       shift and go to state 36
    empty                          shift and go to state 37
    type                           shift and go to state 15

state 45

    (11) var1 -> var_type dec_id var2 SEMICOLON var4 .

    FUNC            reduce using rule 11 (var1 -> var_type dec_id var2 SEMICOLON var4 .)
    MAIN            reduce using rule 11 (var1 -> var_type dec_id var2 SEMICOLON var4 .)
    L_B             reduce using rule 11 (var1 -> var_type dec_id var2 SEMICOLON var4 .)


state 46

    (15) var4 -> var1 .

    FUNC            reduce using rule 15 (var4 -> var1 .)
    MAIN            reduce using rule 15 (var4 -> var1 .)
    L_B             reduce using rule 15 (var4 -> var1 .)


state 47

    (16) var4 -> empty .

    FUNC            reduce using rule 16 (var4 -> empty .)
    MAIN            reduce using rule 16 (var4 -> empty .)
    L_B             reduce using rule 16 (var4 -> empty .)


state 48

    (12) var2 -> COMA dec_id var3 .

    SEMICOLON       reduce using rule 12 (var2 -> COMA dec_id var3 .)


state 49

    (14) var3 -> var2 .

    SEMICOLON       reduce using rule 14 (var3 -> var2 .)


state 50

    (18) dec_id1 -> L_SB CTE_I R_SB . dec_id2
    (20) dec_id2 -> . L_SB CTE_I R_SB
    (21) dec_id2 -> . empty
    (123) empty -> .

    L_SB            shift and go to state 54
    COMA            reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    R_P             reduce using rule 123 (empty -> .)

    dec_id2                        shift and go to state 55
    empty                          shift and go to state 56

state 51

    (2) main -> MAIN L_P params R_P var_declaration . L_B statements R_B

    L_B             shift and go to state 57


state 52

    (34) params -> var_type param_type dec_id . params1
    (37) params1 -> . COMA params
    (38) params1 -> . empty
    (123) empty -> .

    COMA            shift and go to state 59
    R_P             reduce using rule 123 (empty -> .)

    params1                        shift and go to state 58
    empty                          shift and go to state 60

state 53

    (28) function -> FUNC func_type ID register_func L_P params . R_P add_params var_declaration start_func L_B statements R_B

    R_P             shift and go to state 61


state 54

    (20) dec_id2 -> L_SB . CTE_I R_SB

    CTE_I           shift and go to state 62


state 55

    (18) dec_id1 -> L_SB CTE_I R_SB dec_id2 .

    COMA            reduce using rule 18 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)
    SEMICOLON       reduce using rule 18 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)
    R_P             reduce using rule 18 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)


state 56

    (21) dec_id2 -> empty .

    COMA            reduce using rule 21 (dec_id2 -> empty .)
    SEMICOLON       reduce using rule 21 (dec_id2 -> empty .)
    R_P             reduce using rule 21 (dec_id2 -> empty .)


state 57

    (2) main -> MAIN L_P params R_P var_declaration L_B . statements R_B
    (39) statements -> . statement statements
    (40) statements -> . empty
    (41) statement -> . assignation
    (42) statement -> . call_func
    (43) statement -> . return_func
    (44) statement -> . read
    (45) statement -> . write
    (46) statement -> . decision_statement
    (47) statement -> . repetition_statement
    (48) statement -> . expression
    (123) empty -> .
    (49) assignation -> . id id_quad EQUAL expression SEMICOLON
    (57) call_func -> . ID call_func_era L_P args R_P SEMICOLON
    (60) return_func -> . RETURN L_P expression R_P SEMICOLON
    (61) read -> . READ L_P read_args R_P SEMICOLON
    (65) write -> . PRINT L_P write_args R_P SEMICOLON
    (71) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (76) repetition_statement -> . while_statement
    (77) repetition_statement -> . for_statement
    (83) expression -> . texp generate_quad op1
    (22) id -> . ID id1
    (81) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (78) for_statement -> . FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    R_B             reduce using rule 123 (empty -> .)
    ID              shift and go to state 76
    RETURN          shift and go to state 77
    READ            shift and go to state 78
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 84
    FOR             shift and go to state 85
    L_P             shift and go to state 63
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    statements                     shift and go to state 64
    statement                      shift and go to state 65
    empty                          shift and go to state 66
    assignation                    shift and go to state 67
    call_func                      shift and go to state 68
    return_func                    shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    decision_statement             shift and go to state 72
    repetition_statement           shift and go to state 73
    expression                     shift and go to state 74
    id                             shift and go to state 75
    while_statement                shift and go to state 81
    for_statement                  shift and go to state 82
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 58

    (34) params -> var_type param_type dec_id params1 .

    R_P             reduce using rule 34 (params -> var_type param_type dec_id params1 .)


state 59

    (37) params1 -> COMA . params
    (34) params -> . var_type param_type dec_id params1
    (35) params -> . empty
    (27) var_type -> . type
    (123) empty -> .
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    R_P             reduce using rule 123 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    params                         shift and go to state 95
    var_type                       shift and go to state 36
    empty                          shift and go to state 37
    type                           shift and go to state 15

state 60

    (38) params1 -> empty .

    R_P             reduce using rule 38 (params1 -> empty .)


state 61

    (28) function -> FUNC func_type ID register_func L_P params R_P . add_params var_declaration start_func L_B statements R_B
    (30) add_params -> .

    VAR             reduce using rule 30 (add_params -> .)
    L_B             reduce using rule 30 (add_params -> .)

    add_params                     shift and go to state 96

state 62

    (20) dec_id2 -> L_SB CTE_I . R_SB

    R_SB            shift and go to state 97


state 63

    (91) fact -> L_P . add_fake expression R_P remove_fake
    (93) add_fake -> .

    L_P             reduce using rule 93 (add_fake -> .)
    ID              reduce using rule 93 (add_fake -> .)
    CTE_F           reduce using rule 93 (add_fake -> .)
    CTE_I           reduce using rule 93 (add_fake -> .)
    CTE_CHAR        reduce using rule 93 (add_fake -> .)

    add_fake                       shift and go to state 98

state 64

    (2) main -> MAIN L_P params R_P var_declaration L_B statements . R_B

    R_B             shift and go to state 99


state 65

    (39) statements -> statement . statements
    (39) statements -> . statement statements
    (40) statements -> . empty
    (41) statement -> . assignation
    (42) statement -> . call_func
    (43) statement -> . return_func
    (44) statement -> . read
    (45) statement -> . write
    (46) statement -> . decision_statement
    (47) statement -> . repetition_statement
    (48) statement -> . expression
    (123) empty -> .
    (49) assignation -> . id id_quad EQUAL expression SEMICOLON
    (57) call_func -> . ID call_func_era L_P args R_P SEMICOLON
    (60) return_func -> . RETURN L_P expression R_P SEMICOLON
    (61) read -> . READ L_P read_args R_P SEMICOLON
    (65) write -> . PRINT L_P write_args R_P SEMICOLON
    (71) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (76) repetition_statement -> . while_statement
    (77) repetition_statement -> . for_statement
    (83) expression -> . texp generate_quad op1
    (22) id -> . ID id1
    (81) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (78) for_statement -> . FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    R_B             reduce using rule 123 (empty -> .)
    ID              shift and go to state 76
    RETURN          shift and go to state 77
    READ            shift and go to state 78
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 84
    FOR             shift and go to state 85
    L_P             shift and go to state 63
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    statement                      shift and go to state 65
    statements                     shift and go to state 100
    empty                          shift and go to state 66
    assignation                    shift and go to state 67
    call_func                      shift and go to state 68
    return_func                    shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    decision_statement             shift and go to state 72
    repetition_statement           shift and go to state 73
    expression                     shift and go to state 74
    id                             shift and go to state 75
    while_statement                shift and go to state 81
    for_statement                  shift and go to state 82
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 66

    (40) statements -> empty .

    R_B             reduce using rule 40 (statements -> empty .)


state 67

    (41) statement -> assignation .

    ID              reduce using rule 41 (statement -> assignation .)
    RETURN          reduce using rule 41 (statement -> assignation .)
    READ            reduce using rule 41 (statement -> assignation .)
    PRINT           reduce using rule 41 (statement -> assignation .)
    IF              reduce using rule 41 (statement -> assignation .)
    WHILE           reduce using rule 41 (statement -> assignation .)
    FOR             reduce using rule 41 (statement -> assignation .)
    L_P             reduce using rule 41 (statement -> assignation .)
    CTE_F           reduce using rule 41 (statement -> assignation .)
    CTE_I           reduce using rule 41 (statement -> assignation .)
    CTE_CHAR        reduce using rule 41 (statement -> assignation .)
    R_B             reduce using rule 41 (statement -> assignation .)


state 68

    (42) statement -> call_func .

    ID              reduce using rule 42 (statement -> call_func .)
    RETURN          reduce using rule 42 (statement -> call_func .)
    READ            reduce using rule 42 (statement -> call_func .)
    PRINT           reduce using rule 42 (statement -> call_func .)
    IF              reduce using rule 42 (statement -> call_func .)
    WHILE           reduce using rule 42 (statement -> call_func .)
    FOR             reduce using rule 42 (statement -> call_func .)
    L_P             reduce using rule 42 (statement -> call_func .)
    CTE_F           reduce using rule 42 (statement -> call_func .)
    CTE_I           reduce using rule 42 (statement -> call_func .)
    CTE_CHAR        reduce using rule 42 (statement -> call_func .)
    R_B             reduce using rule 42 (statement -> call_func .)


state 69

    (43) statement -> return_func .

    ID              reduce using rule 43 (statement -> return_func .)
    RETURN          reduce using rule 43 (statement -> return_func .)
    READ            reduce using rule 43 (statement -> return_func .)
    PRINT           reduce using rule 43 (statement -> return_func .)
    IF              reduce using rule 43 (statement -> return_func .)
    WHILE           reduce using rule 43 (statement -> return_func .)
    FOR             reduce using rule 43 (statement -> return_func .)
    L_P             reduce using rule 43 (statement -> return_func .)
    CTE_F           reduce using rule 43 (statement -> return_func .)
    CTE_I           reduce using rule 43 (statement -> return_func .)
    CTE_CHAR        reduce using rule 43 (statement -> return_func .)
    R_B             reduce using rule 43 (statement -> return_func .)


state 70

    (44) statement -> read .

    ID              reduce using rule 44 (statement -> read .)
    RETURN          reduce using rule 44 (statement -> read .)
    READ            reduce using rule 44 (statement -> read .)
    PRINT           reduce using rule 44 (statement -> read .)
    IF              reduce using rule 44 (statement -> read .)
    WHILE           reduce using rule 44 (statement -> read .)
    FOR             reduce using rule 44 (statement -> read .)
    L_P             reduce using rule 44 (statement -> read .)
    CTE_F           reduce using rule 44 (statement -> read .)
    CTE_I           reduce using rule 44 (statement -> read .)
    CTE_CHAR        reduce using rule 44 (statement -> read .)
    R_B             reduce using rule 44 (statement -> read .)


state 71

    (45) statement -> write .

    ID              reduce using rule 45 (statement -> write .)
    RETURN          reduce using rule 45 (statement -> write .)
    READ            reduce using rule 45 (statement -> write .)
    PRINT           reduce using rule 45 (statement -> write .)
    IF              reduce using rule 45 (statement -> write .)
    WHILE           reduce using rule 45 (statement -> write .)
    FOR             reduce using rule 45 (statement -> write .)
    L_P             reduce using rule 45 (statement -> write .)
    CTE_F           reduce using rule 45 (statement -> write .)
    CTE_I           reduce using rule 45 (statement -> write .)
    CTE_CHAR        reduce using rule 45 (statement -> write .)
    R_B             reduce using rule 45 (statement -> write .)


state 72

    (46) statement -> decision_statement .

    ID              reduce using rule 46 (statement -> decision_statement .)
    RETURN          reduce using rule 46 (statement -> decision_statement .)
    READ            reduce using rule 46 (statement -> decision_statement .)
    PRINT           reduce using rule 46 (statement -> decision_statement .)
    IF              reduce using rule 46 (statement -> decision_statement .)
    WHILE           reduce using rule 46 (statement -> decision_statement .)
    FOR             reduce using rule 46 (statement -> decision_statement .)
    L_P             reduce using rule 46 (statement -> decision_statement .)
    CTE_F           reduce using rule 46 (statement -> decision_statement .)
    CTE_I           reduce using rule 46 (statement -> decision_statement .)
    CTE_CHAR        reduce using rule 46 (statement -> decision_statement .)
    R_B             reduce using rule 46 (statement -> decision_statement .)


state 73

    (47) statement -> repetition_statement .

    ID              reduce using rule 47 (statement -> repetition_statement .)
    RETURN          reduce using rule 47 (statement -> repetition_statement .)
    READ            reduce using rule 47 (statement -> repetition_statement .)
    PRINT           reduce using rule 47 (statement -> repetition_statement .)
    IF              reduce using rule 47 (statement -> repetition_statement .)
    WHILE           reduce using rule 47 (statement -> repetition_statement .)
    FOR             reduce using rule 47 (statement -> repetition_statement .)
    L_P             reduce using rule 47 (statement -> repetition_statement .)
    CTE_F           reduce using rule 47 (statement -> repetition_statement .)
    CTE_I           reduce using rule 47 (statement -> repetition_statement .)
    CTE_CHAR        reduce using rule 47 (statement -> repetition_statement .)
    R_B             reduce using rule 47 (statement -> repetition_statement .)


state 74

    (48) statement -> expression .

    ID              reduce using rule 48 (statement -> expression .)
    RETURN          reduce using rule 48 (statement -> expression .)
    READ            reduce using rule 48 (statement -> expression .)
    PRINT           reduce using rule 48 (statement -> expression .)
    IF              reduce using rule 48 (statement -> expression .)
    WHILE           reduce using rule 48 (statement -> expression .)
    FOR             reduce using rule 48 (statement -> expression .)
    L_P             reduce using rule 48 (statement -> expression .)
    CTE_F           reduce using rule 48 (statement -> expression .)
    CTE_I           reduce using rule 48 (statement -> expression .)
    CTE_CHAR        reduce using rule 48 (statement -> expression .)
    R_B             reduce using rule 48 (statement -> expression .)


state 75

    (49) assignation -> id . id_quad EQUAL expression SEMICOLON
    (89) fact -> id . id_quad
    (95) id_quad -> .

    EQUAL           reduce using rule 95 (id_quad -> .)
    MULT            reduce using rule 95 (id_quad -> .)
    DIV             reduce using rule 95 (id_quad -> .)
    MOD             reduce using rule 95 (id_quad -> .)
    PLUS            reduce using rule 95 (id_quad -> .)
    MINUS           reduce using rule 95 (id_quad -> .)
    LESSTHAN        reduce using rule 95 (id_quad -> .)
    LESSTHANEQ      reduce using rule 95 (id_quad -> .)
    GREATERTHAN     reduce using rule 95 (id_quad -> .)
    GREATERTHANEQ   reduce using rule 95 (id_quad -> .)
    EQ              reduce using rule 95 (id_quad -> .)
    DIFERENT        reduce using rule 95 (id_quad -> .)
    AND             reduce using rule 95 (id_quad -> .)
    OR              reduce using rule 95 (id_quad -> .)
    ID              reduce using rule 95 (id_quad -> .)
    RETURN          reduce using rule 95 (id_quad -> .)
    READ            reduce using rule 95 (id_quad -> .)
    PRINT           reduce using rule 95 (id_quad -> .)
    IF              reduce using rule 95 (id_quad -> .)
    WHILE           reduce using rule 95 (id_quad -> .)
    FOR             reduce using rule 95 (id_quad -> .)
    L_P             reduce using rule 95 (id_quad -> .)
    CTE_F           reduce using rule 95 (id_quad -> .)
    CTE_I           reduce using rule 95 (id_quad -> .)
    CTE_CHAR        reduce using rule 95 (id_quad -> .)
    R_B             reduce using rule 95 (id_quad -> .)

    id_quad                        shift and go to state 101

state 76

    (57) call_func -> ID . call_func_era L_P args R_P SEMICOLON
    (22) id -> ID . id1
    (58) call_func_exp -> ID . call_func_era L_P args R_P
    (59) call_func_era -> .
    (23) id1 -> . L_SB expression R_SB id2
    (24) id1 -> . empty
    (123) empty -> .

  ! reduce/reduce conflict for L_P resolved using rule 59 (call_func_era -> .)
    L_P             reduce using rule 59 (call_func_era -> .)
    L_SB            shift and go to state 104
    EQUAL           reduce using rule 123 (empty -> .)
    MULT            reduce using rule 123 (empty -> .)
    DIV             reduce using rule 123 (empty -> .)
    MOD             reduce using rule 123 (empty -> .)
    PLUS            reduce using rule 123 (empty -> .)
    MINUS           reduce using rule 123 (empty -> .)
    LESSTHAN        reduce using rule 123 (empty -> .)
    LESSTHANEQ      reduce using rule 123 (empty -> .)
    GREATERTHAN     reduce using rule 123 (empty -> .)
    GREATERTHANEQ   reduce using rule 123 (empty -> .)
    EQ              reduce using rule 123 (empty -> .)
    DIFERENT        reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    READ            reduce using rule 123 (empty -> .)
    PRINT           reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    CTE_F           reduce using rule 123 (empty -> .)
    CTE_I           reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    R_B             reduce using rule 123 (empty -> .)

  ! L_P             [ reduce using rule 123 (empty -> .) ]

    call_func_era                  shift and go to state 102
    id1                            shift and go to state 103
    empty                          shift and go to state 105

state 77

    (60) return_func -> RETURN . L_P expression R_P SEMICOLON

    L_P             shift and go to state 106


state 78

    (61) read -> READ . L_P read_args R_P SEMICOLON

    L_P             shift and go to state 107


state 79

    (65) write -> PRINT . L_P write_args R_P SEMICOLON

    L_P             shift and go to state 108


state 80

    (71) decision_statement -> IF . L_P expression R_P exp_type L_B statements R_B decision_statement1

    L_P             shift and go to state 109


state 81

    (76) repetition_statement -> while_statement .

    ID              reduce using rule 76 (repetition_statement -> while_statement .)
    RETURN          reduce using rule 76 (repetition_statement -> while_statement .)
    READ            reduce using rule 76 (repetition_statement -> while_statement .)
    PRINT           reduce using rule 76 (repetition_statement -> while_statement .)
    IF              reduce using rule 76 (repetition_statement -> while_statement .)
    WHILE           reduce using rule 76 (repetition_statement -> while_statement .)
    FOR             reduce using rule 76 (repetition_statement -> while_statement .)
    L_P             reduce using rule 76 (repetition_statement -> while_statement .)
    CTE_F           reduce using rule 76 (repetition_statement -> while_statement .)
    CTE_I           reduce using rule 76 (repetition_statement -> while_statement .)
    CTE_CHAR        reduce using rule 76 (repetition_statement -> while_statement .)
    R_B             reduce using rule 76 (repetition_statement -> while_statement .)


state 82

    (77) repetition_statement -> for_statement .

    ID              reduce using rule 77 (repetition_statement -> for_statement .)
    RETURN          reduce using rule 77 (repetition_statement -> for_statement .)
    READ            reduce using rule 77 (repetition_statement -> for_statement .)
    PRINT           reduce using rule 77 (repetition_statement -> for_statement .)
    IF              reduce using rule 77 (repetition_statement -> for_statement .)
    WHILE           reduce using rule 77 (repetition_statement -> for_statement .)
    FOR             reduce using rule 77 (repetition_statement -> for_statement .)
    L_P             reduce using rule 77 (repetition_statement -> for_statement .)
    CTE_F           reduce using rule 77 (repetition_statement -> for_statement .)
    CTE_I           reduce using rule 77 (repetition_statement -> for_statement .)
    CTE_CHAR        reduce using rule 77 (repetition_statement -> for_statement .)
    R_B             reduce using rule 77 (repetition_statement -> for_statement .)


state 83

    (83) expression -> texp . generate_quad op1
    (88) generate_quad -> .

    OR              reduce using rule 88 (generate_quad -> .)
    ID              reduce using rule 88 (generate_quad -> .)
    RETURN          reduce using rule 88 (generate_quad -> .)
    READ            reduce using rule 88 (generate_quad -> .)
    PRINT           reduce using rule 88 (generate_quad -> .)
    IF              reduce using rule 88 (generate_quad -> .)
    WHILE           reduce using rule 88 (generate_quad -> .)
    FOR             reduce using rule 88 (generate_quad -> .)
    L_P             reduce using rule 88 (generate_quad -> .)
    CTE_F           reduce using rule 88 (generate_quad -> .)
    CTE_I           reduce using rule 88 (generate_quad -> .)
    CTE_CHAR        reduce using rule 88 (generate_quad -> .)
    R_B             reduce using rule 88 (generate_quad -> .)
    R_P             reduce using rule 88 (generate_quad -> .)
    R_SB            reduce using rule 88 (generate_quad -> .)
    COMA            reduce using rule 88 (generate_quad -> .)
    SEMICOLON       reduce using rule 88 (generate_quad -> .)
    TO              reduce using rule 88 (generate_quad -> .)
    DO              reduce using rule 88 (generate_quad -> .)

    generate_quad                  shift and go to state 110

state 84

    (81) while_statement -> WHILE . L_P breadcrumb expression R_P exp_type do_statement

    L_P             shift and go to state 111


state 85

    (78) for_statement -> FOR . id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (22) id -> . ID id1

    ID              shift and go to state 113

    id                             shift and go to state 112

state 86

    (84) texp -> gexp . generate_quad op2
    (88) generate_quad -> .

    AND             reduce using rule 88 (generate_quad -> .)
    OR              reduce using rule 88 (generate_quad -> .)
    ID              reduce using rule 88 (generate_quad -> .)
    RETURN          reduce using rule 88 (generate_quad -> .)
    READ            reduce using rule 88 (generate_quad -> .)
    PRINT           reduce using rule 88 (generate_quad -> .)
    IF              reduce using rule 88 (generate_quad -> .)
    WHILE           reduce using rule 88 (generate_quad -> .)
    FOR             reduce using rule 88 (generate_quad -> .)
    L_P             reduce using rule 88 (generate_quad -> .)
    CTE_F           reduce using rule 88 (generate_quad -> .)
    CTE_I           reduce using rule 88 (generate_quad -> .)
    CTE_CHAR        reduce using rule 88 (generate_quad -> .)
    R_B             reduce using rule 88 (generate_quad -> .)
    R_P             reduce using rule 88 (generate_quad -> .)
    R_SB            reduce using rule 88 (generate_quad -> .)
    COMA            reduce using rule 88 (generate_quad -> .)
    SEMICOLON       reduce using rule 88 (generate_quad -> .)
    TO              reduce using rule 88 (generate_quad -> .)
    DO              reduce using rule 88 (generate_quad -> .)

    generate_quad                  shift and go to state 114

state 87

    (85) gexp -> mexp . generate_quad op3aux
    (88) generate_quad -> .

    LESSTHAN        reduce using rule 88 (generate_quad -> .)
    LESSTHANEQ      reduce using rule 88 (generate_quad -> .)
    GREATERTHAN     reduce using rule 88 (generate_quad -> .)
    GREATERTHANEQ   reduce using rule 88 (generate_quad -> .)
    EQ              reduce using rule 88 (generate_quad -> .)
    DIFERENT        reduce using rule 88 (generate_quad -> .)
    AND             reduce using rule 88 (generate_quad -> .)
    OR              reduce using rule 88 (generate_quad -> .)
    ID              reduce using rule 88 (generate_quad -> .)
    RETURN          reduce using rule 88 (generate_quad -> .)
    READ            reduce using rule 88 (generate_quad -> .)
    PRINT           reduce using rule 88 (generate_quad -> .)
    IF              reduce using rule 88 (generate_quad -> .)
    WHILE           reduce using rule 88 (generate_quad -> .)
    FOR             reduce using rule 88 (generate_quad -> .)
    L_P             reduce using rule 88 (generate_quad -> .)
    CTE_F           reduce using rule 88 (generate_quad -> .)
    CTE_I           reduce using rule 88 (generate_quad -> .)
    CTE_CHAR        reduce using rule 88 (generate_quad -> .)
    R_B             reduce using rule 88 (generate_quad -> .)
    R_P             reduce using rule 88 (generate_quad -> .)
    R_SB            reduce using rule 88 (generate_quad -> .)
    COMA            reduce using rule 88 (generate_quad -> .)
    SEMICOLON       reduce using rule 88 (generate_quad -> .)
    TO              reduce using rule 88 (generate_quad -> .)
    DO              reduce using rule 88 (generate_quad -> .)

    generate_quad                  shift and go to state 115

state 88

    (86) mexp -> term . generate_quad op4aux
    (88) generate_quad -> .

    PLUS            reduce using rule 88 (generate_quad -> .)
    MINUS           reduce using rule 88 (generate_quad -> .)
    LESSTHAN        reduce using rule 88 (generate_quad -> .)
    LESSTHANEQ      reduce using rule 88 (generate_quad -> .)
    GREATERTHAN     reduce using rule 88 (generate_quad -> .)
    GREATERTHANEQ   reduce using rule 88 (generate_quad -> .)
    EQ              reduce using rule 88 (generate_quad -> .)
    DIFERENT        reduce using rule 88 (generate_quad -> .)
    AND             reduce using rule 88 (generate_quad -> .)
    OR              reduce using rule 88 (generate_quad -> .)
    ID              reduce using rule 88 (generate_quad -> .)
    RETURN          reduce using rule 88 (generate_quad -> .)
    READ            reduce using rule 88 (generate_quad -> .)
    PRINT           reduce using rule 88 (generate_quad -> .)
    IF              reduce using rule 88 (generate_quad -> .)
    WHILE           reduce using rule 88 (generate_quad -> .)
    FOR             reduce using rule 88 (generate_quad -> .)
    L_P             reduce using rule 88 (generate_quad -> .)
    CTE_F           reduce using rule 88 (generate_quad -> .)
    CTE_I           reduce using rule 88 (generate_quad -> .)
    CTE_CHAR        reduce using rule 88 (generate_quad -> .)
    R_B             reduce using rule 88 (generate_quad -> .)
    R_P             reduce using rule 88 (generate_quad -> .)
    R_SB            reduce using rule 88 (generate_quad -> .)
    COMA            reduce using rule 88 (generate_quad -> .)
    SEMICOLON       reduce using rule 88 (generate_quad -> .)
    TO              reduce using rule 88 (generate_quad -> .)
    DO              reduce using rule 88 (generate_quad -> .)

    generate_quad                  shift and go to state 116

state 89

    (87) term -> fact . generate_quad op5aux
    (88) generate_quad -> .

    MULT            reduce using rule 88 (generate_quad -> .)
    DIV             reduce using rule 88 (generate_quad -> .)
    MOD             reduce using rule 88 (generate_quad -> .)
    PLUS            reduce using rule 88 (generate_quad -> .)
    MINUS           reduce using rule 88 (generate_quad -> .)
    LESSTHAN        reduce using rule 88 (generate_quad -> .)
    LESSTHANEQ      reduce using rule 88 (generate_quad -> .)
    GREATERTHAN     reduce using rule 88 (generate_quad -> .)
    GREATERTHANEQ   reduce using rule 88 (generate_quad -> .)
    EQ              reduce using rule 88 (generate_quad -> .)
    DIFERENT        reduce using rule 88 (generate_quad -> .)
    AND             reduce using rule 88 (generate_quad -> .)
    OR              reduce using rule 88 (generate_quad -> .)
    ID              reduce using rule 88 (generate_quad -> .)
    RETURN          reduce using rule 88 (generate_quad -> .)
    READ            reduce using rule 88 (generate_quad -> .)
    PRINT           reduce using rule 88 (generate_quad -> .)
    IF              reduce using rule 88 (generate_quad -> .)
    WHILE           reduce using rule 88 (generate_quad -> .)
    FOR             reduce using rule 88 (generate_quad -> .)
    L_P             reduce using rule 88 (generate_quad -> .)
    CTE_F           reduce using rule 88 (generate_quad -> .)
    CTE_I           reduce using rule 88 (generate_quad -> .)
    CTE_CHAR        reduce using rule 88 (generate_quad -> .)
    R_B             reduce using rule 88 (generate_quad -> .)
    R_P             reduce using rule 88 (generate_quad -> .)
    R_SB            reduce using rule 88 (generate_quad -> .)
    COMA            reduce using rule 88 (generate_quad -> .)
    SEMICOLON       reduce using rule 88 (generate_quad -> .)
    TO              reduce using rule 88 (generate_quad -> .)
    DO              reduce using rule 88 (generate_quad -> .)

    generate_quad                  shift and go to state 117

state 90

    (90) fact -> call_func_exp .

    MULT            reduce using rule 90 (fact -> call_func_exp .)
    DIV             reduce using rule 90 (fact -> call_func_exp .)
    MOD             reduce using rule 90 (fact -> call_func_exp .)
    PLUS            reduce using rule 90 (fact -> call_func_exp .)
    MINUS           reduce using rule 90 (fact -> call_func_exp .)
    LESSTHAN        reduce using rule 90 (fact -> call_func_exp .)
    LESSTHANEQ      reduce using rule 90 (fact -> call_func_exp .)
    GREATERTHAN     reduce using rule 90 (fact -> call_func_exp .)
    GREATERTHANEQ   reduce using rule 90 (fact -> call_func_exp .)
    EQ              reduce using rule 90 (fact -> call_func_exp .)
    DIFERENT        reduce using rule 90 (fact -> call_func_exp .)
    AND             reduce using rule 90 (fact -> call_func_exp .)
    OR              reduce using rule 90 (fact -> call_func_exp .)
    ID              reduce using rule 90 (fact -> call_func_exp .)
    RETURN          reduce using rule 90 (fact -> call_func_exp .)
    READ            reduce using rule 90 (fact -> call_func_exp .)
    PRINT           reduce using rule 90 (fact -> call_func_exp .)
    IF              reduce using rule 90 (fact -> call_func_exp .)
    WHILE           reduce using rule 90 (fact -> call_func_exp .)
    FOR             reduce using rule 90 (fact -> call_func_exp .)
    L_P             reduce using rule 90 (fact -> call_func_exp .)
    CTE_F           reduce using rule 90 (fact -> call_func_exp .)
    CTE_I           reduce using rule 90 (fact -> call_func_exp .)
    CTE_CHAR        reduce using rule 90 (fact -> call_func_exp .)
    R_B             reduce using rule 90 (fact -> call_func_exp .)
    R_P             reduce using rule 90 (fact -> call_func_exp .)
    R_SB            reduce using rule 90 (fact -> call_func_exp .)
    COMA            reduce using rule 90 (fact -> call_func_exp .)
    SEMICOLON       reduce using rule 90 (fact -> call_func_exp .)
    TO              reduce using rule 90 (fact -> call_func_exp .)
    DO              reduce using rule 90 (fact -> call_func_exp .)


state 91

    (92) fact -> cte .

    MULT            reduce using rule 92 (fact -> cte .)
    DIV             reduce using rule 92 (fact -> cte .)
    MOD             reduce using rule 92 (fact -> cte .)
    PLUS            reduce using rule 92 (fact -> cte .)
    MINUS           reduce using rule 92 (fact -> cte .)
    LESSTHAN        reduce using rule 92 (fact -> cte .)
    LESSTHANEQ      reduce using rule 92 (fact -> cte .)
    GREATERTHAN     reduce using rule 92 (fact -> cte .)
    GREATERTHANEQ   reduce using rule 92 (fact -> cte .)
    EQ              reduce using rule 92 (fact -> cte .)
    DIFERENT        reduce using rule 92 (fact -> cte .)
    AND             reduce using rule 92 (fact -> cte .)
    OR              reduce using rule 92 (fact -> cte .)
    ID              reduce using rule 92 (fact -> cte .)
    RETURN          reduce using rule 92 (fact -> cte .)
    READ            reduce using rule 92 (fact -> cte .)
    PRINT           reduce using rule 92 (fact -> cte .)
    IF              reduce using rule 92 (fact -> cte .)
    WHILE           reduce using rule 92 (fact -> cte .)
    FOR             reduce using rule 92 (fact -> cte .)
    L_P             reduce using rule 92 (fact -> cte .)
    CTE_F           reduce using rule 92 (fact -> cte .)
    CTE_I           reduce using rule 92 (fact -> cte .)
    CTE_CHAR        reduce using rule 92 (fact -> cte .)
    R_B             reduce using rule 92 (fact -> cte .)
    R_P             reduce using rule 92 (fact -> cte .)
    R_SB            reduce using rule 92 (fact -> cte .)
    COMA            reduce using rule 92 (fact -> cte .)
    SEMICOLON       reduce using rule 92 (fact -> cte .)
    TO              reduce using rule 92 (fact -> cte .)
    DO              reduce using rule 92 (fact -> cte .)


state 92

    (96) cte -> CTE_F . add_cte_float
    (100) add_cte_float -> .

    MULT            reduce using rule 100 (add_cte_float -> .)
    DIV             reduce using rule 100 (add_cte_float -> .)
    MOD             reduce using rule 100 (add_cte_float -> .)
    PLUS            reduce using rule 100 (add_cte_float -> .)
    MINUS           reduce using rule 100 (add_cte_float -> .)
    LESSTHAN        reduce using rule 100 (add_cte_float -> .)
    LESSTHANEQ      reduce using rule 100 (add_cte_float -> .)
    GREATERTHAN     reduce using rule 100 (add_cte_float -> .)
    GREATERTHANEQ   reduce using rule 100 (add_cte_float -> .)
    EQ              reduce using rule 100 (add_cte_float -> .)
    DIFERENT        reduce using rule 100 (add_cte_float -> .)
    AND             reduce using rule 100 (add_cte_float -> .)
    OR              reduce using rule 100 (add_cte_float -> .)
    ID              reduce using rule 100 (add_cte_float -> .)
    RETURN          reduce using rule 100 (add_cte_float -> .)
    READ            reduce using rule 100 (add_cte_float -> .)
    PRINT           reduce using rule 100 (add_cte_float -> .)
    IF              reduce using rule 100 (add_cte_float -> .)
    WHILE           reduce using rule 100 (add_cte_float -> .)
    FOR             reduce using rule 100 (add_cte_float -> .)
    L_P             reduce using rule 100 (add_cte_float -> .)
    CTE_F           reduce using rule 100 (add_cte_float -> .)
    CTE_I           reduce using rule 100 (add_cte_float -> .)
    CTE_CHAR        reduce using rule 100 (add_cte_float -> .)
    R_B             reduce using rule 100 (add_cte_float -> .)
    R_P             reduce using rule 100 (add_cte_float -> .)
    R_SB            reduce using rule 100 (add_cte_float -> .)
    COMA            reduce using rule 100 (add_cte_float -> .)
    SEMICOLON       reduce using rule 100 (add_cte_float -> .)
    TO              reduce using rule 100 (add_cte_float -> .)
    DO              reduce using rule 100 (add_cte_float -> .)

    add_cte_float                  shift and go to state 118

state 93

    (97) cte -> CTE_I . add_cte_int
    (99) add_cte_int -> .

    MULT            reduce using rule 99 (add_cte_int -> .)
    DIV             reduce using rule 99 (add_cte_int -> .)
    MOD             reduce using rule 99 (add_cte_int -> .)
    PLUS            reduce using rule 99 (add_cte_int -> .)
    MINUS           reduce using rule 99 (add_cte_int -> .)
    LESSTHAN        reduce using rule 99 (add_cte_int -> .)
    LESSTHANEQ      reduce using rule 99 (add_cte_int -> .)
    GREATERTHAN     reduce using rule 99 (add_cte_int -> .)
    GREATERTHANEQ   reduce using rule 99 (add_cte_int -> .)
    EQ              reduce using rule 99 (add_cte_int -> .)
    DIFERENT        reduce using rule 99 (add_cte_int -> .)
    AND             reduce using rule 99 (add_cte_int -> .)
    OR              reduce using rule 99 (add_cte_int -> .)
    ID              reduce using rule 99 (add_cte_int -> .)
    RETURN          reduce using rule 99 (add_cte_int -> .)
    READ            reduce using rule 99 (add_cte_int -> .)
    PRINT           reduce using rule 99 (add_cte_int -> .)
    IF              reduce using rule 99 (add_cte_int -> .)
    WHILE           reduce using rule 99 (add_cte_int -> .)
    FOR             reduce using rule 99 (add_cte_int -> .)
    L_P             reduce using rule 99 (add_cte_int -> .)
    CTE_F           reduce using rule 99 (add_cte_int -> .)
    CTE_I           reduce using rule 99 (add_cte_int -> .)
    CTE_CHAR        reduce using rule 99 (add_cte_int -> .)
    R_B             reduce using rule 99 (add_cte_int -> .)
    R_P             reduce using rule 99 (add_cte_int -> .)
    R_SB            reduce using rule 99 (add_cte_int -> .)
    COMA            reduce using rule 99 (add_cte_int -> .)
    SEMICOLON       reduce using rule 99 (add_cte_int -> .)
    TO              reduce using rule 99 (add_cte_int -> .)
    DO              reduce using rule 99 (add_cte_int -> .)

    add_cte_int                    shift and go to state 119

state 94

    (98) cte -> CTE_CHAR . add_cte_char
    (101) add_cte_char -> .

    MULT            reduce using rule 101 (add_cte_char -> .)
    DIV             reduce using rule 101 (add_cte_char -> .)
    MOD             reduce using rule 101 (add_cte_char -> .)
    PLUS            reduce using rule 101 (add_cte_char -> .)
    MINUS           reduce using rule 101 (add_cte_char -> .)
    LESSTHAN        reduce using rule 101 (add_cte_char -> .)
    LESSTHANEQ      reduce using rule 101 (add_cte_char -> .)
    GREATERTHAN     reduce using rule 101 (add_cte_char -> .)
    GREATERTHANEQ   reduce using rule 101 (add_cte_char -> .)
    EQ              reduce using rule 101 (add_cte_char -> .)
    DIFERENT        reduce using rule 101 (add_cte_char -> .)
    AND             reduce using rule 101 (add_cte_char -> .)
    OR              reduce using rule 101 (add_cte_char -> .)
    ID              reduce using rule 101 (add_cte_char -> .)
    RETURN          reduce using rule 101 (add_cte_char -> .)
    READ            reduce using rule 101 (add_cte_char -> .)
    PRINT           reduce using rule 101 (add_cte_char -> .)
    IF              reduce using rule 101 (add_cte_char -> .)
    WHILE           reduce using rule 101 (add_cte_char -> .)
    FOR             reduce using rule 101 (add_cte_char -> .)
    L_P             reduce using rule 101 (add_cte_char -> .)
    CTE_F           reduce using rule 101 (add_cte_char -> .)
    CTE_I           reduce using rule 101 (add_cte_char -> .)
    CTE_CHAR        reduce using rule 101 (add_cte_char -> .)
    R_B             reduce using rule 101 (add_cte_char -> .)
    R_P             reduce using rule 101 (add_cte_char -> .)
    R_SB            reduce using rule 101 (add_cte_char -> .)
    COMA            reduce using rule 101 (add_cte_char -> .)
    SEMICOLON       reduce using rule 101 (add_cte_char -> .)
    TO              reduce using rule 101 (add_cte_char -> .)
    DO              reduce using rule 101 (add_cte_char -> .)

    add_cte_char                   shift and go to state 120

state 95

    (37) params1 -> COMA params .

    R_P             reduce using rule 37 (params1 -> COMA params .)


state 96

    (28) function -> FUNC func_type ID register_func L_P params R_P add_params . var_declaration start_func L_B statements R_B
    (9) var_declaration -> . VAR var1
    (10) var_declaration -> . empty
    (123) empty -> .

    VAR             shift and go to state 7
    L_B             reduce using rule 123 (empty -> .)

    var_declaration                shift and go to state 121
    empty                          shift and go to state 8

state 97

    (20) dec_id2 -> L_SB CTE_I R_SB .

    COMA            reduce using rule 20 (dec_id2 -> L_SB CTE_I R_SB .)
    SEMICOLON       reduce using rule 20 (dec_id2 -> L_SB CTE_I R_SB .)
    R_P             reduce using rule 20 (dec_id2 -> L_SB CTE_I R_SB .)


state 98

    (91) fact -> L_P add_fake . expression R_P remove_fake
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 122
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 99

    (2) main -> MAIN L_P params R_P var_declaration L_B statements R_B .

    $end            reduce using rule 2 (main -> MAIN L_P params R_P var_declaration L_B statements R_B .)


state 100

    (39) statements -> statement statements .

    R_B             reduce using rule 39 (statements -> statement statements .)


state 101

    (49) assignation -> id id_quad . EQUAL expression SEMICOLON
    (89) fact -> id id_quad .

    EQUAL           shift and go to state 125
    MULT            reduce using rule 89 (fact -> id id_quad .)
    DIV             reduce using rule 89 (fact -> id id_quad .)
    MOD             reduce using rule 89 (fact -> id id_quad .)
    PLUS            reduce using rule 89 (fact -> id id_quad .)
    MINUS           reduce using rule 89 (fact -> id id_quad .)
    LESSTHAN        reduce using rule 89 (fact -> id id_quad .)
    LESSTHANEQ      reduce using rule 89 (fact -> id id_quad .)
    GREATERTHAN     reduce using rule 89 (fact -> id id_quad .)
    GREATERTHANEQ   reduce using rule 89 (fact -> id id_quad .)
    EQ              reduce using rule 89 (fact -> id id_quad .)
    DIFERENT        reduce using rule 89 (fact -> id id_quad .)
    AND             reduce using rule 89 (fact -> id id_quad .)
    OR              reduce using rule 89 (fact -> id id_quad .)
    ID              reduce using rule 89 (fact -> id id_quad .)
    RETURN          reduce using rule 89 (fact -> id id_quad .)
    READ            reduce using rule 89 (fact -> id id_quad .)
    PRINT           reduce using rule 89 (fact -> id id_quad .)
    IF              reduce using rule 89 (fact -> id id_quad .)
    WHILE           reduce using rule 89 (fact -> id id_quad .)
    FOR             reduce using rule 89 (fact -> id id_quad .)
    L_P             reduce using rule 89 (fact -> id id_quad .)
    CTE_F           reduce using rule 89 (fact -> id id_quad .)
    CTE_I           reduce using rule 89 (fact -> id id_quad .)
    CTE_CHAR        reduce using rule 89 (fact -> id id_quad .)
    R_B             reduce using rule 89 (fact -> id id_quad .)


state 102

    (57) call_func -> ID call_func_era . L_P args R_P SEMICOLON
    (58) call_func_exp -> ID call_func_era . L_P args R_P

    L_P             shift and go to state 126


state 103

    (22) id -> ID id1 .

    EQUAL           reduce using rule 22 (id -> ID id1 .)
    MULT            reduce using rule 22 (id -> ID id1 .)
    DIV             reduce using rule 22 (id -> ID id1 .)
    MOD             reduce using rule 22 (id -> ID id1 .)
    PLUS            reduce using rule 22 (id -> ID id1 .)
    MINUS           reduce using rule 22 (id -> ID id1 .)
    LESSTHAN        reduce using rule 22 (id -> ID id1 .)
    LESSTHANEQ      reduce using rule 22 (id -> ID id1 .)
    GREATERTHAN     reduce using rule 22 (id -> ID id1 .)
    GREATERTHANEQ   reduce using rule 22 (id -> ID id1 .)
    EQ              reduce using rule 22 (id -> ID id1 .)
    DIFERENT        reduce using rule 22 (id -> ID id1 .)
    AND             reduce using rule 22 (id -> ID id1 .)
    OR              reduce using rule 22 (id -> ID id1 .)
    ID              reduce using rule 22 (id -> ID id1 .)
    RETURN          reduce using rule 22 (id -> ID id1 .)
    READ            reduce using rule 22 (id -> ID id1 .)
    PRINT           reduce using rule 22 (id -> ID id1 .)
    IF              reduce using rule 22 (id -> ID id1 .)
    WHILE           reduce using rule 22 (id -> ID id1 .)
    FOR             reduce using rule 22 (id -> ID id1 .)
    L_P             reduce using rule 22 (id -> ID id1 .)
    CTE_F           reduce using rule 22 (id -> ID id1 .)
    CTE_I           reduce using rule 22 (id -> ID id1 .)
    CTE_CHAR        reduce using rule 22 (id -> ID id1 .)
    R_B             reduce using rule 22 (id -> ID id1 .)
    R_P             reduce using rule 22 (id -> ID id1 .)
    R_SB            reduce using rule 22 (id -> ID id1 .)
    COMA            reduce using rule 22 (id -> ID id1 .)
    SEMICOLON       reduce using rule 22 (id -> ID id1 .)
    TO              reduce using rule 22 (id -> ID id1 .)
    DO              reduce using rule 22 (id -> ID id1 .)


state 104

    (23) id1 -> L_SB . expression R_SB id2
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 127
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 105

    (24) id1 -> empty .

    EQUAL           reduce using rule 24 (id1 -> empty .)
    MULT            reduce using rule 24 (id1 -> empty .)
    DIV             reduce using rule 24 (id1 -> empty .)
    MOD             reduce using rule 24 (id1 -> empty .)
    PLUS            reduce using rule 24 (id1 -> empty .)
    MINUS           reduce using rule 24 (id1 -> empty .)
    LESSTHAN        reduce using rule 24 (id1 -> empty .)
    LESSTHANEQ      reduce using rule 24 (id1 -> empty .)
    GREATERTHAN     reduce using rule 24 (id1 -> empty .)
    GREATERTHANEQ   reduce using rule 24 (id1 -> empty .)
    EQ              reduce using rule 24 (id1 -> empty .)
    DIFERENT        reduce using rule 24 (id1 -> empty .)
    AND             reduce using rule 24 (id1 -> empty .)
    OR              reduce using rule 24 (id1 -> empty .)
    ID              reduce using rule 24 (id1 -> empty .)
    RETURN          reduce using rule 24 (id1 -> empty .)
    READ            reduce using rule 24 (id1 -> empty .)
    PRINT           reduce using rule 24 (id1 -> empty .)
    IF              reduce using rule 24 (id1 -> empty .)
    WHILE           reduce using rule 24 (id1 -> empty .)
    FOR             reduce using rule 24 (id1 -> empty .)
    L_P             reduce using rule 24 (id1 -> empty .)
    CTE_F           reduce using rule 24 (id1 -> empty .)
    CTE_I           reduce using rule 24 (id1 -> empty .)
    CTE_CHAR        reduce using rule 24 (id1 -> empty .)
    R_B             reduce using rule 24 (id1 -> empty .)
    R_P             reduce using rule 24 (id1 -> empty .)
    R_SB            reduce using rule 24 (id1 -> empty .)
    COMA            reduce using rule 24 (id1 -> empty .)
    SEMICOLON       reduce using rule 24 (id1 -> empty .)
    TO              reduce using rule 24 (id1 -> empty .)
    DO              reduce using rule 24 (id1 -> empty .)


state 106

    (60) return_func -> RETURN L_P . expression R_P SEMICOLON
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 128
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 107

    (61) read -> READ L_P . read_args R_P SEMICOLON
    (62) read_args -> . expression read_args1
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    read_args                      shift and go to state 129
    expression                     shift and go to state 130
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 108

    (65) write -> PRINT L_P . write_args R_P SEMICOLON
    (66) write_args -> . write_args2 write_args1
    (69) write_args2 -> . expression
    (70) write_args2 -> . CTE_STRING
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    CTE_STRING      shift and go to state 134
    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    write_args                     shift and go to state 131
    write_args2                    shift and go to state 132
    expression                     shift and go to state 133
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 109

    (71) decision_statement -> IF L_P . expression R_P exp_type L_B statements R_B decision_statement1
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 135
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 110

    (83) expression -> texp generate_quad . op1
    (102) op1 -> . OR expression
    (103) op1 -> . empty
    (123) empty -> .

    OR              shift and go to state 137
    ID              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    READ            reduce using rule 123 (empty -> .)
    PRINT           reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    L_P             reduce using rule 123 (empty -> .)
    CTE_F           reduce using rule 123 (empty -> .)
    CTE_I           reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    R_B             reduce using rule 123 (empty -> .)
    R_P             reduce using rule 123 (empty -> .)
    R_SB            reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    TO              reduce using rule 123 (empty -> .)
    DO              reduce using rule 123 (empty -> .)

    op1                            shift and go to state 136
    empty                          shift and go to state 138

state 111

    (81) while_statement -> WHILE L_P . breadcrumb expression R_P exp_type do_statement
    (80) breadcrumb -> .

    L_P             reduce using rule 80 (breadcrumb -> .)
    ID              reduce using rule 80 (breadcrumb -> .)
    CTE_F           reduce using rule 80 (breadcrumb -> .)
    CTE_I           reduce using rule 80 (breadcrumb -> .)
    CTE_CHAR        reduce using rule 80 (breadcrumb -> .)

    breadcrumb                     shift and go to state 139

state 112

    (78) for_statement -> FOR id . id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (95) id_quad -> .

    EQUAL           reduce using rule 95 (id_quad -> .)

    id_quad                        shift and go to state 140

state 113

    (22) id -> ID . id1
    (23) id1 -> . L_SB expression R_SB id2
    (24) id1 -> . empty
    (123) empty -> .

    L_SB            shift and go to state 104
    EQUAL           reduce using rule 123 (empty -> .)

    id1                            shift and go to state 103
    empty                          shift and go to state 105

state 114

    (84) texp -> gexp generate_quad . op2
    (104) op2 -> . AND texp
    (105) op2 -> . empty
    (123) empty -> .

    AND             shift and go to state 142
    OR              reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    READ            reduce using rule 123 (empty -> .)
    PRINT           reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    L_P             reduce using rule 123 (empty -> .)
    CTE_F           reduce using rule 123 (empty -> .)
    CTE_I           reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    R_B             reduce using rule 123 (empty -> .)
    R_P             reduce using rule 123 (empty -> .)
    R_SB            reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    TO              reduce using rule 123 (empty -> .)
    DO              reduce using rule 123 (empty -> .)

    op2                            shift and go to state 141
    empty                          shift and go to state 143

state 115

    (85) gexp -> mexp generate_quad . op3aux
    (112) op3aux -> . op3 mexp
    (113) op3aux -> . empty
    (106) op3 -> . LESSTHAN
    (107) op3 -> . LESSTHANEQ
    (108) op3 -> . GREATERTHAN
    (109) op3 -> . GREATERTHANEQ
    (110) op3 -> . EQ
    (111) op3 -> . DIFERENT
    (123) empty -> .

    LESSTHAN        shift and go to state 147
    LESSTHANEQ      shift and go to state 148
    GREATERTHAN     shift and go to state 149
    GREATERTHANEQ   shift and go to state 150
    EQ              shift and go to state 151
    DIFERENT        shift and go to state 152
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    READ            reduce using rule 123 (empty -> .)
    PRINT           reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    L_P             reduce using rule 123 (empty -> .)
    CTE_F           reduce using rule 123 (empty -> .)
    CTE_I           reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    R_B             reduce using rule 123 (empty -> .)
    R_P             reduce using rule 123 (empty -> .)
    R_SB            reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    TO              reduce using rule 123 (empty -> .)
    DO              reduce using rule 123 (empty -> .)

    op3aux                         shift and go to state 144
    op3                            shift and go to state 145
    empty                          shift and go to state 146

state 116

    (86) mexp -> term generate_quad . op4aux
    (116) op4aux -> . op4 mexp
    (117) op4aux -> . empty
    (114) op4 -> . PLUS
    (115) op4 -> . MINUS
    (123) empty -> .

    PLUS            shift and go to state 156
    MINUS           shift and go to state 157
    LESSTHAN        reduce using rule 123 (empty -> .)
    LESSTHANEQ      reduce using rule 123 (empty -> .)
    GREATERTHAN     reduce using rule 123 (empty -> .)
    GREATERTHANEQ   reduce using rule 123 (empty -> .)
    EQ              reduce using rule 123 (empty -> .)
    DIFERENT        reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    READ            reduce using rule 123 (empty -> .)
    PRINT           reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    L_P             reduce using rule 123 (empty -> .)
    CTE_F           reduce using rule 123 (empty -> .)
    CTE_I           reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    R_B             reduce using rule 123 (empty -> .)
    R_P             reduce using rule 123 (empty -> .)
    R_SB            reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    TO              reduce using rule 123 (empty -> .)
    DO              reduce using rule 123 (empty -> .)

    op4aux                         shift and go to state 153
    op4                            shift and go to state 154
    empty                          shift and go to state 155

state 117

    (87) term -> fact generate_quad . op5aux
    (121) op5aux -> . op5 term
    (122) op5aux -> . empty
    (118) op5 -> . MULT
    (119) op5 -> . DIV
    (120) op5 -> . MOD
    (123) empty -> .

    MULT            shift and go to state 161
    DIV             shift and go to state 162
    MOD             shift and go to state 163
    PLUS            reduce using rule 123 (empty -> .)
    MINUS           reduce using rule 123 (empty -> .)
    LESSTHAN        reduce using rule 123 (empty -> .)
    LESSTHANEQ      reduce using rule 123 (empty -> .)
    GREATERTHAN     reduce using rule 123 (empty -> .)
    GREATERTHANEQ   reduce using rule 123 (empty -> .)
    EQ              reduce using rule 123 (empty -> .)
    DIFERENT        reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    READ            reduce using rule 123 (empty -> .)
    PRINT           reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    L_P             reduce using rule 123 (empty -> .)
    CTE_F           reduce using rule 123 (empty -> .)
    CTE_I           reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    R_B             reduce using rule 123 (empty -> .)
    R_P             reduce using rule 123 (empty -> .)
    R_SB            reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    TO              reduce using rule 123 (empty -> .)
    DO              reduce using rule 123 (empty -> .)

    op5aux                         shift and go to state 158
    op5                            shift and go to state 159
    empty                          shift and go to state 160

state 118

    (96) cte -> CTE_F add_cte_float .

    MULT            reduce using rule 96 (cte -> CTE_F add_cte_float .)
    DIV             reduce using rule 96 (cte -> CTE_F add_cte_float .)
    MOD             reduce using rule 96 (cte -> CTE_F add_cte_float .)
    PLUS            reduce using rule 96 (cte -> CTE_F add_cte_float .)
    MINUS           reduce using rule 96 (cte -> CTE_F add_cte_float .)
    LESSTHAN        reduce using rule 96 (cte -> CTE_F add_cte_float .)
    LESSTHANEQ      reduce using rule 96 (cte -> CTE_F add_cte_float .)
    GREATERTHAN     reduce using rule 96 (cte -> CTE_F add_cte_float .)
    GREATERTHANEQ   reduce using rule 96 (cte -> CTE_F add_cte_float .)
    EQ              reduce using rule 96 (cte -> CTE_F add_cte_float .)
    DIFERENT        reduce using rule 96 (cte -> CTE_F add_cte_float .)
    AND             reduce using rule 96 (cte -> CTE_F add_cte_float .)
    OR              reduce using rule 96 (cte -> CTE_F add_cte_float .)
    ID              reduce using rule 96 (cte -> CTE_F add_cte_float .)
    RETURN          reduce using rule 96 (cte -> CTE_F add_cte_float .)
    READ            reduce using rule 96 (cte -> CTE_F add_cte_float .)
    PRINT           reduce using rule 96 (cte -> CTE_F add_cte_float .)
    IF              reduce using rule 96 (cte -> CTE_F add_cte_float .)
    WHILE           reduce using rule 96 (cte -> CTE_F add_cte_float .)
    FOR             reduce using rule 96 (cte -> CTE_F add_cte_float .)
    L_P             reduce using rule 96 (cte -> CTE_F add_cte_float .)
    CTE_F           reduce using rule 96 (cte -> CTE_F add_cte_float .)
    CTE_I           reduce using rule 96 (cte -> CTE_F add_cte_float .)
    CTE_CHAR        reduce using rule 96 (cte -> CTE_F add_cte_float .)
    R_B             reduce using rule 96 (cte -> CTE_F add_cte_float .)
    R_P             reduce using rule 96 (cte -> CTE_F add_cte_float .)
    R_SB            reduce using rule 96 (cte -> CTE_F add_cte_float .)
    COMA            reduce using rule 96 (cte -> CTE_F add_cte_float .)
    SEMICOLON       reduce using rule 96 (cte -> CTE_F add_cte_float .)
    TO              reduce using rule 96 (cte -> CTE_F add_cte_float .)
    DO              reduce using rule 96 (cte -> CTE_F add_cte_float .)


state 119

    (97) cte -> CTE_I add_cte_int .

    MULT            reduce using rule 97 (cte -> CTE_I add_cte_int .)
    DIV             reduce using rule 97 (cte -> CTE_I add_cte_int .)
    MOD             reduce using rule 97 (cte -> CTE_I add_cte_int .)
    PLUS            reduce using rule 97 (cte -> CTE_I add_cte_int .)
    MINUS           reduce using rule 97 (cte -> CTE_I add_cte_int .)
    LESSTHAN        reduce using rule 97 (cte -> CTE_I add_cte_int .)
    LESSTHANEQ      reduce using rule 97 (cte -> CTE_I add_cte_int .)
    GREATERTHAN     reduce using rule 97 (cte -> CTE_I add_cte_int .)
    GREATERTHANEQ   reduce using rule 97 (cte -> CTE_I add_cte_int .)
    EQ              reduce using rule 97 (cte -> CTE_I add_cte_int .)
    DIFERENT        reduce using rule 97 (cte -> CTE_I add_cte_int .)
    AND             reduce using rule 97 (cte -> CTE_I add_cte_int .)
    OR              reduce using rule 97 (cte -> CTE_I add_cte_int .)
    ID              reduce using rule 97 (cte -> CTE_I add_cte_int .)
    RETURN          reduce using rule 97 (cte -> CTE_I add_cte_int .)
    READ            reduce using rule 97 (cte -> CTE_I add_cte_int .)
    PRINT           reduce using rule 97 (cte -> CTE_I add_cte_int .)
    IF              reduce using rule 97 (cte -> CTE_I add_cte_int .)
    WHILE           reduce using rule 97 (cte -> CTE_I add_cte_int .)
    FOR             reduce using rule 97 (cte -> CTE_I add_cte_int .)
    L_P             reduce using rule 97 (cte -> CTE_I add_cte_int .)
    CTE_F           reduce using rule 97 (cte -> CTE_I add_cte_int .)
    CTE_I           reduce using rule 97 (cte -> CTE_I add_cte_int .)
    CTE_CHAR        reduce using rule 97 (cte -> CTE_I add_cte_int .)
    R_B             reduce using rule 97 (cte -> CTE_I add_cte_int .)
    R_P             reduce using rule 97 (cte -> CTE_I add_cte_int .)
    R_SB            reduce using rule 97 (cte -> CTE_I add_cte_int .)
    COMA            reduce using rule 97 (cte -> CTE_I add_cte_int .)
    SEMICOLON       reduce using rule 97 (cte -> CTE_I add_cte_int .)
    TO              reduce using rule 97 (cte -> CTE_I add_cte_int .)
    DO              reduce using rule 97 (cte -> CTE_I add_cte_int .)


state 120

    (98) cte -> CTE_CHAR add_cte_char .

    MULT            reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    DIV             reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    MOD             reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    PLUS            reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    MINUS           reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    LESSTHAN        reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    LESSTHANEQ      reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    GREATERTHAN     reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    GREATERTHANEQ   reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    EQ              reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    DIFERENT        reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    AND             reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    OR              reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    ID              reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    RETURN          reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    READ            reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    PRINT           reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    IF              reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    WHILE           reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    FOR             reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    L_P             reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    CTE_F           reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    CTE_I           reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    CTE_CHAR        reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    R_B             reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    R_P             reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    R_SB            reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    COMA            reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    SEMICOLON       reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    TO              reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)
    DO              reduce using rule 98 (cte -> CTE_CHAR add_cte_char .)


state 121

    (28) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration . start_func L_B statements R_B
    (31) start_func -> .

    L_B             reduce using rule 31 (start_func -> .)

    start_func                     shift and go to state 164

state 122

    (91) fact -> L_P add_fake expression . R_P remove_fake

    R_P             shift and go to state 165


state 123

    (89) fact -> id . id_quad
    (95) id_quad -> .

    MULT            reduce using rule 95 (id_quad -> .)
    DIV             reduce using rule 95 (id_quad -> .)
    MOD             reduce using rule 95 (id_quad -> .)
    PLUS            reduce using rule 95 (id_quad -> .)
    MINUS           reduce using rule 95 (id_quad -> .)
    LESSTHAN        reduce using rule 95 (id_quad -> .)
    LESSTHANEQ      reduce using rule 95 (id_quad -> .)
    GREATERTHAN     reduce using rule 95 (id_quad -> .)
    GREATERTHANEQ   reduce using rule 95 (id_quad -> .)
    EQ              reduce using rule 95 (id_quad -> .)
    DIFERENT        reduce using rule 95 (id_quad -> .)
    AND             reduce using rule 95 (id_quad -> .)
    OR              reduce using rule 95 (id_quad -> .)
    R_P             reduce using rule 95 (id_quad -> .)
    R_SB            reduce using rule 95 (id_quad -> .)
    COMA            reduce using rule 95 (id_quad -> .)
    SEMICOLON       reduce using rule 95 (id_quad -> .)
    ID              reduce using rule 95 (id_quad -> .)
    RETURN          reduce using rule 95 (id_quad -> .)
    READ            reduce using rule 95 (id_quad -> .)
    PRINT           reduce using rule 95 (id_quad -> .)
    IF              reduce using rule 95 (id_quad -> .)
    WHILE           reduce using rule 95 (id_quad -> .)
    FOR             reduce using rule 95 (id_quad -> .)
    L_P             reduce using rule 95 (id_quad -> .)
    CTE_F           reduce using rule 95 (id_quad -> .)
    CTE_I           reduce using rule 95 (id_quad -> .)
    CTE_CHAR        reduce using rule 95 (id_quad -> .)
    R_B             reduce using rule 95 (id_quad -> .)
    TO              reduce using rule 95 (id_quad -> .)
    DO              reduce using rule 95 (id_quad -> .)

    id_quad                        shift and go to state 166

state 124

    (22) id -> ID . id1
    (58) call_func_exp -> ID . call_func_era L_P args R_P
    (23) id1 -> . L_SB expression R_SB id2
    (24) id1 -> . empty
    (59) call_func_era -> .
    (123) empty -> .

  ! reduce/reduce conflict for L_P resolved using rule 59 (call_func_era -> .)
    L_SB            shift and go to state 104
    L_P             reduce using rule 59 (call_func_era -> .)
    MULT            reduce using rule 123 (empty -> .)
    DIV             reduce using rule 123 (empty -> .)
    MOD             reduce using rule 123 (empty -> .)
    PLUS            reduce using rule 123 (empty -> .)
    MINUS           reduce using rule 123 (empty -> .)
    LESSTHAN        reduce using rule 123 (empty -> .)
    LESSTHANEQ      reduce using rule 123 (empty -> .)
    GREATERTHAN     reduce using rule 123 (empty -> .)
    GREATERTHANEQ   reduce using rule 123 (empty -> .)
    EQ              reduce using rule 123 (empty -> .)
    DIFERENT        reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    R_P             reduce using rule 123 (empty -> .)
    R_SB            reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    READ            reduce using rule 123 (empty -> .)
    PRINT           reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    CTE_F           reduce using rule 123 (empty -> .)
    CTE_I           reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    R_B             reduce using rule 123 (empty -> .)
    TO              reduce using rule 123 (empty -> .)
    DO              reduce using rule 123 (empty -> .)

  ! L_P             [ reduce using rule 123 (empty -> .) ]

    id1                            shift and go to state 103
    call_func_era                  shift and go to state 167
    empty                          shift and go to state 105

state 125

    (49) assignation -> id id_quad EQUAL . expression SEMICOLON
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    id                             shift and go to state 123
    expression                     shift and go to state 168
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 126

    (57) call_func -> ID call_func_era L_P . args R_P SEMICOLON
    (58) call_func_exp -> ID call_func_era L_P . args R_P
    (50) args -> . args1
    (51) args -> . empty
    (52) args1 -> . expression param_check args2
    (123) empty -> .
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    R_P             reduce using rule 123 (empty -> .)
    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    args                           shift and go to state 169
    args1                          shift and go to state 170
    empty                          shift and go to state 171
    expression                     shift and go to state 172
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 127

    (23) id1 -> L_SB expression . R_SB id2

    R_SB            shift and go to state 173


state 128

    (60) return_func -> RETURN L_P expression . R_P SEMICOLON

    R_P             shift and go to state 174


state 129

    (61) read -> READ L_P read_args . R_P SEMICOLON

    R_P             shift and go to state 175


state 130

    (62) read_args -> expression . read_args1
    (63) read_args1 -> . COMA expression read_args1
    (64) read_args1 -> . empty
    (123) empty -> .

    COMA            shift and go to state 177
    R_P             reduce using rule 123 (empty -> .)

    read_args1                     shift and go to state 176
    empty                          shift and go to state 178

state 131

    (65) write -> PRINT L_P write_args . R_P SEMICOLON

    R_P             shift and go to state 179


state 132

    (66) write_args -> write_args2 . write_args1
    (67) write_args1 -> . COMA write_args2 write_args1
    (68) write_args1 -> . empty
    (123) empty -> .

    COMA            shift and go to state 181
    R_P             reduce using rule 123 (empty -> .)

    write_args1                    shift and go to state 180
    empty                          shift and go to state 182

state 133

    (69) write_args2 -> expression .

    COMA            reduce using rule 69 (write_args2 -> expression .)
    R_P             reduce using rule 69 (write_args2 -> expression .)


state 134

    (70) write_args2 -> CTE_STRING .

    COMA            reduce using rule 70 (write_args2 -> CTE_STRING .)
    R_P             reduce using rule 70 (write_args2 -> CTE_STRING .)


state 135

    (71) decision_statement -> IF L_P expression . R_P exp_type L_B statements R_B decision_statement1

    R_P             shift and go to state 183


state 136

    (83) expression -> texp generate_quad op1 .

    ID              reduce using rule 83 (expression -> texp generate_quad op1 .)
    RETURN          reduce using rule 83 (expression -> texp generate_quad op1 .)
    READ            reduce using rule 83 (expression -> texp generate_quad op1 .)
    PRINT           reduce using rule 83 (expression -> texp generate_quad op1 .)
    IF              reduce using rule 83 (expression -> texp generate_quad op1 .)
    WHILE           reduce using rule 83 (expression -> texp generate_quad op1 .)
    FOR             reduce using rule 83 (expression -> texp generate_quad op1 .)
    L_P             reduce using rule 83 (expression -> texp generate_quad op1 .)
    CTE_F           reduce using rule 83 (expression -> texp generate_quad op1 .)
    CTE_I           reduce using rule 83 (expression -> texp generate_quad op1 .)
    CTE_CHAR        reduce using rule 83 (expression -> texp generate_quad op1 .)
    R_B             reduce using rule 83 (expression -> texp generate_quad op1 .)
    R_P             reduce using rule 83 (expression -> texp generate_quad op1 .)
    R_SB            reduce using rule 83 (expression -> texp generate_quad op1 .)
    COMA            reduce using rule 83 (expression -> texp generate_quad op1 .)
    SEMICOLON       reduce using rule 83 (expression -> texp generate_quad op1 .)
    TO              reduce using rule 83 (expression -> texp generate_quad op1 .)
    DO              reduce using rule 83 (expression -> texp generate_quad op1 .)


state 137

    (102) op1 -> OR . expression
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 184
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 138

    (103) op1 -> empty .

    ID              reduce using rule 103 (op1 -> empty .)
    RETURN          reduce using rule 103 (op1 -> empty .)
    READ            reduce using rule 103 (op1 -> empty .)
    PRINT           reduce using rule 103 (op1 -> empty .)
    IF              reduce using rule 103 (op1 -> empty .)
    WHILE           reduce using rule 103 (op1 -> empty .)
    FOR             reduce using rule 103 (op1 -> empty .)
    L_P             reduce using rule 103 (op1 -> empty .)
    CTE_F           reduce using rule 103 (op1 -> empty .)
    CTE_I           reduce using rule 103 (op1 -> empty .)
    CTE_CHAR        reduce using rule 103 (op1 -> empty .)
    R_B             reduce using rule 103 (op1 -> empty .)
    R_P             reduce using rule 103 (op1 -> empty .)
    R_SB            reduce using rule 103 (op1 -> empty .)
    COMA            reduce using rule 103 (op1 -> empty .)
    SEMICOLON       reduce using rule 103 (op1 -> empty .)
    TO              reduce using rule 103 (op1 -> empty .)
    DO              reduce using rule 103 (op1 -> empty .)


state 139

    (81) while_statement -> WHILE L_P breadcrumb . expression R_P exp_type do_statement
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 185
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 140

    (78) for_statement -> FOR id id_quad . EQUAL expression for_id TO breadcrumb expression exp_type do_statement

    EQUAL           shift and go to state 186


state 141

    (84) texp -> gexp generate_quad op2 .

    OR              reduce using rule 84 (texp -> gexp generate_quad op2 .)
    ID              reduce using rule 84 (texp -> gexp generate_quad op2 .)
    RETURN          reduce using rule 84 (texp -> gexp generate_quad op2 .)
    READ            reduce using rule 84 (texp -> gexp generate_quad op2 .)
    PRINT           reduce using rule 84 (texp -> gexp generate_quad op2 .)
    IF              reduce using rule 84 (texp -> gexp generate_quad op2 .)
    WHILE           reduce using rule 84 (texp -> gexp generate_quad op2 .)
    FOR             reduce using rule 84 (texp -> gexp generate_quad op2 .)
    L_P             reduce using rule 84 (texp -> gexp generate_quad op2 .)
    CTE_F           reduce using rule 84 (texp -> gexp generate_quad op2 .)
    CTE_I           reduce using rule 84 (texp -> gexp generate_quad op2 .)
    CTE_CHAR        reduce using rule 84 (texp -> gexp generate_quad op2 .)
    R_B             reduce using rule 84 (texp -> gexp generate_quad op2 .)
    R_P             reduce using rule 84 (texp -> gexp generate_quad op2 .)
    R_SB            reduce using rule 84 (texp -> gexp generate_quad op2 .)
    COMA            reduce using rule 84 (texp -> gexp generate_quad op2 .)
    SEMICOLON       reduce using rule 84 (texp -> gexp generate_quad op2 .)
    TO              reduce using rule 84 (texp -> gexp generate_quad op2 .)
    DO              reduce using rule 84 (texp -> gexp generate_quad op2 .)


state 142

    (104) op2 -> AND . texp
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    texp                           shift and go to state 187
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 143

    (105) op2 -> empty .

    OR              reduce using rule 105 (op2 -> empty .)
    ID              reduce using rule 105 (op2 -> empty .)
    RETURN          reduce using rule 105 (op2 -> empty .)
    READ            reduce using rule 105 (op2 -> empty .)
    PRINT           reduce using rule 105 (op2 -> empty .)
    IF              reduce using rule 105 (op2 -> empty .)
    WHILE           reduce using rule 105 (op2 -> empty .)
    FOR             reduce using rule 105 (op2 -> empty .)
    L_P             reduce using rule 105 (op2 -> empty .)
    CTE_F           reduce using rule 105 (op2 -> empty .)
    CTE_I           reduce using rule 105 (op2 -> empty .)
    CTE_CHAR        reduce using rule 105 (op2 -> empty .)
    R_B             reduce using rule 105 (op2 -> empty .)
    R_P             reduce using rule 105 (op2 -> empty .)
    R_SB            reduce using rule 105 (op2 -> empty .)
    COMA            reduce using rule 105 (op2 -> empty .)
    SEMICOLON       reduce using rule 105 (op2 -> empty .)
    TO              reduce using rule 105 (op2 -> empty .)
    DO              reduce using rule 105 (op2 -> empty .)


state 144

    (85) gexp -> mexp generate_quad op3aux .

    AND             reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    OR              reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    ID              reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    RETURN          reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    READ            reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    PRINT           reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    IF              reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    WHILE           reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    FOR             reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    L_P             reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    CTE_F           reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    CTE_I           reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    CTE_CHAR        reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    R_B             reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    R_P             reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    R_SB            reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    COMA            reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    SEMICOLON       reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    TO              reduce using rule 85 (gexp -> mexp generate_quad op3aux .)
    DO              reduce using rule 85 (gexp -> mexp generate_quad op3aux .)


state 145

    (112) op3aux -> op3 . mexp
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    mexp                           shift and go to state 188
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 146

    (113) op3aux -> empty .

    AND             reduce using rule 113 (op3aux -> empty .)
    OR              reduce using rule 113 (op3aux -> empty .)
    ID              reduce using rule 113 (op3aux -> empty .)
    RETURN          reduce using rule 113 (op3aux -> empty .)
    READ            reduce using rule 113 (op3aux -> empty .)
    PRINT           reduce using rule 113 (op3aux -> empty .)
    IF              reduce using rule 113 (op3aux -> empty .)
    WHILE           reduce using rule 113 (op3aux -> empty .)
    FOR             reduce using rule 113 (op3aux -> empty .)
    L_P             reduce using rule 113 (op3aux -> empty .)
    CTE_F           reduce using rule 113 (op3aux -> empty .)
    CTE_I           reduce using rule 113 (op3aux -> empty .)
    CTE_CHAR        reduce using rule 113 (op3aux -> empty .)
    R_B             reduce using rule 113 (op3aux -> empty .)
    R_P             reduce using rule 113 (op3aux -> empty .)
    R_SB            reduce using rule 113 (op3aux -> empty .)
    COMA            reduce using rule 113 (op3aux -> empty .)
    SEMICOLON       reduce using rule 113 (op3aux -> empty .)
    TO              reduce using rule 113 (op3aux -> empty .)
    DO              reduce using rule 113 (op3aux -> empty .)


state 147

    (106) op3 -> LESSTHAN .

    L_P             reduce using rule 106 (op3 -> LESSTHAN .)
    ID              reduce using rule 106 (op3 -> LESSTHAN .)
    CTE_F           reduce using rule 106 (op3 -> LESSTHAN .)
    CTE_I           reduce using rule 106 (op3 -> LESSTHAN .)
    CTE_CHAR        reduce using rule 106 (op3 -> LESSTHAN .)


state 148

    (107) op3 -> LESSTHANEQ .

    L_P             reduce using rule 107 (op3 -> LESSTHANEQ .)
    ID              reduce using rule 107 (op3 -> LESSTHANEQ .)
    CTE_F           reduce using rule 107 (op3 -> LESSTHANEQ .)
    CTE_I           reduce using rule 107 (op3 -> LESSTHANEQ .)
    CTE_CHAR        reduce using rule 107 (op3 -> LESSTHANEQ .)


state 149

    (108) op3 -> GREATERTHAN .

    L_P             reduce using rule 108 (op3 -> GREATERTHAN .)
    ID              reduce using rule 108 (op3 -> GREATERTHAN .)
    CTE_F           reduce using rule 108 (op3 -> GREATERTHAN .)
    CTE_I           reduce using rule 108 (op3 -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 108 (op3 -> GREATERTHAN .)


state 150

    (109) op3 -> GREATERTHANEQ .

    L_P             reduce using rule 109 (op3 -> GREATERTHANEQ .)
    ID              reduce using rule 109 (op3 -> GREATERTHANEQ .)
    CTE_F           reduce using rule 109 (op3 -> GREATERTHANEQ .)
    CTE_I           reduce using rule 109 (op3 -> GREATERTHANEQ .)
    CTE_CHAR        reduce using rule 109 (op3 -> GREATERTHANEQ .)


state 151

    (110) op3 -> EQ .

    L_P             reduce using rule 110 (op3 -> EQ .)
    ID              reduce using rule 110 (op3 -> EQ .)
    CTE_F           reduce using rule 110 (op3 -> EQ .)
    CTE_I           reduce using rule 110 (op3 -> EQ .)
    CTE_CHAR        reduce using rule 110 (op3 -> EQ .)


state 152

    (111) op3 -> DIFERENT .

    L_P             reduce using rule 111 (op3 -> DIFERENT .)
    ID              reduce using rule 111 (op3 -> DIFERENT .)
    CTE_F           reduce using rule 111 (op3 -> DIFERENT .)
    CTE_I           reduce using rule 111 (op3 -> DIFERENT .)
    CTE_CHAR        reduce using rule 111 (op3 -> DIFERENT .)


state 153

    (86) mexp -> term generate_quad op4aux .

    LESSTHAN        reduce using rule 86 (mexp -> term generate_quad op4aux .)
    LESSTHANEQ      reduce using rule 86 (mexp -> term generate_quad op4aux .)
    GREATERTHAN     reduce using rule 86 (mexp -> term generate_quad op4aux .)
    GREATERTHANEQ   reduce using rule 86 (mexp -> term generate_quad op4aux .)
    EQ              reduce using rule 86 (mexp -> term generate_quad op4aux .)
    DIFERENT        reduce using rule 86 (mexp -> term generate_quad op4aux .)
    AND             reduce using rule 86 (mexp -> term generate_quad op4aux .)
    OR              reduce using rule 86 (mexp -> term generate_quad op4aux .)
    ID              reduce using rule 86 (mexp -> term generate_quad op4aux .)
    RETURN          reduce using rule 86 (mexp -> term generate_quad op4aux .)
    READ            reduce using rule 86 (mexp -> term generate_quad op4aux .)
    PRINT           reduce using rule 86 (mexp -> term generate_quad op4aux .)
    IF              reduce using rule 86 (mexp -> term generate_quad op4aux .)
    WHILE           reduce using rule 86 (mexp -> term generate_quad op4aux .)
    FOR             reduce using rule 86 (mexp -> term generate_quad op4aux .)
    L_P             reduce using rule 86 (mexp -> term generate_quad op4aux .)
    CTE_F           reduce using rule 86 (mexp -> term generate_quad op4aux .)
    CTE_I           reduce using rule 86 (mexp -> term generate_quad op4aux .)
    CTE_CHAR        reduce using rule 86 (mexp -> term generate_quad op4aux .)
    R_B             reduce using rule 86 (mexp -> term generate_quad op4aux .)
    R_P             reduce using rule 86 (mexp -> term generate_quad op4aux .)
    R_SB            reduce using rule 86 (mexp -> term generate_quad op4aux .)
    COMA            reduce using rule 86 (mexp -> term generate_quad op4aux .)
    SEMICOLON       reduce using rule 86 (mexp -> term generate_quad op4aux .)
    TO              reduce using rule 86 (mexp -> term generate_quad op4aux .)
    DO              reduce using rule 86 (mexp -> term generate_quad op4aux .)


state 154

    (116) op4aux -> op4 . mexp
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    mexp                           shift and go to state 189
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 155

    (117) op4aux -> empty .

    LESSTHAN        reduce using rule 117 (op4aux -> empty .)
    LESSTHANEQ      reduce using rule 117 (op4aux -> empty .)
    GREATERTHAN     reduce using rule 117 (op4aux -> empty .)
    GREATERTHANEQ   reduce using rule 117 (op4aux -> empty .)
    EQ              reduce using rule 117 (op4aux -> empty .)
    DIFERENT        reduce using rule 117 (op4aux -> empty .)
    AND             reduce using rule 117 (op4aux -> empty .)
    OR              reduce using rule 117 (op4aux -> empty .)
    ID              reduce using rule 117 (op4aux -> empty .)
    RETURN          reduce using rule 117 (op4aux -> empty .)
    READ            reduce using rule 117 (op4aux -> empty .)
    PRINT           reduce using rule 117 (op4aux -> empty .)
    IF              reduce using rule 117 (op4aux -> empty .)
    WHILE           reduce using rule 117 (op4aux -> empty .)
    FOR             reduce using rule 117 (op4aux -> empty .)
    L_P             reduce using rule 117 (op4aux -> empty .)
    CTE_F           reduce using rule 117 (op4aux -> empty .)
    CTE_I           reduce using rule 117 (op4aux -> empty .)
    CTE_CHAR        reduce using rule 117 (op4aux -> empty .)
    R_B             reduce using rule 117 (op4aux -> empty .)
    R_P             reduce using rule 117 (op4aux -> empty .)
    R_SB            reduce using rule 117 (op4aux -> empty .)
    COMA            reduce using rule 117 (op4aux -> empty .)
    SEMICOLON       reduce using rule 117 (op4aux -> empty .)
    TO              reduce using rule 117 (op4aux -> empty .)
    DO              reduce using rule 117 (op4aux -> empty .)


state 156

    (114) op4 -> PLUS .

    L_P             reduce using rule 114 (op4 -> PLUS .)
    ID              reduce using rule 114 (op4 -> PLUS .)
    CTE_F           reduce using rule 114 (op4 -> PLUS .)
    CTE_I           reduce using rule 114 (op4 -> PLUS .)
    CTE_CHAR        reduce using rule 114 (op4 -> PLUS .)


state 157

    (115) op4 -> MINUS .

    L_P             reduce using rule 115 (op4 -> MINUS .)
    ID              reduce using rule 115 (op4 -> MINUS .)
    CTE_F           reduce using rule 115 (op4 -> MINUS .)
    CTE_I           reduce using rule 115 (op4 -> MINUS .)
    CTE_CHAR        reduce using rule 115 (op4 -> MINUS .)


state 158

    (87) term -> fact generate_quad op5aux .

    PLUS            reduce using rule 87 (term -> fact generate_quad op5aux .)
    MINUS           reduce using rule 87 (term -> fact generate_quad op5aux .)
    LESSTHAN        reduce using rule 87 (term -> fact generate_quad op5aux .)
    LESSTHANEQ      reduce using rule 87 (term -> fact generate_quad op5aux .)
    GREATERTHAN     reduce using rule 87 (term -> fact generate_quad op5aux .)
    GREATERTHANEQ   reduce using rule 87 (term -> fact generate_quad op5aux .)
    EQ              reduce using rule 87 (term -> fact generate_quad op5aux .)
    DIFERENT        reduce using rule 87 (term -> fact generate_quad op5aux .)
    AND             reduce using rule 87 (term -> fact generate_quad op5aux .)
    OR              reduce using rule 87 (term -> fact generate_quad op5aux .)
    ID              reduce using rule 87 (term -> fact generate_quad op5aux .)
    RETURN          reduce using rule 87 (term -> fact generate_quad op5aux .)
    READ            reduce using rule 87 (term -> fact generate_quad op5aux .)
    PRINT           reduce using rule 87 (term -> fact generate_quad op5aux .)
    IF              reduce using rule 87 (term -> fact generate_quad op5aux .)
    WHILE           reduce using rule 87 (term -> fact generate_quad op5aux .)
    FOR             reduce using rule 87 (term -> fact generate_quad op5aux .)
    L_P             reduce using rule 87 (term -> fact generate_quad op5aux .)
    CTE_F           reduce using rule 87 (term -> fact generate_quad op5aux .)
    CTE_I           reduce using rule 87 (term -> fact generate_quad op5aux .)
    CTE_CHAR        reduce using rule 87 (term -> fact generate_quad op5aux .)
    R_B             reduce using rule 87 (term -> fact generate_quad op5aux .)
    R_P             reduce using rule 87 (term -> fact generate_quad op5aux .)
    R_SB            reduce using rule 87 (term -> fact generate_quad op5aux .)
    COMA            reduce using rule 87 (term -> fact generate_quad op5aux .)
    SEMICOLON       reduce using rule 87 (term -> fact generate_quad op5aux .)
    TO              reduce using rule 87 (term -> fact generate_quad op5aux .)
    DO              reduce using rule 87 (term -> fact generate_quad op5aux .)


state 159

    (121) op5aux -> op5 . term
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    term                           shift and go to state 190
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 160

    (122) op5aux -> empty .

    PLUS            reduce using rule 122 (op5aux -> empty .)
    MINUS           reduce using rule 122 (op5aux -> empty .)
    LESSTHAN        reduce using rule 122 (op5aux -> empty .)
    LESSTHANEQ      reduce using rule 122 (op5aux -> empty .)
    GREATERTHAN     reduce using rule 122 (op5aux -> empty .)
    GREATERTHANEQ   reduce using rule 122 (op5aux -> empty .)
    EQ              reduce using rule 122 (op5aux -> empty .)
    DIFERENT        reduce using rule 122 (op5aux -> empty .)
    AND             reduce using rule 122 (op5aux -> empty .)
    OR              reduce using rule 122 (op5aux -> empty .)
    ID              reduce using rule 122 (op5aux -> empty .)
    RETURN          reduce using rule 122 (op5aux -> empty .)
    READ            reduce using rule 122 (op5aux -> empty .)
    PRINT           reduce using rule 122 (op5aux -> empty .)
    IF              reduce using rule 122 (op5aux -> empty .)
    WHILE           reduce using rule 122 (op5aux -> empty .)
    FOR             reduce using rule 122 (op5aux -> empty .)
    L_P             reduce using rule 122 (op5aux -> empty .)
    CTE_F           reduce using rule 122 (op5aux -> empty .)
    CTE_I           reduce using rule 122 (op5aux -> empty .)
    CTE_CHAR        reduce using rule 122 (op5aux -> empty .)
    R_B             reduce using rule 122 (op5aux -> empty .)
    R_P             reduce using rule 122 (op5aux -> empty .)
    R_SB            reduce using rule 122 (op5aux -> empty .)
    COMA            reduce using rule 122 (op5aux -> empty .)
    SEMICOLON       reduce using rule 122 (op5aux -> empty .)
    TO              reduce using rule 122 (op5aux -> empty .)
    DO              reduce using rule 122 (op5aux -> empty .)


state 161

    (118) op5 -> MULT .

    L_P             reduce using rule 118 (op5 -> MULT .)
    ID              reduce using rule 118 (op5 -> MULT .)
    CTE_F           reduce using rule 118 (op5 -> MULT .)
    CTE_I           reduce using rule 118 (op5 -> MULT .)
    CTE_CHAR        reduce using rule 118 (op5 -> MULT .)


state 162

    (119) op5 -> DIV .

    L_P             reduce using rule 119 (op5 -> DIV .)
    ID              reduce using rule 119 (op5 -> DIV .)
    CTE_F           reduce using rule 119 (op5 -> DIV .)
    CTE_I           reduce using rule 119 (op5 -> DIV .)
    CTE_CHAR        reduce using rule 119 (op5 -> DIV .)


state 163

    (120) op5 -> MOD .

    L_P             reduce using rule 120 (op5 -> MOD .)
    ID              reduce using rule 120 (op5 -> MOD .)
    CTE_F           reduce using rule 120 (op5 -> MOD .)
    CTE_I           reduce using rule 120 (op5 -> MOD .)
    CTE_CHAR        reduce using rule 120 (op5 -> MOD .)


state 164

    (28) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func . L_B statements R_B

    L_B             shift and go to state 191


state 165

    (91) fact -> L_P add_fake expression R_P . remove_fake
    (94) remove_fake -> .

    MULT            reduce using rule 94 (remove_fake -> .)
    DIV             reduce using rule 94 (remove_fake -> .)
    MOD             reduce using rule 94 (remove_fake -> .)
    PLUS            reduce using rule 94 (remove_fake -> .)
    MINUS           reduce using rule 94 (remove_fake -> .)
    LESSTHAN        reduce using rule 94 (remove_fake -> .)
    LESSTHANEQ      reduce using rule 94 (remove_fake -> .)
    GREATERTHAN     reduce using rule 94 (remove_fake -> .)
    GREATERTHANEQ   reduce using rule 94 (remove_fake -> .)
    EQ              reduce using rule 94 (remove_fake -> .)
    DIFERENT        reduce using rule 94 (remove_fake -> .)
    AND             reduce using rule 94 (remove_fake -> .)
    OR              reduce using rule 94 (remove_fake -> .)
    ID              reduce using rule 94 (remove_fake -> .)
    RETURN          reduce using rule 94 (remove_fake -> .)
    READ            reduce using rule 94 (remove_fake -> .)
    PRINT           reduce using rule 94 (remove_fake -> .)
    IF              reduce using rule 94 (remove_fake -> .)
    WHILE           reduce using rule 94 (remove_fake -> .)
    FOR             reduce using rule 94 (remove_fake -> .)
    L_P             reduce using rule 94 (remove_fake -> .)
    CTE_F           reduce using rule 94 (remove_fake -> .)
    CTE_I           reduce using rule 94 (remove_fake -> .)
    CTE_CHAR        reduce using rule 94 (remove_fake -> .)
    R_B             reduce using rule 94 (remove_fake -> .)
    R_P             reduce using rule 94 (remove_fake -> .)
    R_SB            reduce using rule 94 (remove_fake -> .)
    COMA            reduce using rule 94 (remove_fake -> .)
    SEMICOLON       reduce using rule 94 (remove_fake -> .)
    TO              reduce using rule 94 (remove_fake -> .)
    DO              reduce using rule 94 (remove_fake -> .)

    remove_fake                    shift and go to state 192

state 166

    (89) fact -> id id_quad .

    MULT            reduce using rule 89 (fact -> id id_quad .)
    DIV             reduce using rule 89 (fact -> id id_quad .)
    MOD             reduce using rule 89 (fact -> id id_quad .)
    PLUS            reduce using rule 89 (fact -> id id_quad .)
    MINUS           reduce using rule 89 (fact -> id id_quad .)
    LESSTHAN        reduce using rule 89 (fact -> id id_quad .)
    LESSTHANEQ      reduce using rule 89 (fact -> id id_quad .)
    GREATERTHAN     reduce using rule 89 (fact -> id id_quad .)
    GREATERTHANEQ   reduce using rule 89 (fact -> id id_quad .)
    EQ              reduce using rule 89 (fact -> id id_quad .)
    DIFERENT        reduce using rule 89 (fact -> id id_quad .)
    AND             reduce using rule 89 (fact -> id id_quad .)
    OR              reduce using rule 89 (fact -> id id_quad .)
    R_P             reduce using rule 89 (fact -> id id_quad .)
    R_SB            reduce using rule 89 (fact -> id id_quad .)
    COMA            reduce using rule 89 (fact -> id id_quad .)
    SEMICOLON       reduce using rule 89 (fact -> id id_quad .)
    ID              reduce using rule 89 (fact -> id id_quad .)
    RETURN          reduce using rule 89 (fact -> id id_quad .)
    READ            reduce using rule 89 (fact -> id id_quad .)
    PRINT           reduce using rule 89 (fact -> id id_quad .)
    IF              reduce using rule 89 (fact -> id id_quad .)
    WHILE           reduce using rule 89 (fact -> id id_quad .)
    FOR             reduce using rule 89 (fact -> id id_quad .)
    L_P             reduce using rule 89 (fact -> id id_quad .)
    CTE_F           reduce using rule 89 (fact -> id id_quad .)
    CTE_I           reduce using rule 89 (fact -> id id_quad .)
    CTE_CHAR        reduce using rule 89 (fact -> id id_quad .)
    R_B             reduce using rule 89 (fact -> id id_quad .)
    TO              reduce using rule 89 (fact -> id id_quad .)
    DO              reduce using rule 89 (fact -> id id_quad .)


state 167

    (58) call_func_exp -> ID call_func_era . L_P args R_P

    L_P             shift and go to state 193


state 168

    (49) assignation -> id id_quad EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 194


state 169

    (57) call_func -> ID call_func_era L_P args . R_P SEMICOLON
    (58) call_func_exp -> ID call_func_era L_P args . R_P

    R_P             shift and go to state 195


state 170

    (50) args -> args1 .

    R_P             reduce using rule 50 (args -> args1 .)


state 171

    (51) args -> empty .

    R_P             reduce using rule 51 (args -> empty .)


state 172

    (52) args1 -> expression . param_check args2
    (53) param_check -> .

    COMA            reduce using rule 53 (param_check -> .)
    R_P             reduce using rule 53 (param_check -> .)

    param_check                    shift and go to state 196

state 173

    (23) id1 -> L_SB expression R_SB . id2
    (25) id2 -> . L_SB expression R_SB
    (26) id2 -> . empty
    (123) empty -> .

    L_SB            shift and go to state 197
    EQUAL           reduce using rule 123 (empty -> .)
    MULT            reduce using rule 123 (empty -> .)
    DIV             reduce using rule 123 (empty -> .)
    MOD             reduce using rule 123 (empty -> .)
    PLUS            reduce using rule 123 (empty -> .)
    MINUS           reduce using rule 123 (empty -> .)
    LESSTHAN        reduce using rule 123 (empty -> .)
    LESSTHANEQ      reduce using rule 123 (empty -> .)
    GREATERTHAN     reduce using rule 123 (empty -> .)
    GREATERTHANEQ   reduce using rule 123 (empty -> .)
    EQ              reduce using rule 123 (empty -> .)
    DIFERENT        reduce using rule 123 (empty -> .)
    AND             reduce using rule 123 (empty -> .)
    OR              reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    READ            reduce using rule 123 (empty -> .)
    PRINT           reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    L_P             reduce using rule 123 (empty -> .)
    CTE_F           reduce using rule 123 (empty -> .)
    CTE_I           reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    R_B             reduce using rule 123 (empty -> .)
    R_P             reduce using rule 123 (empty -> .)
    R_SB            reduce using rule 123 (empty -> .)
    COMA            reduce using rule 123 (empty -> .)
    SEMICOLON       reduce using rule 123 (empty -> .)
    TO              reduce using rule 123 (empty -> .)
    DO              reduce using rule 123 (empty -> .)

    id2                            shift and go to state 198
    empty                          shift and go to state 199

state 174

    (60) return_func -> RETURN L_P expression R_P . SEMICOLON

    SEMICOLON       shift and go to state 200


state 175

    (61) read -> READ L_P read_args R_P . SEMICOLON

    SEMICOLON       shift and go to state 201


state 176

    (62) read_args -> expression read_args1 .

    R_P             reduce using rule 62 (read_args -> expression read_args1 .)


state 177

    (63) read_args1 -> COMA . expression read_args1
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 202
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 178

    (64) read_args1 -> empty .

    R_P             reduce using rule 64 (read_args1 -> empty .)


state 179

    (65) write -> PRINT L_P write_args R_P . SEMICOLON

    SEMICOLON       shift and go to state 203


state 180

    (66) write_args -> write_args2 write_args1 .

    R_P             reduce using rule 66 (write_args -> write_args2 write_args1 .)


state 181

    (67) write_args1 -> COMA . write_args2 write_args1
    (69) write_args2 -> . expression
    (70) write_args2 -> . CTE_STRING
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    CTE_STRING      shift and go to state 134
    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    write_args2                    shift and go to state 204
    expression                     shift and go to state 133
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 182

    (68) write_args1 -> empty .

    R_P             reduce using rule 68 (write_args1 -> empty .)


state 183

    (71) decision_statement -> IF L_P expression R_P . exp_type L_B statements R_B decision_statement1
    (74) exp_type -> .

    L_B             reduce using rule 74 (exp_type -> .)

    exp_type                       shift and go to state 205

state 184

    (102) op1 -> OR expression .

    ID              reduce using rule 102 (op1 -> OR expression .)
    RETURN          reduce using rule 102 (op1 -> OR expression .)
    READ            reduce using rule 102 (op1 -> OR expression .)
    PRINT           reduce using rule 102 (op1 -> OR expression .)
    IF              reduce using rule 102 (op1 -> OR expression .)
    WHILE           reduce using rule 102 (op1 -> OR expression .)
    FOR             reduce using rule 102 (op1 -> OR expression .)
    L_P             reduce using rule 102 (op1 -> OR expression .)
    CTE_F           reduce using rule 102 (op1 -> OR expression .)
    CTE_I           reduce using rule 102 (op1 -> OR expression .)
    CTE_CHAR        reduce using rule 102 (op1 -> OR expression .)
    R_B             reduce using rule 102 (op1 -> OR expression .)
    R_P             reduce using rule 102 (op1 -> OR expression .)
    R_SB            reduce using rule 102 (op1 -> OR expression .)
    COMA            reduce using rule 102 (op1 -> OR expression .)
    SEMICOLON       reduce using rule 102 (op1 -> OR expression .)
    TO              reduce using rule 102 (op1 -> OR expression .)
    DO              reduce using rule 102 (op1 -> OR expression .)


state 185

    (81) while_statement -> WHILE L_P breadcrumb expression . R_P exp_type do_statement

    R_P             shift and go to state 206


state 186

    (78) for_statement -> FOR id id_quad EQUAL . expression for_id TO breadcrumb expression exp_type do_statement
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    id                             shift and go to state 123
    expression                     shift and go to state 207
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 187

    (104) op2 -> AND texp .

    OR              reduce using rule 104 (op2 -> AND texp .)
    ID              reduce using rule 104 (op2 -> AND texp .)
    RETURN          reduce using rule 104 (op2 -> AND texp .)
    READ            reduce using rule 104 (op2 -> AND texp .)
    PRINT           reduce using rule 104 (op2 -> AND texp .)
    IF              reduce using rule 104 (op2 -> AND texp .)
    WHILE           reduce using rule 104 (op2 -> AND texp .)
    FOR             reduce using rule 104 (op2 -> AND texp .)
    L_P             reduce using rule 104 (op2 -> AND texp .)
    CTE_F           reduce using rule 104 (op2 -> AND texp .)
    CTE_I           reduce using rule 104 (op2 -> AND texp .)
    CTE_CHAR        reduce using rule 104 (op2 -> AND texp .)
    R_B             reduce using rule 104 (op2 -> AND texp .)
    R_P             reduce using rule 104 (op2 -> AND texp .)
    R_SB            reduce using rule 104 (op2 -> AND texp .)
    COMA            reduce using rule 104 (op2 -> AND texp .)
    SEMICOLON       reduce using rule 104 (op2 -> AND texp .)
    TO              reduce using rule 104 (op2 -> AND texp .)
    DO              reduce using rule 104 (op2 -> AND texp .)


state 188

    (112) op3aux -> op3 mexp .

    AND             reduce using rule 112 (op3aux -> op3 mexp .)
    OR              reduce using rule 112 (op3aux -> op3 mexp .)
    ID              reduce using rule 112 (op3aux -> op3 mexp .)
    RETURN          reduce using rule 112 (op3aux -> op3 mexp .)
    READ            reduce using rule 112 (op3aux -> op3 mexp .)
    PRINT           reduce using rule 112 (op3aux -> op3 mexp .)
    IF              reduce using rule 112 (op3aux -> op3 mexp .)
    WHILE           reduce using rule 112 (op3aux -> op3 mexp .)
    FOR             reduce using rule 112 (op3aux -> op3 mexp .)
    L_P             reduce using rule 112 (op3aux -> op3 mexp .)
    CTE_F           reduce using rule 112 (op3aux -> op3 mexp .)
    CTE_I           reduce using rule 112 (op3aux -> op3 mexp .)
    CTE_CHAR        reduce using rule 112 (op3aux -> op3 mexp .)
    R_B             reduce using rule 112 (op3aux -> op3 mexp .)
    R_P             reduce using rule 112 (op3aux -> op3 mexp .)
    R_SB            reduce using rule 112 (op3aux -> op3 mexp .)
    COMA            reduce using rule 112 (op3aux -> op3 mexp .)
    SEMICOLON       reduce using rule 112 (op3aux -> op3 mexp .)
    TO              reduce using rule 112 (op3aux -> op3 mexp .)
    DO              reduce using rule 112 (op3aux -> op3 mexp .)


state 189

    (116) op4aux -> op4 mexp .

    LESSTHAN        reduce using rule 116 (op4aux -> op4 mexp .)
    LESSTHANEQ      reduce using rule 116 (op4aux -> op4 mexp .)
    GREATERTHAN     reduce using rule 116 (op4aux -> op4 mexp .)
    GREATERTHANEQ   reduce using rule 116 (op4aux -> op4 mexp .)
    EQ              reduce using rule 116 (op4aux -> op4 mexp .)
    DIFERENT        reduce using rule 116 (op4aux -> op4 mexp .)
    AND             reduce using rule 116 (op4aux -> op4 mexp .)
    OR              reduce using rule 116 (op4aux -> op4 mexp .)
    ID              reduce using rule 116 (op4aux -> op4 mexp .)
    RETURN          reduce using rule 116 (op4aux -> op4 mexp .)
    READ            reduce using rule 116 (op4aux -> op4 mexp .)
    PRINT           reduce using rule 116 (op4aux -> op4 mexp .)
    IF              reduce using rule 116 (op4aux -> op4 mexp .)
    WHILE           reduce using rule 116 (op4aux -> op4 mexp .)
    FOR             reduce using rule 116 (op4aux -> op4 mexp .)
    L_P             reduce using rule 116 (op4aux -> op4 mexp .)
    CTE_F           reduce using rule 116 (op4aux -> op4 mexp .)
    CTE_I           reduce using rule 116 (op4aux -> op4 mexp .)
    CTE_CHAR        reduce using rule 116 (op4aux -> op4 mexp .)
    R_B             reduce using rule 116 (op4aux -> op4 mexp .)
    R_P             reduce using rule 116 (op4aux -> op4 mexp .)
    R_SB            reduce using rule 116 (op4aux -> op4 mexp .)
    COMA            reduce using rule 116 (op4aux -> op4 mexp .)
    SEMICOLON       reduce using rule 116 (op4aux -> op4 mexp .)
    TO              reduce using rule 116 (op4aux -> op4 mexp .)
    DO              reduce using rule 116 (op4aux -> op4 mexp .)


state 190

    (121) op5aux -> op5 term .

    PLUS            reduce using rule 121 (op5aux -> op5 term .)
    MINUS           reduce using rule 121 (op5aux -> op5 term .)
    LESSTHAN        reduce using rule 121 (op5aux -> op5 term .)
    LESSTHANEQ      reduce using rule 121 (op5aux -> op5 term .)
    GREATERTHAN     reduce using rule 121 (op5aux -> op5 term .)
    GREATERTHANEQ   reduce using rule 121 (op5aux -> op5 term .)
    EQ              reduce using rule 121 (op5aux -> op5 term .)
    DIFERENT        reduce using rule 121 (op5aux -> op5 term .)
    AND             reduce using rule 121 (op5aux -> op5 term .)
    OR              reduce using rule 121 (op5aux -> op5 term .)
    ID              reduce using rule 121 (op5aux -> op5 term .)
    RETURN          reduce using rule 121 (op5aux -> op5 term .)
    READ            reduce using rule 121 (op5aux -> op5 term .)
    PRINT           reduce using rule 121 (op5aux -> op5 term .)
    IF              reduce using rule 121 (op5aux -> op5 term .)
    WHILE           reduce using rule 121 (op5aux -> op5 term .)
    FOR             reduce using rule 121 (op5aux -> op5 term .)
    L_P             reduce using rule 121 (op5aux -> op5 term .)
    CTE_F           reduce using rule 121 (op5aux -> op5 term .)
    CTE_I           reduce using rule 121 (op5aux -> op5 term .)
    CTE_CHAR        reduce using rule 121 (op5aux -> op5 term .)
    R_B             reduce using rule 121 (op5aux -> op5 term .)
    R_P             reduce using rule 121 (op5aux -> op5 term .)
    R_SB            reduce using rule 121 (op5aux -> op5 term .)
    COMA            reduce using rule 121 (op5aux -> op5 term .)
    SEMICOLON       reduce using rule 121 (op5aux -> op5 term .)
    TO              reduce using rule 121 (op5aux -> op5 term .)
    DO              reduce using rule 121 (op5aux -> op5 term .)


state 191

    (28) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B . statements R_B
    (39) statements -> . statement statements
    (40) statements -> . empty
    (41) statement -> . assignation
    (42) statement -> . call_func
    (43) statement -> . return_func
    (44) statement -> . read
    (45) statement -> . write
    (46) statement -> . decision_statement
    (47) statement -> . repetition_statement
    (48) statement -> . expression
    (123) empty -> .
    (49) assignation -> . id id_quad EQUAL expression SEMICOLON
    (57) call_func -> . ID call_func_era L_P args R_P SEMICOLON
    (60) return_func -> . RETURN L_P expression R_P SEMICOLON
    (61) read -> . READ L_P read_args R_P SEMICOLON
    (65) write -> . PRINT L_P write_args R_P SEMICOLON
    (71) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (76) repetition_statement -> . while_statement
    (77) repetition_statement -> . for_statement
    (83) expression -> . texp generate_quad op1
    (22) id -> . ID id1
    (81) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (78) for_statement -> . FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    R_B             reduce using rule 123 (empty -> .)
    ID              shift and go to state 76
    RETURN          shift and go to state 77
    READ            shift and go to state 78
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 84
    FOR             shift and go to state 85
    L_P             shift and go to state 63
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    statements                     shift and go to state 208
    statement                      shift and go to state 65
    empty                          shift and go to state 66
    assignation                    shift and go to state 67
    call_func                      shift and go to state 68
    return_func                    shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    decision_statement             shift and go to state 72
    repetition_statement           shift and go to state 73
    expression                     shift and go to state 74
    id                             shift and go to state 75
    while_statement                shift and go to state 81
    for_statement                  shift and go to state 82
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 192

    (91) fact -> L_P add_fake expression R_P remove_fake .

    MULT            reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    DIV             reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    MOD             reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    PLUS            reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    MINUS           reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    LESSTHAN        reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    LESSTHANEQ      reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    GREATERTHAN     reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    GREATERTHANEQ   reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    EQ              reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    DIFERENT        reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    AND             reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    OR              reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    ID              reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    RETURN          reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    READ            reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    PRINT           reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    IF              reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    WHILE           reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    FOR             reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    L_P             reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    CTE_F           reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    CTE_I           reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    CTE_CHAR        reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    R_B             reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    R_P             reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    R_SB            reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    COMA            reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    SEMICOLON       reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    TO              reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)
    DO              reduce using rule 91 (fact -> L_P add_fake expression R_P remove_fake .)


state 193

    (58) call_func_exp -> ID call_func_era L_P . args R_P
    (50) args -> . args1
    (51) args -> . empty
    (52) args1 -> . expression param_check args2
    (123) empty -> .
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    R_P             reduce using rule 123 (empty -> .)
    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    args                           shift and go to state 209
    args1                          shift and go to state 170
    empty                          shift and go to state 171
    expression                     shift and go to state 172
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 194

    (49) assignation -> id id_quad EQUAL expression SEMICOLON .

    ID              reduce using rule 49 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 49 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    READ            reduce using rule 49 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 49 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    IF              reduce using rule 49 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 49 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    FOR             reduce using rule 49 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    L_P             reduce using rule 49 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    CTE_F           reduce using rule 49 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    CTE_I           reduce using rule 49 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    CTE_CHAR        reduce using rule 49 (assignation -> id id_quad EQUAL expression SEMICOLON .)
    R_B             reduce using rule 49 (assignation -> id id_quad EQUAL expression SEMICOLON .)


state 195

    (57) call_func -> ID call_func_era L_P args R_P . SEMICOLON
    (58) call_func_exp -> ID call_func_era L_P args R_P .

    SEMICOLON       shift and go to state 210
    MULT            reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    DIV             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    MOD             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    PLUS            reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    MINUS           reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    LESSTHAN        reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    LESSTHANEQ      reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    GREATERTHAN     reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    GREATERTHANEQ   reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    EQ              reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    DIFERENT        reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    AND             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    OR              reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    ID              reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    RETURN          reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    READ            reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    PRINT           reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    IF              reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    WHILE           reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    FOR             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    L_P             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    CTE_F           reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    CTE_I           reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    CTE_CHAR        reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    R_B             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)


state 196

    (52) args1 -> expression param_check . args2
    (54) args2 -> . COMA next_arg args1
    (55) args2 -> . empty
    (123) empty -> .

    COMA            shift and go to state 212
    R_P             reduce using rule 123 (empty -> .)

    args2                          shift and go to state 211
    empty                          shift and go to state 213

state 197

    (25) id2 -> L_SB . expression R_SB
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 214
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 198

    (23) id1 -> L_SB expression R_SB id2 .

    EQUAL           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    MULT            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    DIV             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    MOD             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    PLUS            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    MINUS           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    LESSTHAN        reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    LESSTHANEQ      reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    GREATERTHAN     reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    GREATERTHANEQ   reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    EQ              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    DIFERENT        reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    AND             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    OR              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    ID              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    RETURN          reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    READ            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    PRINT           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    IF              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    WHILE           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    FOR             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    L_P             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    CTE_F           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    CTE_I           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    CTE_CHAR        reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    R_B             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    R_P             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    R_SB            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    COMA            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    SEMICOLON       reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    TO              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    DO              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)


state 199

    (26) id2 -> empty .

    EQUAL           reduce using rule 26 (id2 -> empty .)
    MULT            reduce using rule 26 (id2 -> empty .)
    DIV             reduce using rule 26 (id2 -> empty .)
    MOD             reduce using rule 26 (id2 -> empty .)
    PLUS            reduce using rule 26 (id2 -> empty .)
    MINUS           reduce using rule 26 (id2 -> empty .)
    LESSTHAN        reduce using rule 26 (id2 -> empty .)
    LESSTHANEQ      reduce using rule 26 (id2 -> empty .)
    GREATERTHAN     reduce using rule 26 (id2 -> empty .)
    GREATERTHANEQ   reduce using rule 26 (id2 -> empty .)
    EQ              reduce using rule 26 (id2 -> empty .)
    DIFERENT        reduce using rule 26 (id2 -> empty .)
    AND             reduce using rule 26 (id2 -> empty .)
    OR              reduce using rule 26 (id2 -> empty .)
    ID              reduce using rule 26 (id2 -> empty .)
    RETURN          reduce using rule 26 (id2 -> empty .)
    READ            reduce using rule 26 (id2 -> empty .)
    PRINT           reduce using rule 26 (id2 -> empty .)
    IF              reduce using rule 26 (id2 -> empty .)
    WHILE           reduce using rule 26 (id2 -> empty .)
    FOR             reduce using rule 26 (id2 -> empty .)
    L_P             reduce using rule 26 (id2 -> empty .)
    CTE_F           reduce using rule 26 (id2 -> empty .)
    CTE_I           reduce using rule 26 (id2 -> empty .)
    CTE_CHAR        reduce using rule 26 (id2 -> empty .)
    R_B             reduce using rule 26 (id2 -> empty .)
    R_P             reduce using rule 26 (id2 -> empty .)
    R_SB            reduce using rule 26 (id2 -> empty .)
    COMA            reduce using rule 26 (id2 -> empty .)
    SEMICOLON       reduce using rule 26 (id2 -> empty .)
    TO              reduce using rule 26 (id2 -> empty .)
    DO              reduce using rule 26 (id2 -> empty .)


state 200

    (60) return_func -> RETURN L_P expression R_P SEMICOLON .

    ID              reduce using rule 60 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    RETURN          reduce using rule 60 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    READ            reduce using rule 60 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    PRINT           reduce using rule 60 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    IF              reduce using rule 60 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    WHILE           reduce using rule 60 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    FOR             reduce using rule 60 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    L_P             reduce using rule 60 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_F           reduce using rule 60 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_I           reduce using rule 60 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 60 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    R_B             reduce using rule 60 (return_func -> RETURN L_P expression R_P SEMICOLON .)


state 201

    (61) read -> READ L_P read_args R_P SEMICOLON .

    ID              reduce using rule 61 (read -> READ L_P read_args R_P SEMICOLON .)
    RETURN          reduce using rule 61 (read -> READ L_P read_args R_P SEMICOLON .)
    READ            reduce using rule 61 (read -> READ L_P read_args R_P SEMICOLON .)
    PRINT           reduce using rule 61 (read -> READ L_P read_args R_P SEMICOLON .)
    IF              reduce using rule 61 (read -> READ L_P read_args R_P SEMICOLON .)
    WHILE           reduce using rule 61 (read -> READ L_P read_args R_P SEMICOLON .)
    FOR             reduce using rule 61 (read -> READ L_P read_args R_P SEMICOLON .)
    L_P             reduce using rule 61 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_F           reduce using rule 61 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_I           reduce using rule 61 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 61 (read -> READ L_P read_args R_P SEMICOLON .)
    R_B             reduce using rule 61 (read -> READ L_P read_args R_P SEMICOLON .)


state 202

    (63) read_args1 -> COMA expression . read_args1
    (63) read_args1 -> . COMA expression read_args1
    (64) read_args1 -> . empty
    (123) empty -> .

    COMA            shift and go to state 177
    R_P             reduce using rule 123 (empty -> .)

    read_args1                     shift and go to state 215
    empty                          shift and go to state 178

state 203

    (65) write -> PRINT L_P write_args R_P SEMICOLON .

    ID              reduce using rule 65 (write -> PRINT L_P write_args R_P SEMICOLON .)
    RETURN          reduce using rule 65 (write -> PRINT L_P write_args R_P SEMICOLON .)
    READ            reduce using rule 65 (write -> PRINT L_P write_args R_P SEMICOLON .)
    PRINT           reduce using rule 65 (write -> PRINT L_P write_args R_P SEMICOLON .)
    IF              reduce using rule 65 (write -> PRINT L_P write_args R_P SEMICOLON .)
    WHILE           reduce using rule 65 (write -> PRINT L_P write_args R_P SEMICOLON .)
    FOR             reduce using rule 65 (write -> PRINT L_P write_args R_P SEMICOLON .)
    L_P             reduce using rule 65 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_F           reduce using rule 65 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_I           reduce using rule 65 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 65 (write -> PRINT L_P write_args R_P SEMICOLON .)
    R_B             reduce using rule 65 (write -> PRINT L_P write_args R_P SEMICOLON .)


state 204

    (67) write_args1 -> COMA write_args2 . write_args1
    (67) write_args1 -> . COMA write_args2 write_args1
    (68) write_args1 -> . empty
    (123) empty -> .

    COMA            shift and go to state 181
    R_P             reduce using rule 123 (empty -> .)

    write_args1                    shift and go to state 216
    empty                          shift and go to state 182

state 205

    (71) decision_statement -> IF L_P expression R_P exp_type . L_B statements R_B decision_statement1

    L_B             shift and go to state 217


state 206

    (81) while_statement -> WHILE L_P breadcrumb expression R_P . exp_type do_statement
    (74) exp_type -> .

    DO              reduce using rule 74 (exp_type -> .)

    exp_type                       shift and go to state 218

state 207

    (78) for_statement -> FOR id id_quad EQUAL expression . for_id TO breadcrumb expression exp_type do_statement
    (79) for_id -> .

    TO              reduce using rule 79 (for_id -> .)

    for_id                         shift and go to state 219

state 208

    (28) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements . R_B

    R_B             shift and go to state 220


state 209

    (58) call_func_exp -> ID call_func_era L_P args . R_P

    R_P             shift and go to state 221


state 210

    (57) call_func -> ID call_func_era L_P args R_P SEMICOLON .

    ID              reduce using rule 57 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    RETURN          reduce using rule 57 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    READ            reduce using rule 57 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    PRINT           reduce using rule 57 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    IF              reduce using rule 57 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    WHILE           reduce using rule 57 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    FOR             reduce using rule 57 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    L_P             reduce using rule 57 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    CTE_F           reduce using rule 57 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    CTE_I           reduce using rule 57 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 57 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)
    R_B             reduce using rule 57 (call_func -> ID call_func_era L_P args R_P SEMICOLON .)


state 211

    (52) args1 -> expression param_check args2 .

    R_P             reduce using rule 52 (args1 -> expression param_check args2 .)


state 212

    (54) args2 -> COMA . next_arg args1
    (56) next_arg -> .

    L_P             reduce using rule 56 (next_arg -> .)
    ID              reduce using rule 56 (next_arg -> .)
    CTE_F           reduce using rule 56 (next_arg -> .)
    CTE_I           reduce using rule 56 (next_arg -> .)
    CTE_CHAR        reduce using rule 56 (next_arg -> .)

    next_arg                       shift and go to state 222

state 213

    (55) args2 -> empty .

    R_P             reduce using rule 55 (args2 -> empty .)


state 214

    (25) id2 -> L_SB expression . R_SB

    R_SB            shift and go to state 223


state 215

    (63) read_args1 -> COMA expression read_args1 .

    R_P             reduce using rule 63 (read_args1 -> COMA expression read_args1 .)


state 216

    (67) write_args1 -> COMA write_args2 write_args1 .

    R_P             reduce using rule 67 (write_args1 -> COMA write_args2 write_args1 .)


state 217

    (71) decision_statement -> IF L_P expression R_P exp_type L_B . statements R_B decision_statement1
    (39) statements -> . statement statements
    (40) statements -> . empty
    (41) statement -> . assignation
    (42) statement -> . call_func
    (43) statement -> . return_func
    (44) statement -> . read
    (45) statement -> . write
    (46) statement -> . decision_statement
    (47) statement -> . repetition_statement
    (48) statement -> . expression
    (123) empty -> .
    (49) assignation -> . id id_quad EQUAL expression SEMICOLON
    (57) call_func -> . ID call_func_era L_P args R_P SEMICOLON
    (60) return_func -> . RETURN L_P expression R_P SEMICOLON
    (61) read -> . READ L_P read_args R_P SEMICOLON
    (65) write -> . PRINT L_P write_args R_P SEMICOLON
    (71) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (76) repetition_statement -> . while_statement
    (77) repetition_statement -> . for_statement
    (83) expression -> . texp generate_quad op1
    (22) id -> . ID id1
    (81) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (78) for_statement -> . FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    R_B             reduce using rule 123 (empty -> .)
    ID              shift and go to state 76
    RETURN          shift and go to state 77
    READ            shift and go to state 78
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 84
    FOR             shift and go to state 85
    L_P             shift and go to state 63
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 74
    statements                     shift and go to state 224
    statement                      shift and go to state 65
    empty                          shift and go to state 66
    assignation                    shift and go to state 67
    call_func                      shift and go to state 68
    return_func                    shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    decision_statement             shift and go to state 72
    repetition_statement           shift and go to state 73
    id                             shift and go to state 75
    while_statement                shift and go to state 81
    for_statement                  shift and go to state 82
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 218

    (81) while_statement -> WHILE L_P breadcrumb expression R_P exp_type . do_statement
    (82) do_statement -> . DO L_B statements R_B

    DO              shift and go to state 226

    do_statement                   shift and go to state 225

state 219

    (78) for_statement -> FOR id id_quad EQUAL expression for_id . TO breadcrumb expression exp_type do_statement

    TO              shift and go to state 227


state 220

    (28) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B .

    FUNC            reduce using rule 28 (function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B .)
    MAIN            reduce using rule 28 (function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B .)


state 221

    (58) call_func_exp -> ID call_func_era L_P args R_P .

    MULT            reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    DIV             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    MOD             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    PLUS            reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    MINUS           reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    LESSTHAN        reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    LESSTHANEQ      reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    GREATERTHAN     reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    GREATERTHANEQ   reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    EQ              reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    DIFERENT        reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    AND             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    OR              reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    R_P             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    R_SB            reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    COMA            reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    SEMICOLON       reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    ID              reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    RETURN          reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    READ            reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    PRINT           reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    IF              reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    WHILE           reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    FOR             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    L_P             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    CTE_F           reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    CTE_I           reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    CTE_CHAR        reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    R_B             reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    TO              reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)
    DO              reduce using rule 58 (call_func_exp -> ID call_func_era L_P args R_P .)


state 222

    (54) args2 -> COMA next_arg . args1
    (52) args1 -> . expression param_check args2
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    args1                          shift and go to state 228
    expression                     shift and go to state 172
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 123
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 223

    (25) id2 -> L_SB expression R_SB .

    EQUAL           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    MULT            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    DIV             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    MOD             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    PLUS            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    MINUS           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    LESSTHAN        reduce using rule 25 (id2 -> L_SB expression R_SB .)
    LESSTHANEQ      reduce using rule 25 (id2 -> L_SB expression R_SB .)
    GREATERTHAN     reduce using rule 25 (id2 -> L_SB expression R_SB .)
    GREATERTHANEQ   reduce using rule 25 (id2 -> L_SB expression R_SB .)
    EQ              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    DIFERENT        reduce using rule 25 (id2 -> L_SB expression R_SB .)
    AND             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    OR              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    ID              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    RETURN          reduce using rule 25 (id2 -> L_SB expression R_SB .)
    READ            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    PRINT           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    IF              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    WHILE           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    FOR             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    L_P             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    CTE_F           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    CTE_I           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    CTE_CHAR        reduce using rule 25 (id2 -> L_SB expression R_SB .)
    R_B             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    R_P             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    R_SB            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    COMA            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    SEMICOLON       reduce using rule 25 (id2 -> L_SB expression R_SB .)
    TO              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    DO              reduce using rule 25 (id2 -> L_SB expression R_SB .)


state 224

    (71) decision_statement -> IF L_P expression R_P exp_type L_B statements . R_B decision_statement1

    R_B             shift and go to state 229


state 225

    (81) while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .

    ID              reduce using rule 81 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    RETURN          reduce using rule 81 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    READ            reduce using rule 81 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    PRINT           reduce using rule 81 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    IF              reduce using rule 81 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    WHILE           reduce using rule 81 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    FOR             reduce using rule 81 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    L_P             reduce using rule 81 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    CTE_F           reduce using rule 81 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    CTE_I           reduce using rule 81 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    CTE_CHAR        reduce using rule 81 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    R_B             reduce using rule 81 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)


state 226

    (82) do_statement -> DO . L_B statements R_B

    L_B             shift and go to state 230


state 227

    (78) for_statement -> FOR id id_quad EQUAL expression for_id TO . breadcrumb expression exp_type do_statement
    (80) breadcrumb -> .

    L_P             reduce using rule 80 (breadcrumb -> .)
    ID              reduce using rule 80 (breadcrumb -> .)
    CTE_F           reduce using rule 80 (breadcrumb -> .)
    CTE_I           reduce using rule 80 (breadcrumb -> .)
    CTE_CHAR        reduce using rule 80 (breadcrumb -> .)

    breadcrumb                     shift and go to state 231

state 228

    (54) args2 -> COMA next_arg args1 .

    R_P             reduce using rule 54 (args2 -> COMA next_arg args1 .)


state 229

    (71) decision_statement -> IF L_P expression R_P exp_type L_B statements R_B . decision_statement1
    (72) decision_statement1 -> . ELSE else_jump L_B statements R_B
    (73) decision_statement1 -> . empty
    (123) empty -> .

    ELSE            shift and go to state 233
    ID              reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    READ            reduce using rule 123 (empty -> .)
    PRINT           reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    L_P             reduce using rule 123 (empty -> .)
    CTE_F           reduce using rule 123 (empty -> .)
    CTE_I           reduce using rule 123 (empty -> .)
    CTE_CHAR        reduce using rule 123 (empty -> .)
    R_B             reduce using rule 123 (empty -> .)

    decision_statement1            shift and go to state 232
    empty                          shift and go to state 234

state 230

    (82) do_statement -> DO L_B . statements R_B
    (39) statements -> . statement statements
    (40) statements -> . empty
    (41) statement -> . assignation
    (42) statement -> . call_func
    (43) statement -> . return_func
    (44) statement -> . read
    (45) statement -> . write
    (46) statement -> . decision_statement
    (47) statement -> . repetition_statement
    (48) statement -> . expression
    (123) empty -> .
    (49) assignation -> . id id_quad EQUAL expression SEMICOLON
    (57) call_func -> . ID call_func_era L_P args R_P SEMICOLON
    (60) return_func -> . RETURN L_P expression R_P SEMICOLON
    (61) read -> . READ L_P read_args R_P SEMICOLON
    (65) write -> . PRINT L_P write_args R_P SEMICOLON
    (71) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (76) repetition_statement -> . while_statement
    (77) repetition_statement -> . for_statement
    (83) expression -> . texp generate_quad op1
    (22) id -> . ID id1
    (81) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (78) for_statement -> . FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    R_B             reduce using rule 123 (empty -> .)
    ID              shift and go to state 76
    RETURN          shift and go to state 77
    READ            shift and go to state 78
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 84
    FOR             shift and go to state 85
    L_P             shift and go to state 63
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    statements                     shift and go to state 235
    statement                      shift and go to state 65
    empty                          shift and go to state 66
    assignation                    shift and go to state 67
    call_func                      shift and go to state 68
    return_func                    shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    decision_statement             shift and go to state 72
    repetition_statement           shift and go to state 73
    expression                     shift and go to state 74
    id                             shift and go to state 75
    while_statement                shift and go to state 81
    for_statement                  shift and go to state 82
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 231

    (78) for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb . expression exp_type do_statement
    (83) expression -> . texp generate_quad op1
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (22) id -> . ID id1
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    L_P             shift and go to state 63
    ID              shift and go to state 124
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    id                             shift and go to state 123
    expression                     shift and go to state 236
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 232

    (71) decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .

    ID              reduce using rule 71 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    RETURN          reduce using rule 71 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    READ            reduce using rule 71 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    PRINT           reduce using rule 71 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    IF              reduce using rule 71 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    WHILE           reduce using rule 71 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    FOR             reduce using rule 71 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    L_P             reduce using rule 71 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    CTE_F           reduce using rule 71 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    CTE_I           reduce using rule 71 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    CTE_CHAR        reduce using rule 71 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    R_B             reduce using rule 71 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)


state 233

    (72) decision_statement1 -> ELSE . else_jump L_B statements R_B
    (75) else_jump -> .

    L_B             reduce using rule 75 (else_jump -> .)

    else_jump                      shift and go to state 237

state 234

    (73) decision_statement1 -> empty .

    ID              reduce using rule 73 (decision_statement1 -> empty .)
    RETURN          reduce using rule 73 (decision_statement1 -> empty .)
    READ            reduce using rule 73 (decision_statement1 -> empty .)
    PRINT           reduce using rule 73 (decision_statement1 -> empty .)
    IF              reduce using rule 73 (decision_statement1 -> empty .)
    WHILE           reduce using rule 73 (decision_statement1 -> empty .)
    FOR             reduce using rule 73 (decision_statement1 -> empty .)
    L_P             reduce using rule 73 (decision_statement1 -> empty .)
    CTE_F           reduce using rule 73 (decision_statement1 -> empty .)
    CTE_I           reduce using rule 73 (decision_statement1 -> empty .)
    CTE_CHAR        reduce using rule 73 (decision_statement1 -> empty .)
    R_B             reduce using rule 73 (decision_statement1 -> empty .)


state 235

    (82) do_statement -> DO L_B statements . R_B

    R_B             shift and go to state 238


state 236

    (78) for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression . exp_type do_statement
    (74) exp_type -> .

    DO              reduce using rule 74 (exp_type -> .)

    exp_type                       shift and go to state 239

state 237

    (72) decision_statement1 -> ELSE else_jump . L_B statements R_B

    L_B             shift and go to state 240


state 238

    (82) do_statement -> DO L_B statements R_B .

    ID              reduce using rule 82 (do_statement -> DO L_B statements R_B .)
    RETURN          reduce using rule 82 (do_statement -> DO L_B statements R_B .)
    READ            reduce using rule 82 (do_statement -> DO L_B statements R_B .)
    PRINT           reduce using rule 82 (do_statement -> DO L_B statements R_B .)
    IF              reduce using rule 82 (do_statement -> DO L_B statements R_B .)
    WHILE           reduce using rule 82 (do_statement -> DO L_B statements R_B .)
    FOR             reduce using rule 82 (do_statement -> DO L_B statements R_B .)
    L_P             reduce using rule 82 (do_statement -> DO L_B statements R_B .)
    CTE_F           reduce using rule 82 (do_statement -> DO L_B statements R_B .)
    CTE_I           reduce using rule 82 (do_statement -> DO L_B statements R_B .)
    CTE_CHAR        reduce using rule 82 (do_statement -> DO L_B statements R_B .)
    R_B             reduce using rule 82 (do_statement -> DO L_B statements R_B .)


state 239

    (78) for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type . do_statement
    (82) do_statement -> . DO L_B statements R_B

    DO              shift and go to state 226

    do_statement                   shift and go to state 241

state 240

    (72) decision_statement1 -> ELSE else_jump L_B . statements R_B
    (39) statements -> . statement statements
    (40) statements -> . empty
    (41) statement -> . assignation
    (42) statement -> . call_func
    (43) statement -> . return_func
    (44) statement -> . read
    (45) statement -> . write
    (46) statement -> . decision_statement
    (47) statement -> . repetition_statement
    (48) statement -> . expression
    (123) empty -> .
    (49) assignation -> . id id_quad EQUAL expression SEMICOLON
    (57) call_func -> . ID call_func_era L_P args R_P SEMICOLON
    (60) return_func -> . RETURN L_P expression R_P SEMICOLON
    (61) read -> . READ L_P read_args R_P SEMICOLON
    (65) write -> . PRINT L_P write_args R_P SEMICOLON
    (71) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (76) repetition_statement -> . while_statement
    (77) repetition_statement -> . for_statement
    (83) expression -> . texp generate_quad op1
    (22) id -> . ID id1
    (81) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (78) for_statement -> . FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement
    (84) texp -> . gexp generate_quad op2
    (85) gexp -> . mexp generate_quad op3aux
    (86) mexp -> . term generate_quad op4aux
    (87) term -> . fact generate_quad op5aux
    (89) fact -> . id id_quad
    (90) fact -> . call_func_exp
    (91) fact -> . L_P add_fake expression R_P remove_fake
    (92) fact -> . cte
    (58) call_func_exp -> . ID call_func_era L_P args R_P
    (96) cte -> . CTE_F add_cte_float
    (97) cte -> . CTE_I add_cte_int
    (98) cte -> . CTE_CHAR add_cte_char

    R_B             reduce using rule 123 (empty -> .)
    ID              shift and go to state 76
    RETURN          shift and go to state 77
    READ            shift and go to state 78
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 84
    FOR             shift and go to state 85
    L_P             shift and go to state 63
    CTE_F           shift and go to state 92
    CTE_I           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    statements                     shift and go to state 242
    statement                      shift and go to state 65
    empty                          shift and go to state 66
    assignation                    shift and go to state 67
    call_func                      shift and go to state 68
    return_func                    shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    decision_statement             shift and go to state 72
    repetition_statement           shift and go to state 73
    expression                     shift and go to state 74
    id                             shift and go to state 75
    while_statement                shift and go to state 81
    for_statement                  shift and go to state 82
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 241

    (78) for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .

    ID              reduce using rule 78 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    RETURN          reduce using rule 78 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    READ            reduce using rule 78 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    PRINT           reduce using rule 78 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    IF              reduce using rule 78 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    WHILE           reduce using rule 78 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    FOR             reduce using rule 78 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    L_P             reduce using rule 78 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    CTE_F           reduce using rule 78 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    CTE_I           reduce using rule 78 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    CTE_CHAR        reduce using rule 78 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)
    R_B             reduce using rule 78 (for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement .)


state 242

    (72) decision_statement1 -> ELSE else_jump L_B statements . R_B

    R_B             shift and go to state 243


state 243

    (72) decision_statement1 -> ELSE else_jump L_B statements R_B .

    ID              reduce using rule 72 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    RETURN          reduce using rule 72 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    READ            reduce using rule 72 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    PRINT           reduce using rule 72 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    IF              reduce using rule 72 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    WHILE           reduce using rule 72 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    FOR             reduce using rule 72 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    L_P             reduce using rule 72 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    CTE_F           reduce using rule 72 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    CTE_I           reduce using rule 72 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    CTE_CHAR        reduce using rule 72 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    R_B             reduce using rule 72 (decision_statement1 -> ELSE else_jump L_B statements R_B .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 76 resolved using rule (call_func_era -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 76
WARNING: reduce/reduce conflict in state 124 resolved using rule (call_func_era -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 124
