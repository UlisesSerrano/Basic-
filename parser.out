Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON g_var funcs main
Rule 2     main -> MAIN L_P params R_P var_declaration L_B statements R_B
Rule 3     type -> INT
Rule 4     type -> FLOAT
Rule 5     type -> CHAR
Rule 6     g_var -> var_declaration
Rule 7     funcs -> function funcs
Rule 8     funcs -> empty
Rule 9     var_declaration -> VAR var1
Rule 10    var_declaration -> empty
Rule 11    var1 -> var_type dec_id var2 SEMICOLON var4
Rule 12    var2 -> COMA dec_id var3
Rule 13    var2 -> empty
Rule 14    var3 -> var2
Rule 15    var4 -> var1
Rule 16    var4 -> empty
Rule 17    dec_id -> ID dec_id1
Rule 18    dec_id1 -> L_SB CTE_I R_SB dec_id2
Rule 19    dec_id1 -> empty
Rule 20    dec_id2 -> L_SB CTE_I R_SB
Rule 21    dec_id2 -> empty
Rule 22    id -> ID id1
Rule 23    id1 -> L_SB expression R_SB id2
Rule 24    id1 -> empty
Rule 25    id2 -> L_SB expression R_SB
Rule 26    id2 -> empty
Rule 27    var_type -> type
Rule 28    function -> FUNC func_type ID L_P params R_P var_declaration L_B statements R_B
Rule 29    func_type -> VOID
Rule 30    func_type -> type
Rule 31    params -> var_type id params1
Rule 32    params -> empty
Rule 33    params1 -> COMA params
Rule 34    params1 -> empty
Rule 35    statements -> statement statements
Rule 36    statements -> empty
Rule 37    statement -> assignation
Rule 38    statement -> call_func
Rule 39    statement -> return_func
Rule 40    statement -> read
Rule 41    statement -> write
Rule 42    statement -> decision_statement
Rule 43    statement -> repetition_statement
Rule 44    statement -> expression
Rule 45    assignation -> id EQUAL expression SEMICOLON
Rule 46    args -> args1
Rule 47    args -> empty
Rule 48    args1 -> expression args2
Rule 49    args2 -> COMA args1
Rule 50    args2 -> empty
Rule 51    call_func -> ID L_P args R_P SEMICOLON
Rule 52    return_func -> RETURN L_P expression R_P SEMICOLON
Rule 53    read -> READ L_P read_args R_P SEMICOLON
Rule 54    read_args -> expression read_args1
Rule 55    read_args1 -> COMA expression read_args1
Rule 56    read_args1 -> empty
Rule 57    write -> PRINT L_P write_args R_P SEMICOLON
Rule 58    write_args -> write_args2 write_args1
Rule 59    write_args1 -> COMA write_args2 write_args1
Rule 60    write_args1 -> empty
Rule 61    write_args2 -> expression
Rule 62    write_args2 -> CTE_STRING
Rule 63    decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1
Rule 64    decision_statement1 -> ELSE L_B statements R_B
Rule 65    decision_statement1 -> empty
Rule 66    repetition_statement -> while_statement
Rule 67    repetition_statement -> for_statement
Rule 68    for_statement -> FOR id EQUAL expression TO expression do_statement
Rule 69    while_statement -> WHILE L_P expression R_P do_statement
Rule 70    do_statement -> DO L_B statements R_B
Rule 71    expression -> texp op1
Rule 72    texp -> gexp op2
Rule 73    gexp -> nexp op3aux
Rule 74    nexp -> term op4aux
Rule 75    term -> fact op5aux
Rule 76    fact -> ID fact1
Rule 77    fact -> L_P expression R_P
Rule 78    fact -> cte
Rule 79    fact1 -> L_P args R_P
Rule 80    fact1 -> id1
Rule 81    cte -> CTE_I
Rule 82    cte -> CTE_F
Rule 83    cte -> CTE_CHAR
Rule 84    op1 -> OR expression
Rule 85    op1 -> empty
Rule 86    op2 -> AND texp
Rule 87    op2 -> empty
Rule 88    op3 -> LESSTHAN
Rule 89    op3 -> LESSTHANEQ
Rule 90    op3 -> GREATERTHAN
Rule 91    op3 -> GREATERTHANEQ
Rule 92    op3 -> EQ
Rule 93    op3 -> DIFERENT
Rule 94    op3aux -> op3 nexp
Rule 95    op3aux -> empty
Rule 96    op4 -> PLUS
Rule 97    op4 -> MINUS
Rule 98    op4aux -> op4 nexp
Rule 99    op4aux -> empty
Rule 100   op5 -> MULT
Rule 101   op5 -> DIV
Rule 102   op5 -> MOD
Rule 103   op5aux -> op5 term
Rule 104   op5aux -> empty
Rule 105   empty -> <empty>

Terminals, with rules where they appear

AND                  : 86
CHAR                 : 5
COMA                 : 12 33 49 55 59
CTE_CHAR             : 83
CTE_F                : 82
CTE_I                : 18 20 81
CTE_STRING           : 62
DIFERENT             : 93
DIV                  : 101
DO                   : 70
ELSE                 : 64
EQ                   : 92
EQUAL                : 45 68
FLOAT                : 4
FOR                  : 68
FUNC                 : 28
GREATERTHAN          : 90
GREATERTHANEQ        : 91
ID                   : 1 17 22 28 51 76
IF                   : 63
INT                  : 3
LESSTHAN             : 88
LESSTHANEQ           : 89
L_B                  : 2 28 63 64 70
L_P                  : 2 28 51 52 53 57 63 69 77 79
L_SB                 : 18 20 23 25
MAIN                 : 2
MINUS                : 97
MOD                  : 102
MULT                 : 100
OR                   : 84
PLUS                 : 96
PRINT                : 57
PROGRAM              : 1
READ                 : 53
RETURN               : 52
R_B                  : 2 28 63 64 70
R_P                  : 2 28 51 52 53 57 63 69 77 79
R_SB                 : 18 20 23 25
SEMICOLON            : 1 11 45 51 52 53 57
TO                   : 68
VAR                  : 9
VOID                 : 29
WHILE                : 69
error                : 

Nonterminals, with rules where they appear

args                 : 51 79
args1                : 46 49
args2                : 48
assignation          : 37
call_func            : 38
cte                  : 78
dec_id               : 11 12
dec_id1              : 17
dec_id2              : 18
decision_statement   : 42
decision_statement1  : 63
do_statement         : 68 69
empty                : 8 10 13 16 19 21 24 26 32 34 36 47 50 56 60 65 85 87 95 99 104
expression           : 23 25 44 45 48 52 54 55 61 63 68 68 69 77 84
fact                 : 75
fact1                : 76
for_statement        : 67
func_type            : 28
funcs                : 1 7
function             : 7
g_var                : 1
gexp                 : 72
id                   : 31 45 68
id1                  : 22 80
id2                  : 23
main                 : 1
nexp                 : 73 94 98
op1                  : 71
op2                  : 72
op3                  : 94
op3aux               : 73
op4                  : 98
op4aux               : 74
op5                  : 103
op5aux               : 75
params               : 2 28 33
params1              : 31
program              : 0
read                 : 40
read_args            : 53
read_args1           : 54 55
repetition_statement : 43
return_func          : 39
statement            : 35
statements           : 2 28 35 63 64 70
term                 : 74 103
texp                 : 71 86
type                 : 27 30
var1                 : 9 15
var2                 : 11 14
var3                 : 12
var4                 : 11
var_declaration      : 2 6 28
var_type             : 11 31
while_statement      : 66
write                : 41
write_args           : 57
write_args1          : 58 59
write_args2          : 58 59

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON g_var funcs main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON g_var funcs main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON g_var funcs main

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . g_var funcs main
    (6) g_var -> . var_declaration
    (9) var_declaration -> . VAR var1
    (10) var_declaration -> . empty
    (105) empty -> .

    VAR             shift and go to state 7
    FUNC            reduce using rule 105 (empty -> .)
    MAIN            reduce using rule 105 (empty -> .)

    g_var                          shift and go to state 5
    var_declaration                shift and go to state 6
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID SEMICOLON g_var . funcs main
    (7) funcs -> . function funcs
    (8) funcs -> . empty
    (28) function -> . FUNC func_type ID L_P params R_P var_declaration L_B statements R_B
    (105) empty -> .

    FUNC            shift and go to state 12
    MAIN            reduce using rule 105 (empty -> .)

    funcs                          shift and go to state 9
    function                       shift and go to state 10
    empty                          shift and go to state 11

state 6

    (6) g_var -> var_declaration .

    FUNC            reduce using rule 6 (g_var -> var_declaration .)
    MAIN            reduce using rule 6 (g_var -> var_declaration .)


state 7

    (9) var_declaration -> VAR . var1
    (11) var1 -> . var_type dec_id var2 SEMICOLON var4
    (27) var_type -> . type
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    var1                           shift and go to state 13
    var_type                       shift and go to state 14
    type                           shift and go to state 15

state 8

    (10) var_declaration -> empty .

    FUNC            reduce using rule 10 (var_declaration -> empty .)
    MAIN            reduce using rule 10 (var_declaration -> empty .)
    L_B             reduce using rule 10 (var_declaration -> empty .)


state 9

    (1) program -> PROGRAM ID SEMICOLON g_var funcs . main
    (2) main -> . MAIN L_P params R_P var_declaration L_B statements R_B

    MAIN            shift and go to state 20

    main                           shift and go to state 19

state 10

    (7) funcs -> function . funcs
    (7) funcs -> . function funcs
    (8) funcs -> . empty
    (28) function -> . FUNC func_type ID L_P params R_P var_declaration L_B statements R_B
    (105) empty -> .

    FUNC            shift and go to state 12
    MAIN            reduce using rule 105 (empty -> .)

    function                       shift and go to state 10
    funcs                          shift and go to state 21
    empty                          shift and go to state 11

state 11

    (8) funcs -> empty .

    MAIN            reduce using rule 8 (funcs -> empty .)


state 12

    (28) function -> FUNC . func_type ID L_P params R_P var_declaration L_B statements R_B
    (29) func_type -> . VOID
    (30) func_type -> . type
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    VOID            shift and go to state 23
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    func_type                      shift and go to state 22
    type                           shift and go to state 24

state 13

    (9) var_declaration -> VAR var1 .

    FUNC            reduce using rule 9 (var_declaration -> VAR var1 .)
    MAIN            reduce using rule 9 (var_declaration -> VAR var1 .)
    L_B             reduce using rule 9 (var_declaration -> VAR var1 .)


state 14

    (11) var1 -> var_type . dec_id var2 SEMICOLON var4
    (17) dec_id -> . ID dec_id1

    ID              shift and go to state 26

    dec_id                         shift and go to state 25

state 15

    (27) var_type -> type .

    ID              reduce using rule 27 (var_type -> type .)


state 16

    (3) type -> INT .

    ID              reduce using rule 3 (type -> INT .)


state 17

    (4) type -> FLOAT .

    ID              reduce using rule 4 (type -> FLOAT .)


state 18

    (5) type -> CHAR .

    ID              reduce using rule 5 (type -> CHAR .)


state 19

    (1) program -> PROGRAM ID SEMICOLON g_var funcs main .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON g_var funcs main .)


state 20

    (2) main -> MAIN . L_P params R_P var_declaration L_B statements R_B

    L_P             shift and go to state 27


state 21

    (7) funcs -> function funcs .

    MAIN            reduce using rule 7 (funcs -> function funcs .)


state 22

    (28) function -> FUNC func_type . ID L_P params R_P var_declaration L_B statements R_B

    ID              shift and go to state 28


state 23

    (29) func_type -> VOID .

    ID              reduce using rule 29 (func_type -> VOID .)


state 24

    (30) func_type -> type .

    ID              reduce using rule 30 (func_type -> type .)


state 25

    (11) var1 -> var_type dec_id . var2 SEMICOLON var4
    (12) var2 -> . COMA dec_id var3
    (13) var2 -> . empty
    (105) empty -> .

    COMA            shift and go to state 30
    SEMICOLON       reduce using rule 105 (empty -> .)

    var2                           shift and go to state 29
    empty                          shift and go to state 31

state 26

    (17) dec_id -> ID . dec_id1
    (18) dec_id1 -> . L_SB CTE_I R_SB dec_id2
    (19) dec_id1 -> . empty
    (105) empty -> .

    L_SB            shift and go to state 33
    COMA            reduce using rule 105 (empty -> .)
    SEMICOLON       reduce using rule 105 (empty -> .)

    dec_id1                        shift and go to state 32
    empty                          shift and go to state 34

state 27

    (2) main -> MAIN L_P . params R_P var_declaration L_B statements R_B
    (31) params -> . var_type id params1
    (32) params -> . empty
    (27) var_type -> . type
    (105) empty -> .
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    R_P             reduce using rule 105 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    params                         shift and go to state 35
    var_type                       shift and go to state 36
    empty                          shift and go to state 37
    type                           shift and go to state 15

state 28

    (28) function -> FUNC func_type ID . L_P params R_P var_declaration L_B statements R_B

    L_P             shift and go to state 38


state 29

    (11) var1 -> var_type dec_id var2 . SEMICOLON var4

    SEMICOLON       shift and go to state 39


state 30

    (12) var2 -> COMA . dec_id var3
    (17) dec_id -> . ID dec_id1

    ID              shift and go to state 26

    dec_id                         shift and go to state 40

state 31

    (13) var2 -> empty .

    SEMICOLON       reduce using rule 13 (var2 -> empty .)


state 32

    (17) dec_id -> ID dec_id1 .

    COMA            reduce using rule 17 (dec_id -> ID dec_id1 .)
    SEMICOLON       reduce using rule 17 (dec_id -> ID dec_id1 .)


state 33

    (18) dec_id1 -> L_SB . CTE_I R_SB dec_id2

    CTE_I           shift and go to state 41


state 34

    (19) dec_id1 -> empty .

    COMA            reduce using rule 19 (dec_id1 -> empty .)
    SEMICOLON       reduce using rule 19 (dec_id1 -> empty .)


state 35

    (2) main -> MAIN L_P params . R_P var_declaration L_B statements R_B

    R_P             shift and go to state 42


state 36

    (31) params -> var_type . id params1
    (22) id -> . ID id1

    ID              shift and go to state 44

    id                             shift and go to state 43

state 37

    (32) params -> empty .

    R_P             reduce using rule 32 (params -> empty .)


state 38

    (28) function -> FUNC func_type ID L_P . params R_P var_declaration L_B statements R_B
    (31) params -> . var_type id params1
    (32) params -> . empty
    (27) var_type -> . type
    (105) empty -> .
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    R_P             reduce using rule 105 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    params                         shift and go to state 45
    var_type                       shift and go to state 36
    empty                          shift and go to state 37
    type                           shift and go to state 15

state 39

    (11) var1 -> var_type dec_id var2 SEMICOLON . var4
    (15) var4 -> . var1
    (16) var4 -> . empty
    (11) var1 -> . var_type dec_id var2 SEMICOLON var4
    (105) empty -> .
    (27) var_type -> . type
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    FUNC            reduce using rule 105 (empty -> .)
    MAIN            reduce using rule 105 (empty -> .)
    L_B             reduce using rule 105 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    var_type                       shift and go to state 14
    var4                           shift and go to state 46
    var1                           shift and go to state 47
    empty                          shift and go to state 48
    type                           shift and go to state 15

state 40

    (12) var2 -> COMA dec_id . var3
    (14) var3 -> . var2
    (12) var2 -> . COMA dec_id var3
    (13) var2 -> . empty
    (105) empty -> .

    COMA            shift and go to state 30
    SEMICOLON       reduce using rule 105 (empty -> .)

    var3                           shift and go to state 49
    var2                           shift and go to state 50
    empty                          shift and go to state 31

state 41

    (18) dec_id1 -> L_SB CTE_I . R_SB dec_id2

    R_SB            shift and go to state 51


state 42

    (2) main -> MAIN L_P params R_P . var_declaration L_B statements R_B
    (9) var_declaration -> . VAR var1
    (10) var_declaration -> . empty
    (105) empty -> .

    VAR             shift and go to state 7
    L_B             reduce using rule 105 (empty -> .)

    var_declaration                shift and go to state 52
    empty                          shift and go to state 8

state 43

    (31) params -> var_type id . params1
    (33) params1 -> . COMA params
    (34) params1 -> . empty
    (105) empty -> .

    COMA            shift and go to state 54
    R_P             reduce using rule 105 (empty -> .)

    params1                        shift and go to state 53
    empty                          shift and go to state 55

state 44

    (22) id -> ID . id1
    (23) id1 -> . L_SB expression R_SB id2
    (24) id1 -> . empty
    (105) empty -> .

    L_SB            shift and go to state 57
    COMA            reduce using rule 105 (empty -> .)
    R_P             reduce using rule 105 (empty -> .)
    EQUAL           reduce using rule 105 (empty -> .)

    id1                            shift and go to state 56
    empty                          shift and go to state 58

state 45

    (28) function -> FUNC func_type ID L_P params . R_P var_declaration L_B statements R_B

    R_P             shift and go to state 59


state 46

    (11) var1 -> var_type dec_id var2 SEMICOLON var4 .

    FUNC            reduce using rule 11 (var1 -> var_type dec_id var2 SEMICOLON var4 .)
    MAIN            reduce using rule 11 (var1 -> var_type dec_id var2 SEMICOLON var4 .)
    L_B             reduce using rule 11 (var1 -> var_type dec_id var2 SEMICOLON var4 .)


state 47

    (15) var4 -> var1 .

    FUNC            reduce using rule 15 (var4 -> var1 .)
    MAIN            reduce using rule 15 (var4 -> var1 .)
    L_B             reduce using rule 15 (var4 -> var1 .)


state 48

    (16) var4 -> empty .

    FUNC            reduce using rule 16 (var4 -> empty .)
    MAIN            reduce using rule 16 (var4 -> empty .)
    L_B             reduce using rule 16 (var4 -> empty .)


state 49

    (12) var2 -> COMA dec_id var3 .

    SEMICOLON       reduce using rule 12 (var2 -> COMA dec_id var3 .)


state 50

    (14) var3 -> var2 .

    SEMICOLON       reduce using rule 14 (var3 -> var2 .)


state 51

    (18) dec_id1 -> L_SB CTE_I R_SB . dec_id2
    (20) dec_id2 -> . L_SB CTE_I R_SB
    (21) dec_id2 -> . empty
    (105) empty -> .

    L_SB            shift and go to state 60
    COMA            reduce using rule 105 (empty -> .)
    SEMICOLON       reduce using rule 105 (empty -> .)

    dec_id2                        shift and go to state 61
    empty                          shift and go to state 62

state 52

    (2) main -> MAIN L_P params R_P var_declaration . L_B statements R_B

    L_B             shift and go to state 63


state 53

    (31) params -> var_type id params1 .

    R_P             reduce using rule 31 (params -> var_type id params1 .)


state 54

    (33) params1 -> COMA . params
    (31) params -> . var_type id params1
    (32) params -> . empty
    (27) var_type -> . type
    (105) empty -> .
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    R_P             reduce using rule 105 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    params                         shift and go to state 64
    var_type                       shift and go to state 36
    empty                          shift and go to state 37
    type                           shift and go to state 15

state 55

    (34) params1 -> empty .

    R_P             reduce using rule 34 (params1 -> empty .)


state 56

    (22) id -> ID id1 .

    COMA            reduce using rule 22 (id -> ID id1 .)
    R_P             reduce using rule 22 (id -> ID id1 .)
    EQUAL           reduce using rule 22 (id -> ID id1 .)


state 57

    (23) id1 -> L_SB . expression R_SB id2
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    expression                     shift and go to state 65
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 58

    (24) id1 -> empty .

    COMA            reduce using rule 24 (id1 -> empty .)
    R_P             reduce using rule 24 (id1 -> empty .)
    EQUAL           reduce using rule 24 (id1 -> empty .)
    MULT            reduce using rule 24 (id1 -> empty .)
    DIV             reduce using rule 24 (id1 -> empty .)
    MOD             reduce using rule 24 (id1 -> empty .)
    PLUS            reduce using rule 24 (id1 -> empty .)
    MINUS           reduce using rule 24 (id1 -> empty .)
    LESSTHAN        reduce using rule 24 (id1 -> empty .)
    LESSTHANEQ      reduce using rule 24 (id1 -> empty .)
    GREATERTHAN     reduce using rule 24 (id1 -> empty .)
    GREATERTHANEQ   reduce using rule 24 (id1 -> empty .)
    EQ              reduce using rule 24 (id1 -> empty .)
    DIFERENT        reduce using rule 24 (id1 -> empty .)
    AND             reduce using rule 24 (id1 -> empty .)
    OR              reduce using rule 24 (id1 -> empty .)
    R_SB            reduce using rule 24 (id1 -> empty .)
    ID              reduce using rule 24 (id1 -> empty .)
    RETURN          reduce using rule 24 (id1 -> empty .)
    READ            reduce using rule 24 (id1 -> empty .)
    PRINT           reduce using rule 24 (id1 -> empty .)
    IF              reduce using rule 24 (id1 -> empty .)
    WHILE           reduce using rule 24 (id1 -> empty .)
    FOR             reduce using rule 24 (id1 -> empty .)
    L_P             reduce using rule 24 (id1 -> empty .)
    CTE_I           reduce using rule 24 (id1 -> empty .)
    CTE_F           reduce using rule 24 (id1 -> empty .)
    CTE_CHAR        reduce using rule 24 (id1 -> empty .)
    R_B             reduce using rule 24 (id1 -> empty .)
    SEMICOLON       reduce using rule 24 (id1 -> empty .)
    TO              reduce using rule 24 (id1 -> empty .)
    DO              reduce using rule 24 (id1 -> empty .)


state 59

    (28) function -> FUNC func_type ID L_P params R_P . var_declaration L_B statements R_B
    (9) var_declaration -> . VAR var1
    (10) var_declaration -> . empty
    (105) empty -> .

    VAR             shift and go to state 7
    L_B             reduce using rule 105 (empty -> .)

    var_declaration                shift and go to state 77
    empty                          shift and go to state 8

state 60

    (20) dec_id2 -> L_SB . CTE_I R_SB

    CTE_I           shift and go to state 78


state 61

    (18) dec_id1 -> L_SB CTE_I R_SB dec_id2 .

    COMA            reduce using rule 18 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)
    SEMICOLON       reduce using rule 18 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)


state 62

    (21) dec_id2 -> empty .

    COMA            reduce using rule 21 (dec_id2 -> empty .)
    SEMICOLON       reduce using rule 21 (dec_id2 -> empty .)


state 63

    (2) main -> MAIN L_P params R_P var_declaration L_B . statements R_B
    (35) statements -> . statement statements
    (36) statements -> . empty
    (37) statement -> . assignation
    (38) statement -> . call_func
    (39) statement -> . return_func
    (40) statement -> . read
    (41) statement -> . write
    (42) statement -> . decision_statement
    (43) statement -> . repetition_statement
    (44) statement -> . expression
    (105) empty -> .
    (45) assignation -> . id EQUAL expression SEMICOLON
    (51) call_func -> . ID L_P args R_P SEMICOLON
    (52) return_func -> . RETURN L_P expression R_P SEMICOLON
    (53) read -> . READ L_P read_args R_P SEMICOLON
    (57) write -> . PRINT L_P write_args R_P SEMICOLON
    (63) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (66) repetition_statement -> . while_statement
    (67) repetition_statement -> . for_statement
    (71) expression -> . texp op1
    (22) id -> . ID id1
    (69) while_statement -> . WHILE L_P expression R_P do_statement
    (68) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    R_B             reduce using rule 105 (empty -> .)
    ID              shift and go to state 91
    RETURN          shift and go to state 92
    READ            shift and go to state 93
    PRINT           shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 98
    FOR             shift and go to state 99
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    statements                     shift and go to state 79
    statement                      shift and go to state 80
    empty                          shift and go to state 81
    assignation                    shift and go to state 82
    call_func                      shift and go to state 83
    return_func                    shift and go to state 84
    read                           shift and go to state 85
    write                          shift and go to state 86
    decision_statement             shift and go to state 87
    repetition_statement           shift and go to state 88
    expression                     shift and go to state 89
    id                             shift and go to state 90
    while_statement                shift and go to state 96
    for_statement                  shift and go to state 97
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 64

    (33) params1 -> COMA params .

    R_P             reduce using rule 33 (params1 -> COMA params .)


state 65

    (23) id1 -> L_SB expression . R_SB id2

    R_SB            shift and go to state 100


state 66

    (71) expression -> texp . op1
    (84) op1 -> . OR expression
    (85) op1 -> . empty
    (105) empty -> .

    OR              shift and go to state 102
    R_SB            reduce using rule 105 (empty -> .)
    ID              reduce using rule 105 (empty -> .)
    RETURN          reduce using rule 105 (empty -> .)
    READ            reduce using rule 105 (empty -> .)
    PRINT           reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    WHILE           reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    L_P             reduce using rule 105 (empty -> .)
    CTE_I           reduce using rule 105 (empty -> .)
    CTE_F           reduce using rule 105 (empty -> .)
    CTE_CHAR        reduce using rule 105 (empty -> .)
    R_B             reduce using rule 105 (empty -> .)
    R_P             reduce using rule 105 (empty -> .)
    COMA            reduce using rule 105 (empty -> .)
    SEMICOLON       reduce using rule 105 (empty -> .)
    TO              reduce using rule 105 (empty -> .)
    DO              reduce using rule 105 (empty -> .)

    op1                            shift and go to state 101
    empty                          shift and go to state 103

state 67

    (72) texp -> gexp . op2
    (86) op2 -> . AND texp
    (87) op2 -> . empty
    (105) empty -> .

    AND             shift and go to state 105
    OR              reduce using rule 105 (empty -> .)
    R_SB            reduce using rule 105 (empty -> .)
    ID              reduce using rule 105 (empty -> .)
    RETURN          reduce using rule 105 (empty -> .)
    READ            reduce using rule 105 (empty -> .)
    PRINT           reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    WHILE           reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    L_P             reduce using rule 105 (empty -> .)
    CTE_I           reduce using rule 105 (empty -> .)
    CTE_F           reduce using rule 105 (empty -> .)
    CTE_CHAR        reduce using rule 105 (empty -> .)
    R_B             reduce using rule 105 (empty -> .)
    R_P             reduce using rule 105 (empty -> .)
    COMA            reduce using rule 105 (empty -> .)
    SEMICOLON       reduce using rule 105 (empty -> .)
    TO              reduce using rule 105 (empty -> .)
    DO              reduce using rule 105 (empty -> .)

    op2                            shift and go to state 104
    empty                          shift and go to state 106

state 68

    (73) gexp -> nexp . op3aux
    (94) op3aux -> . op3 nexp
    (95) op3aux -> . empty
    (88) op3 -> . LESSTHAN
    (89) op3 -> . LESSTHANEQ
    (90) op3 -> . GREATERTHAN
    (91) op3 -> . GREATERTHANEQ
    (92) op3 -> . EQ
    (93) op3 -> . DIFERENT
    (105) empty -> .

    LESSTHAN        shift and go to state 110
    LESSTHANEQ      shift and go to state 111
    GREATERTHAN     shift and go to state 112
    GREATERTHANEQ   shift and go to state 113
    EQ              shift and go to state 114
    DIFERENT        shift and go to state 115
    AND             reduce using rule 105 (empty -> .)
    OR              reduce using rule 105 (empty -> .)
    R_SB            reduce using rule 105 (empty -> .)
    ID              reduce using rule 105 (empty -> .)
    RETURN          reduce using rule 105 (empty -> .)
    READ            reduce using rule 105 (empty -> .)
    PRINT           reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    WHILE           reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    L_P             reduce using rule 105 (empty -> .)
    CTE_I           reduce using rule 105 (empty -> .)
    CTE_F           reduce using rule 105 (empty -> .)
    CTE_CHAR        reduce using rule 105 (empty -> .)
    R_B             reduce using rule 105 (empty -> .)
    R_P             reduce using rule 105 (empty -> .)
    COMA            reduce using rule 105 (empty -> .)
    SEMICOLON       reduce using rule 105 (empty -> .)
    TO              reduce using rule 105 (empty -> .)
    DO              reduce using rule 105 (empty -> .)

    op3aux                         shift and go to state 107
    op3                            shift and go to state 108
    empty                          shift and go to state 109

state 69

    (74) nexp -> term . op4aux
    (98) op4aux -> . op4 nexp
    (99) op4aux -> . empty
    (96) op4 -> . PLUS
    (97) op4 -> . MINUS
    (105) empty -> .

    PLUS            shift and go to state 119
    MINUS           shift and go to state 120
    LESSTHAN        reduce using rule 105 (empty -> .)
    LESSTHANEQ      reduce using rule 105 (empty -> .)
    GREATERTHAN     reduce using rule 105 (empty -> .)
    GREATERTHANEQ   reduce using rule 105 (empty -> .)
    EQ              reduce using rule 105 (empty -> .)
    DIFERENT        reduce using rule 105 (empty -> .)
    AND             reduce using rule 105 (empty -> .)
    OR              reduce using rule 105 (empty -> .)
    R_SB            reduce using rule 105 (empty -> .)
    ID              reduce using rule 105 (empty -> .)
    RETURN          reduce using rule 105 (empty -> .)
    READ            reduce using rule 105 (empty -> .)
    PRINT           reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    WHILE           reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    L_P             reduce using rule 105 (empty -> .)
    CTE_I           reduce using rule 105 (empty -> .)
    CTE_F           reduce using rule 105 (empty -> .)
    CTE_CHAR        reduce using rule 105 (empty -> .)
    R_B             reduce using rule 105 (empty -> .)
    R_P             reduce using rule 105 (empty -> .)
    COMA            reduce using rule 105 (empty -> .)
    SEMICOLON       reduce using rule 105 (empty -> .)
    TO              reduce using rule 105 (empty -> .)
    DO              reduce using rule 105 (empty -> .)

    op4aux                         shift and go to state 116
    op4                            shift and go to state 117
    empty                          shift and go to state 118

state 70

    (75) term -> fact . op5aux
    (103) op5aux -> . op5 term
    (104) op5aux -> . empty
    (100) op5 -> . MULT
    (101) op5 -> . DIV
    (102) op5 -> . MOD
    (105) empty -> .

    MULT            shift and go to state 124
    DIV             shift and go to state 125
    MOD             shift and go to state 126
    PLUS            reduce using rule 105 (empty -> .)
    MINUS           reduce using rule 105 (empty -> .)
    LESSTHAN        reduce using rule 105 (empty -> .)
    LESSTHANEQ      reduce using rule 105 (empty -> .)
    GREATERTHAN     reduce using rule 105 (empty -> .)
    GREATERTHANEQ   reduce using rule 105 (empty -> .)
    EQ              reduce using rule 105 (empty -> .)
    DIFERENT        reduce using rule 105 (empty -> .)
    AND             reduce using rule 105 (empty -> .)
    OR              reduce using rule 105 (empty -> .)
    R_SB            reduce using rule 105 (empty -> .)
    ID              reduce using rule 105 (empty -> .)
    RETURN          reduce using rule 105 (empty -> .)
    READ            reduce using rule 105 (empty -> .)
    PRINT           reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    WHILE           reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    L_P             reduce using rule 105 (empty -> .)
    CTE_I           reduce using rule 105 (empty -> .)
    CTE_F           reduce using rule 105 (empty -> .)
    CTE_CHAR        reduce using rule 105 (empty -> .)
    R_B             reduce using rule 105 (empty -> .)
    R_P             reduce using rule 105 (empty -> .)
    COMA            reduce using rule 105 (empty -> .)
    SEMICOLON       reduce using rule 105 (empty -> .)
    TO              reduce using rule 105 (empty -> .)
    DO              reduce using rule 105 (empty -> .)

    op5aux                         shift and go to state 121
    op5                            shift and go to state 122
    empty                          shift and go to state 123

state 71

    (76) fact -> ID . fact1
    (79) fact1 -> . L_P args R_P
    (80) fact1 -> . id1
    (23) id1 -> . L_SB expression R_SB id2
    (24) id1 -> . empty
    (105) empty -> .

  ! shift/reduce conflict for L_P resolved as shift
    L_P             shift and go to state 128
    L_SB            shift and go to state 57
    MULT            reduce using rule 105 (empty -> .)
    DIV             reduce using rule 105 (empty -> .)
    MOD             reduce using rule 105 (empty -> .)
    PLUS            reduce using rule 105 (empty -> .)
    MINUS           reduce using rule 105 (empty -> .)
    LESSTHAN        reduce using rule 105 (empty -> .)
    LESSTHANEQ      reduce using rule 105 (empty -> .)
    GREATERTHAN     reduce using rule 105 (empty -> .)
    GREATERTHANEQ   reduce using rule 105 (empty -> .)
    EQ              reduce using rule 105 (empty -> .)
    DIFERENT        reduce using rule 105 (empty -> .)
    AND             reduce using rule 105 (empty -> .)
    OR              reduce using rule 105 (empty -> .)
    R_SB            reduce using rule 105 (empty -> .)
    R_P             reduce using rule 105 (empty -> .)
    ID              reduce using rule 105 (empty -> .)
    RETURN          reduce using rule 105 (empty -> .)
    READ            reduce using rule 105 (empty -> .)
    PRINT           reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    WHILE           reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    CTE_I           reduce using rule 105 (empty -> .)
    CTE_F           reduce using rule 105 (empty -> .)
    CTE_CHAR        reduce using rule 105 (empty -> .)
    R_B             reduce using rule 105 (empty -> .)
    COMA            reduce using rule 105 (empty -> .)
    SEMICOLON       reduce using rule 105 (empty -> .)
    TO              reduce using rule 105 (empty -> .)
    DO              reduce using rule 105 (empty -> .)

  ! L_P             [ reduce using rule 105 (empty -> .) ]

    fact1                          shift and go to state 127
    id1                            shift and go to state 129
    empty                          shift and go to state 58

state 72

    (77) fact -> L_P . expression R_P
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    expression                     shift and go to state 130
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 73

    (78) fact -> cte .

    MULT            reduce using rule 78 (fact -> cte .)
    DIV             reduce using rule 78 (fact -> cte .)
    MOD             reduce using rule 78 (fact -> cte .)
    PLUS            reduce using rule 78 (fact -> cte .)
    MINUS           reduce using rule 78 (fact -> cte .)
    LESSTHAN        reduce using rule 78 (fact -> cte .)
    LESSTHANEQ      reduce using rule 78 (fact -> cte .)
    GREATERTHAN     reduce using rule 78 (fact -> cte .)
    GREATERTHANEQ   reduce using rule 78 (fact -> cte .)
    EQ              reduce using rule 78 (fact -> cte .)
    DIFERENT        reduce using rule 78 (fact -> cte .)
    AND             reduce using rule 78 (fact -> cte .)
    OR              reduce using rule 78 (fact -> cte .)
    R_SB            reduce using rule 78 (fact -> cte .)
    ID              reduce using rule 78 (fact -> cte .)
    RETURN          reduce using rule 78 (fact -> cte .)
    READ            reduce using rule 78 (fact -> cte .)
    PRINT           reduce using rule 78 (fact -> cte .)
    IF              reduce using rule 78 (fact -> cte .)
    WHILE           reduce using rule 78 (fact -> cte .)
    FOR             reduce using rule 78 (fact -> cte .)
    L_P             reduce using rule 78 (fact -> cte .)
    CTE_I           reduce using rule 78 (fact -> cte .)
    CTE_F           reduce using rule 78 (fact -> cte .)
    CTE_CHAR        reduce using rule 78 (fact -> cte .)
    R_B             reduce using rule 78 (fact -> cte .)
    R_P             reduce using rule 78 (fact -> cte .)
    COMA            reduce using rule 78 (fact -> cte .)
    SEMICOLON       reduce using rule 78 (fact -> cte .)
    TO              reduce using rule 78 (fact -> cte .)
    DO              reduce using rule 78 (fact -> cte .)


state 74

    (81) cte -> CTE_I .

    MULT            reduce using rule 81 (cte -> CTE_I .)
    DIV             reduce using rule 81 (cte -> CTE_I .)
    MOD             reduce using rule 81 (cte -> CTE_I .)
    PLUS            reduce using rule 81 (cte -> CTE_I .)
    MINUS           reduce using rule 81 (cte -> CTE_I .)
    LESSTHAN        reduce using rule 81 (cte -> CTE_I .)
    LESSTHANEQ      reduce using rule 81 (cte -> CTE_I .)
    GREATERTHAN     reduce using rule 81 (cte -> CTE_I .)
    GREATERTHANEQ   reduce using rule 81 (cte -> CTE_I .)
    EQ              reduce using rule 81 (cte -> CTE_I .)
    DIFERENT        reduce using rule 81 (cte -> CTE_I .)
    AND             reduce using rule 81 (cte -> CTE_I .)
    OR              reduce using rule 81 (cte -> CTE_I .)
    R_SB            reduce using rule 81 (cte -> CTE_I .)
    ID              reduce using rule 81 (cte -> CTE_I .)
    RETURN          reduce using rule 81 (cte -> CTE_I .)
    READ            reduce using rule 81 (cte -> CTE_I .)
    PRINT           reduce using rule 81 (cte -> CTE_I .)
    IF              reduce using rule 81 (cte -> CTE_I .)
    WHILE           reduce using rule 81 (cte -> CTE_I .)
    FOR             reduce using rule 81 (cte -> CTE_I .)
    L_P             reduce using rule 81 (cte -> CTE_I .)
    CTE_I           reduce using rule 81 (cte -> CTE_I .)
    CTE_F           reduce using rule 81 (cte -> CTE_I .)
    CTE_CHAR        reduce using rule 81 (cte -> CTE_I .)
    R_B             reduce using rule 81 (cte -> CTE_I .)
    R_P             reduce using rule 81 (cte -> CTE_I .)
    COMA            reduce using rule 81 (cte -> CTE_I .)
    SEMICOLON       reduce using rule 81 (cte -> CTE_I .)
    TO              reduce using rule 81 (cte -> CTE_I .)
    DO              reduce using rule 81 (cte -> CTE_I .)


state 75

    (82) cte -> CTE_F .

    MULT            reduce using rule 82 (cte -> CTE_F .)
    DIV             reduce using rule 82 (cte -> CTE_F .)
    MOD             reduce using rule 82 (cte -> CTE_F .)
    PLUS            reduce using rule 82 (cte -> CTE_F .)
    MINUS           reduce using rule 82 (cte -> CTE_F .)
    LESSTHAN        reduce using rule 82 (cte -> CTE_F .)
    LESSTHANEQ      reduce using rule 82 (cte -> CTE_F .)
    GREATERTHAN     reduce using rule 82 (cte -> CTE_F .)
    GREATERTHANEQ   reduce using rule 82 (cte -> CTE_F .)
    EQ              reduce using rule 82 (cte -> CTE_F .)
    DIFERENT        reduce using rule 82 (cte -> CTE_F .)
    AND             reduce using rule 82 (cte -> CTE_F .)
    OR              reduce using rule 82 (cte -> CTE_F .)
    R_SB            reduce using rule 82 (cte -> CTE_F .)
    ID              reduce using rule 82 (cte -> CTE_F .)
    RETURN          reduce using rule 82 (cte -> CTE_F .)
    READ            reduce using rule 82 (cte -> CTE_F .)
    PRINT           reduce using rule 82 (cte -> CTE_F .)
    IF              reduce using rule 82 (cte -> CTE_F .)
    WHILE           reduce using rule 82 (cte -> CTE_F .)
    FOR             reduce using rule 82 (cte -> CTE_F .)
    L_P             reduce using rule 82 (cte -> CTE_F .)
    CTE_I           reduce using rule 82 (cte -> CTE_F .)
    CTE_F           reduce using rule 82 (cte -> CTE_F .)
    CTE_CHAR        reduce using rule 82 (cte -> CTE_F .)
    R_B             reduce using rule 82 (cte -> CTE_F .)
    R_P             reduce using rule 82 (cte -> CTE_F .)
    COMA            reduce using rule 82 (cte -> CTE_F .)
    SEMICOLON       reduce using rule 82 (cte -> CTE_F .)
    TO              reduce using rule 82 (cte -> CTE_F .)
    DO              reduce using rule 82 (cte -> CTE_F .)


state 76

    (83) cte -> CTE_CHAR .

    MULT            reduce using rule 83 (cte -> CTE_CHAR .)
    DIV             reduce using rule 83 (cte -> CTE_CHAR .)
    MOD             reduce using rule 83 (cte -> CTE_CHAR .)
    PLUS            reduce using rule 83 (cte -> CTE_CHAR .)
    MINUS           reduce using rule 83 (cte -> CTE_CHAR .)
    LESSTHAN        reduce using rule 83 (cte -> CTE_CHAR .)
    LESSTHANEQ      reduce using rule 83 (cte -> CTE_CHAR .)
    GREATERTHAN     reduce using rule 83 (cte -> CTE_CHAR .)
    GREATERTHANEQ   reduce using rule 83 (cte -> CTE_CHAR .)
    EQ              reduce using rule 83 (cte -> CTE_CHAR .)
    DIFERENT        reduce using rule 83 (cte -> CTE_CHAR .)
    AND             reduce using rule 83 (cte -> CTE_CHAR .)
    OR              reduce using rule 83 (cte -> CTE_CHAR .)
    R_SB            reduce using rule 83 (cte -> CTE_CHAR .)
    ID              reduce using rule 83 (cte -> CTE_CHAR .)
    RETURN          reduce using rule 83 (cte -> CTE_CHAR .)
    READ            reduce using rule 83 (cte -> CTE_CHAR .)
    PRINT           reduce using rule 83 (cte -> CTE_CHAR .)
    IF              reduce using rule 83 (cte -> CTE_CHAR .)
    WHILE           reduce using rule 83 (cte -> CTE_CHAR .)
    FOR             reduce using rule 83 (cte -> CTE_CHAR .)
    L_P             reduce using rule 83 (cte -> CTE_CHAR .)
    CTE_I           reduce using rule 83 (cte -> CTE_CHAR .)
    CTE_F           reduce using rule 83 (cte -> CTE_CHAR .)
    CTE_CHAR        reduce using rule 83 (cte -> CTE_CHAR .)
    R_B             reduce using rule 83 (cte -> CTE_CHAR .)
    R_P             reduce using rule 83 (cte -> CTE_CHAR .)
    COMA            reduce using rule 83 (cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 83 (cte -> CTE_CHAR .)
    TO              reduce using rule 83 (cte -> CTE_CHAR .)
    DO              reduce using rule 83 (cte -> CTE_CHAR .)


state 77

    (28) function -> FUNC func_type ID L_P params R_P var_declaration . L_B statements R_B

    L_B             shift and go to state 131


state 78

    (20) dec_id2 -> L_SB CTE_I . R_SB

    R_SB            shift and go to state 132


state 79

    (2) main -> MAIN L_P params R_P var_declaration L_B statements . R_B

    R_B             shift and go to state 133


state 80

    (35) statements -> statement . statements
    (35) statements -> . statement statements
    (36) statements -> . empty
    (37) statement -> . assignation
    (38) statement -> . call_func
    (39) statement -> . return_func
    (40) statement -> . read
    (41) statement -> . write
    (42) statement -> . decision_statement
    (43) statement -> . repetition_statement
    (44) statement -> . expression
    (105) empty -> .
    (45) assignation -> . id EQUAL expression SEMICOLON
    (51) call_func -> . ID L_P args R_P SEMICOLON
    (52) return_func -> . RETURN L_P expression R_P SEMICOLON
    (53) read -> . READ L_P read_args R_P SEMICOLON
    (57) write -> . PRINT L_P write_args R_P SEMICOLON
    (63) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (66) repetition_statement -> . while_statement
    (67) repetition_statement -> . for_statement
    (71) expression -> . texp op1
    (22) id -> . ID id1
    (69) while_statement -> . WHILE L_P expression R_P do_statement
    (68) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    R_B             reduce using rule 105 (empty -> .)
    ID              shift and go to state 91
    RETURN          shift and go to state 92
    READ            shift and go to state 93
    PRINT           shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 98
    FOR             shift and go to state 99
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    statement                      shift and go to state 80
    statements                     shift and go to state 134
    empty                          shift and go to state 81
    assignation                    shift and go to state 82
    call_func                      shift and go to state 83
    return_func                    shift and go to state 84
    read                           shift and go to state 85
    write                          shift and go to state 86
    decision_statement             shift and go to state 87
    repetition_statement           shift and go to state 88
    expression                     shift and go to state 89
    id                             shift and go to state 90
    while_statement                shift and go to state 96
    for_statement                  shift and go to state 97
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 81

    (36) statements -> empty .

    R_B             reduce using rule 36 (statements -> empty .)


state 82

    (37) statement -> assignation .

    ID              reduce using rule 37 (statement -> assignation .)
    RETURN          reduce using rule 37 (statement -> assignation .)
    READ            reduce using rule 37 (statement -> assignation .)
    PRINT           reduce using rule 37 (statement -> assignation .)
    IF              reduce using rule 37 (statement -> assignation .)
    WHILE           reduce using rule 37 (statement -> assignation .)
    FOR             reduce using rule 37 (statement -> assignation .)
    L_P             reduce using rule 37 (statement -> assignation .)
    CTE_I           reduce using rule 37 (statement -> assignation .)
    CTE_F           reduce using rule 37 (statement -> assignation .)
    CTE_CHAR        reduce using rule 37 (statement -> assignation .)
    R_B             reduce using rule 37 (statement -> assignation .)


state 83

    (38) statement -> call_func .

    ID              reduce using rule 38 (statement -> call_func .)
    RETURN          reduce using rule 38 (statement -> call_func .)
    READ            reduce using rule 38 (statement -> call_func .)
    PRINT           reduce using rule 38 (statement -> call_func .)
    IF              reduce using rule 38 (statement -> call_func .)
    WHILE           reduce using rule 38 (statement -> call_func .)
    FOR             reduce using rule 38 (statement -> call_func .)
    L_P             reduce using rule 38 (statement -> call_func .)
    CTE_I           reduce using rule 38 (statement -> call_func .)
    CTE_F           reduce using rule 38 (statement -> call_func .)
    CTE_CHAR        reduce using rule 38 (statement -> call_func .)
    R_B             reduce using rule 38 (statement -> call_func .)


state 84

    (39) statement -> return_func .

    ID              reduce using rule 39 (statement -> return_func .)
    RETURN          reduce using rule 39 (statement -> return_func .)
    READ            reduce using rule 39 (statement -> return_func .)
    PRINT           reduce using rule 39 (statement -> return_func .)
    IF              reduce using rule 39 (statement -> return_func .)
    WHILE           reduce using rule 39 (statement -> return_func .)
    FOR             reduce using rule 39 (statement -> return_func .)
    L_P             reduce using rule 39 (statement -> return_func .)
    CTE_I           reduce using rule 39 (statement -> return_func .)
    CTE_F           reduce using rule 39 (statement -> return_func .)
    CTE_CHAR        reduce using rule 39 (statement -> return_func .)
    R_B             reduce using rule 39 (statement -> return_func .)


state 85

    (40) statement -> read .

    ID              reduce using rule 40 (statement -> read .)
    RETURN          reduce using rule 40 (statement -> read .)
    READ            reduce using rule 40 (statement -> read .)
    PRINT           reduce using rule 40 (statement -> read .)
    IF              reduce using rule 40 (statement -> read .)
    WHILE           reduce using rule 40 (statement -> read .)
    FOR             reduce using rule 40 (statement -> read .)
    L_P             reduce using rule 40 (statement -> read .)
    CTE_I           reduce using rule 40 (statement -> read .)
    CTE_F           reduce using rule 40 (statement -> read .)
    CTE_CHAR        reduce using rule 40 (statement -> read .)
    R_B             reduce using rule 40 (statement -> read .)


state 86

    (41) statement -> write .

    ID              reduce using rule 41 (statement -> write .)
    RETURN          reduce using rule 41 (statement -> write .)
    READ            reduce using rule 41 (statement -> write .)
    PRINT           reduce using rule 41 (statement -> write .)
    IF              reduce using rule 41 (statement -> write .)
    WHILE           reduce using rule 41 (statement -> write .)
    FOR             reduce using rule 41 (statement -> write .)
    L_P             reduce using rule 41 (statement -> write .)
    CTE_I           reduce using rule 41 (statement -> write .)
    CTE_F           reduce using rule 41 (statement -> write .)
    CTE_CHAR        reduce using rule 41 (statement -> write .)
    R_B             reduce using rule 41 (statement -> write .)


state 87

    (42) statement -> decision_statement .

    ID              reduce using rule 42 (statement -> decision_statement .)
    RETURN          reduce using rule 42 (statement -> decision_statement .)
    READ            reduce using rule 42 (statement -> decision_statement .)
    PRINT           reduce using rule 42 (statement -> decision_statement .)
    IF              reduce using rule 42 (statement -> decision_statement .)
    WHILE           reduce using rule 42 (statement -> decision_statement .)
    FOR             reduce using rule 42 (statement -> decision_statement .)
    L_P             reduce using rule 42 (statement -> decision_statement .)
    CTE_I           reduce using rule 42 (statement -> decision_statement .)
    CTE_F           reduce using rule 42 (statement -> decision_statement .)
    CTE_CHAR        reduce using rule 42 (statement -> decision_statement .)
    R_B             reduce using rule 42 (statement -> decision_statement .)


state 88

    (43) statement -> repetition_statement .

    ID              reduce using rule 43 (statement -> repetition_statement .)
    RETURN          reduce using rule 43 (statement -> repetition_statement .)
    READ            reduce using rule 43 (statement -> repetition_statement .)
    PRINT           reduce using rule 43 (statement -> repetition_statement .)
    IF              reduce using rule 43 (statement -> repetition_statement .)
    WHILE           reduce using rule 43 (statement -> repetition_statement .)
    FOR             reduce using rule 43 (statement -> repetition_statement .)
    L_P             reduce using rule 43 (statement -> repetition_statement .)
    CTE_I           reduce using rule 43 (statement -> repetition_statement .)
    CTE_F           reduce using rule 43 (statement -> repetition_statement .)
    CTE_CHAR        reduce using rule 43 (statement -> repetition_statement .)
    R_B             reduce using rule 43 (statement -> repetition_statement .)


state 89

    (44) statement -> expression .

    ID              reduce using rule 44 (statement -> expression .)
    RETURN          reduce using rule 44 (statement -> expression .)
    READ            reduce using rule 44 (statement -> expression .)
    PRINT           reduce using rule 44 (statement -> expression .)
    IF              reduce using rule 44 (statement -> expression .)
    WHILE           reduce using rule 44 (statement -> expression .)
    FOR             reduce using rule 44 (statement -> expression .)
    L_P             reduce using rule 44 (statement -> expression .)
    CTE_I           reduce using rule 44 (statement -> expression .)
    CTE_F           reduce using rule 44 (statement -> expression .)
    CTE_CHAR        reduce using rule 44 (statement -> expression .)
    R_B             reduce using rule 44 (statement -> expression .)


state 90

    (45) assignation -> id . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 135


state 91

    (51) call_func -> ID . L_P args R_P SEMICOLON
    (22) id -> ID . id1
    (76) fact -> ID . fact1
    (23) id1 -> . L_SB expression R_SB id2
    (24) id1 -> . empty
    (79) fact1 -> . L_P args R_P
    (80) fact1 -> . id1
    (105) empty -> .

  ! shift/reduce conflict for L_P resolved as shift
    L_P             shift and go to state 136
    L_SB            shift and go to state 57
    EQUAL           reduce using rule 105 (empty -> .)
    MULT            reduce using rule 105 (empty -> .)
    DIV             reduce using rule 105 (empty -> .)
    MOD             reduce using rule 105 (empty -> .)
    PLUS            reduce using rule 105 (empty -> .)
    MINUS           reduce using rule 105 (empty -> .)
    LESSTHAN        reduce using rule 105 (empty -> .)
    LESSTHANEQ      reduce using rule 105 (empty -> .)
    GREATERTHAN     reduce using rule 105 (empty -> .)
    GREATERTHANEQ   reduce using rule 105 (empty -> .)
    EQ              reduce using rule 105 (empty -> .)
    DIFERENT        reduce using rule 105 (empty -> .)
    AND             reduce using rule 105 (empty -> .)
    OR              reduce using rule 105 (empty -> .)
    ID              reduce using rule 105 (empty -> .)
    RETURN          reduce using rule 105 (empty -> .)
    READ            reduce using rule 105 (empty -> .)
    PRINT           reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    WHILE           reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    CTE_I           reduce using rule 105 (empty -> .)
    CTE_F           reduce using rule 105 (empty -> .)
    CTE_CHAR        reduce using rule 105 (empty -> .)
    R_B             reduce using rule 105 (empty -> .)

  ! L_P             [ reduce using rule 105 (empty -> .) ]

    id1                            shift and go to state 137
    fact1                          shift and go to state 127
    empty                          shift and go to state 58

state 92

    (52) return_func -> RETURN . L_P expression R_P SEMICOLON

    L_P             shift and go to state 138


state 93

    (53) read -> READ . L_P read_args R_P SEMICOLON

    L_P             shift and go to state 139


state 94

    (57) write -> PRINT . L_P write_args R_P SEMICOLON

    L_P             shift and go to state 140


state 95

    (63) decision_statement -> IF . L_P expression R_P L_B statements R_B decision_statement1

    L_P             shift and go to state 141


state 96

    (66) repetition_statement -> while_statement .

    ID              reduce using rule 66 (repetition_statement -> while_statement .)
    RETURN          reduce using rule 66 (repetition_statement -> while_statement .)
    READ            reduce using rule 66 (repetition_statement -> while_statement .)
    PRINT           reduce using rule 66 (repetition_statement -> while_statement .)
    IF              reduce using rule 66 (repetition_statement -> while_statement .)
    WHILE           reduce using rule 66 (repetition_statement -> while_statement .)
    FOR             reduce using rule 66 (repetition_statement -> while_statement .)
    L_P             reduce using rule 66 (repetition_statement -> while_statement .)
    CTE_I           reduce using rule 66 (repetition_statement -> while_statement .)
    CTE_F           reduce using rule 66 (repetition_statement -> while_statement .)
    CTE_CHAR        reduce using rule 66 (repetition_statement -> while_statement .)
    R_B             reduce using rule 66 (repetition_statement -> while_statement .)


state 97

    (67) repetition_statement -> for_statement .

    ID              reduce using rule 67 (repetition_statement -> for_statement .)
    RETURN          reduce using rule 67 (repetition_statement -> for_statement .)
    READ            reduce using rule 67 (repetition_statement -> for_statement .)
    PRINT           reduce using rule 67 (repetition_statement -> for_statement .)
    IF              reduce using rule 67 (repetition_statement -> for_statement .)
    WHILE           reduce using rule 67 (repetition_statement -> for_statement .)
    FOR             reduce using rule 67 (repetition_statement -> for_statement .)
    L_P             reduce using rule 67 (repetition_statement -> for_statement .)
    CTE_I           reduce using rule 67 (repetition_statement -> for_statement .)
    CTE_F           reduce using rule 67 (repetition_statement -> for_statement .)
    CTE_CHAR        reduce using rule 67 (repetition_statement -> for_statement .)
    R_B             reduce using rule 67 (repetition_statement -> for_statement .)


state 98

    (69) while_statement -> WHILE . L_P expression R_P do_statement

    L_P             shift and go to state 142


state 99

    (68) for_statement -> FOR . id EQUAL expression TO expression do_statement
    (22) id -> . ID id1

    ID              shift and go to state 44

    id                             shift and go to state 143

state 100

    (23) id1 -> L_SB expression R_SB . id2
    (25) id2 -> . L_SB expression R_SB
    (26) id2 -> . empty
    (105) empty -> .

    L_SB            shift and go to state 144
    COMA            reduce using rule 105 (empty -> .)
    R_P             reduce using rule 105 (empty -> .)
    EQUAL           reduce using rule 105 (empty -> .)
    MULT            reduce using rule 105 (empty -> .)
    DIV             reduce using rule 105 (empty -> .)
    MOD             reduce using rule 105 (empty -> .)
    PLUS            reduce using rule 105 (empty -> .)
    MINUS           reduce using rule 105 (empty -> .)
    LESSTHAN        reduce using rule 105 (empty -> .)
    LESSTHANEQ      reduce using rule 105 (empty -> .)
    GREATERTHAN     reduce using rule 105 (empty -> .)
    GREATERTHANEQ   reduce using rule 105 (empty -> .)
    EQ              reduce using rule 105 (empty -> .)
    DIFERENT        reduce using rule 105 (empty -> .)
    AND             reduce using rule 105 (empty -> .)
    OR              reduce using rule 105 (empty -> .)
    R_SB            reduce using rule 105 (empty -> .)
    ID              reduce using rule 105 (empty -> .)
    RETURN          reduce using rule 105 (empty -> .)
    READ            reduce using rule 105 (empty -> .)
    PRINT           reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    WHILE           reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    L_P             reduce using rule 105 (empty -> .)
    CTE_I           reduce using rule 105 (empty -> .)
    CTE_F           reduce using rule 105 (empty -> .)
    CTE_CHAR        reduce using rule 105 (empty -> .)
    R_B             reduce using rule 105 (empty -> .)
    SEMICOLON       reduce using rule 105 (empty -> .)
    TO              reduce using rule 105 (empty -> .)
    DO              reduce using rule 105 (empty -> .)

    id2                            shift and go to state 145
    empty                          shift and go to state 146

state 101

    (71) expression -> texp op1 .

    R_SB            reduce using rule 71 (expression -> texp op1 .)
    ID              reduce using rule 71 (expression -> texp op1 .)
    RETURN          reduce using rule 71 (expression -> texp op1 .)
    READ            reduce using rule 71 (expression -> texp op1 .)
    PRINT           reduce using rule 71 (expression -> texp op1 .)
    IF              reduce using rule 71 (expression -> texp op1 .)
    WHILE           reduce using rule 71 (expression -> texp op1 .)
    FOR             reduce using rule 71 (expression -> texp op1 .)
    L_P             reduce using rule 71 (expression -> texp op1 .)
    CTE_I           reduce using rule 71 (expression -> texp op1 .)
    CTE_F           reduce using rule 71 (expression -> texp op1 .)
    CTE_CHAR        reduce using rule 71 (expression -> texp op1 .)
    R_B             reduce using rule 71 (expression -> texp op1 .)
    R_P             reduce using rule 71 (expression -> texp op1 .)
    COMA            reduce using rule 71 (expression -> texp op1 .)
    SEMICOLON       reduce using rule 71 (expression -> texp op1 .)
    TO              reduce using rule 71 (expression -> texp op1 .)
    DO              reduce using rule 71 (expression -> texp op1 .)


state 102

    (84) op1 -> OR . expression
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    expression                     shift and go to state 147
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 103

    (85) op1 -> empty .

    R_SB            reduce using rule 85 (op1 -> empty .)
    ID              reduce using rule 85 (op1 -> empty .)
    RETURN          reduce using rule 85 (op1 -> empty .)
    READ            reduce using rule 85 (op1 -> empty .)
    PRINT           reduce using rule 85 (op1 -> empty .)
    IF              reduce using rule 85 (op1 -> empty .)
    WHILE           reduce using rule 85 (op1 -> empty .)
    FOR             reduce using rule 85 (op1 -> empty .)
    L_P             reduce using rule 85 (op1 -> empty .)
    CTE_I           reduce using rule 85 (op1 -> empty .)
    CTE_F           reduce using rule 85 (op1 -> empty .)
    CTE_CHAR        reduce using rule 85 (op1 -> empty .)
    R_B             reduce using rule 85 (op1 -> empty .)
    R_P             reduce using rule 85 (op1 -> empty .)
    COMA            reduce using rule 85 (op1 -> empty .)
    SEMICOLON       reduce using rule 85 (op1 -> empty .)
    TO              reduce using rule 85 (op1 -> empty .)
    DO              reduce using rule 85 (op1 -> empty .)


state 104

    (72) texp -> gexp op2 .

    OR              reduce using rule 72 (texp -> gexp op2 .)
    R_SB            reduce using rule 72 (texp -> gexp op2 .)
    ID              reduce using rule 72 (texp -> gexp op2 .)
    RETURN          reduce using rule 72 (texp -> gexp op2 .)
    READ            reduce using rule 72 (texp -> gexp op2 .)
    PRINT           reduce using rule 72 (texp -> gexp op2 .)
    IF              reduce using rule 72 (texp -> gexp op2 .)
    WHILE           reduce using rule 72 (texp -> gexp op2 .)
    FOR             reduce using rule 72 (texp -> gexp op2 .)
    L_P             reduce using rule 72 (texp -> gexp op2 .)
    CTE_I           reduce using rule 72 (texp -> gexp op2 .)
    CTE_F           reduce using rule 72 (texp -> gexp op2 .)
    CTE_CHAR        reduce using rule 72 (texp -> gexp op2 .)
    R_B             reduce using rule 72 (texp -> gexp op2 .)
    R_P             reduce using rule 72 (texp -> gexp op2 .)
    COMA            reduce using rule 72 (texp -> gexp op2 .)
    SEMICOLON       reduce using rule 72 (texp -> gexp op2 .)
    TO              reduce using rule 72 (texp -> gexp op2 .)
    DO              reduce using rule 72 (texp -> gexp op2 .)


state 105

    (86) op2 -> AND . texp
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    texp                           shift and go to state 148
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 106

    (87) op2 -> empty .

    OR              reduce using rule 87 (op2 -> empty .)
    R_SB            reduce using rule 87 (op2 -> empty .)
    ID              reduce using rule 87 (op2 -> empty .)
    RETURN          reduce using rule 87 (op2 -> empty .)
    READ            reduce using rule 87 (op2 -> empty .)
    PRINT           reduce using rule 87 (op2 -> empty .)
    IF              reduce using rule 87 (op2 -> empty .)
    WHILE           reduce using rule 87 (op2 -> empty .)
    FOR             reduce using rule 87 (op2 -> empty .)
    L_P             reduce using rule 87 (op2 -> empty .)
    CTE_I           reduce using rule 87 (op2 -> empty .)
    CTE_F           reduce using rule 87 (op2 -> empty .)
    CTE_CHAR        reduce using rule 87 (op2 -> empty .)
    R_B             reduce using rule 87 (op2 -> empty .)
    R_P             reduce using rule 87 (op2 -> empty .)
    COMA            reduce using rule 87 (op2 -> empty .)
    SEMICOLON       reduce using rule 87 (op2 -> empty .)
    TO              reduce using rule 87 (op2 -> empty .)
    DO              reduce using rule 87 (op2 -> empty .)


state 107

    (73) gexp -> nexp op3aux .

    AND             reduce using rule 73 (gexp -> nexp op3aux .)
    OR              reduce using rule 73 (gexp -> nexp op3aux .)
    R_SB            reduce using rule 73 (gexp -> nexp op3aux .)
    ID              reduce using rule 73 (gexp -> nexp op3aux .)
    RETURN          reduce using rule 73 (gexp -> nexp op3aux .)
    READ            reduce using rule 73 (gexp -> nexp op3aux .)
    PRINT           reduce using rule 73 (gexp -> nexp op3aux .)
    IF              reduce using rule 73 (gexp -> nexp op3aux .)
    WHILE           reduce using rule 73 (gexp -> nexp op3aux .)
    FOR             reduce using rule 73 (gexp -> nexp op3aux .)
    L_P             reduce using rule 73 (gexp -> nexp op3aux .)
    CTE_I           reduce using rule 73 (gexp -> nexp op3aux .)
    CTE_F           reduce using rule 73 (gexp -> nexp op3aux .)
    CTE_CHAR        reduce using rule 73 (gexp -> nexp op3aux .)
    R_B             reduce using rule 73 (gexp -> nexp op3aux .)
    R_P             reduce using rule 73 (gexp -> nexp op3aux .)
    COMA            reduce using rule 73 (gexp -> nexp op3aux .)
    SEMICOLON       reduce using rule 73 (gexp -> nexp op3aux .)
    TO              reduce using rule 73 (gexp -> nexp op3aux .)
    DO              reduce using rule 73 (gexp -> nexp op3aux .)


state 108

    (94) op3aux -> op3 . nexp
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    nexp                           shift and go to state 149
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 109

    (95) op3aux -> empty .

    AND             reduce using rule 95 (op3aux -> empty .)
    OR              reduce using rule 95 (op3aux -> empty .)
    R_SB            reduce using rule 95 (op3aux -> empty .)
    ID              reduce using rule 95 (op3aux -> empty .)
    RETURN          reduce using rule 95 (op3aux -> empty .)
    READ            reduce using rule 95 (op3aux -> empty .)
    PRINT           reduce using rule 95 (op3aux -> empty .)
    IF              reduce using rule 95 (op3aux -> empty .)
    WHILE           reduce using rule 95 (op3aux -> empty .)
    FOR             reduce using rule 95 (op3aux -> empty .)
    L_P             reduce using rule 95 (op3aux -> empty .)
    CTE_I           reduce using rule 95 (op3aux -> empty .)
    CTE_F           reduce using rule 95 (op3aux -> empty .)
    CTE_CHAR        reduce using rule 95 (op3aux -> empty .)
    R_B             reduce using rule 95 (op3aux -> empty .)
    R_P             reduce using rule 95 (op3aux -> empty .)
    COMA            reduce using rule 95 (op3aux -> empty .)
    SEMICOLON       reduce using rule 95 (op3aux -> empty .)
    TO              reduce using rule 95 (op3aux -> empty .)
    DO              reduce using rule 95 (op3aux -> empty .)


state 110

    (88) op3 -> LESSTHAN .

    ID              reduce using rule 88 (op3 -> LESSTHAN .)
    L_P             reduce using rule 88 (op3 -> LESSTHAN .)
    CTE_I           reduce using rule 88 (op3 -> LESSTHAN .)
    CTE_F           reduce using rule 88 (op3 -> LESSTHAN .)
    CTE_CHAR        reduce using rule 88 (op3 -> LESSTHAN .)


state 111

    (89) op3 -> LESSTHANEQ .

    ID              reduce using rule 89 (op3 -> LESSTHANEQ .)
    L_P             reduce using rule 89 (op3 -> LESSTHANEQ .)
    CTE_I           reduce using rule 89 (op3 -> LESSTHANEQ .)
    CTE_F           reduce using rule 89 (op3 -> LESSTHANEQ .)
    CTE_CHAR        reduce using rule 89 (op3 -> LESSTHANEQ .)


state 112

    (90) op3 -> GREATERTHAN .

    ID              reduce using rule 90 (op3 -> GREATERTHAN .)
    L_P             reduce using rule 90 (op3 -> GREATERTHAN .)
    CTE_I           reduce using rule 90 (op3 -> GREATERTHAN .)
    CTE_F           reduce using rule 90 (op3 -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 90 (op3 -> GREATERTHAN .)


state 113

    (91) op3 -> GREATERTHANEQ .

    ID              reduce using rule 91 (op3 -> GREATERTHANEQ .)
    L_P             reduce using rule 91 (op3 -> GREATERTHANEQ .)
    CTE_I           reduce using rule 91 (op3 -> GREATERTHANEQ .)
    CTE_F           reduce using rule 91 (op3 -> GREATERTHANEQ .)
    CTE_CHAR        reduce using rule 91 (op3 -> GREATERTHANEQ .)


state 114

    (92) op3 -> EQ .

    ID              reduce using rule 92 (op3 -> EQ .)
    L_P             reduce using rule 92 (op3 -> EQ .)
    CTE_I           reduce using rule 92 (op3 -> EQ .)
    CTE_F           reduce using rule 92 (op3 -> EQ .)
    CTE_CHAR        reduce using rule 92 (op3 -> EQ .)


state 115

    (93) op3 -> DIFERENT .

    ID              reduce using rule 93 (op3 -> DIFERENT .)
    L_P             reduce using rule 93 (op3 -> DIFERENT .)
    CTE_I           reduce using rule 93 (op3 -> DIFERENT .)
    CTE_F           reduce using rule 93 (op3 -> DIFERENT .)
    CTE_CHAR        reduce using rule 93 (op3 -> DIFERENT .)


state 116

    (74) nexp -> term op4aux .

    LESSTHAN        reduce using rule 74 (nexp -> term op4aux .)
    LESSTHANEQ      reduce using rule 74 (nexp -> term op4aux .)
    GREATERTHAN     reduce using rule 74 (nexp -> term op4aux .)
    GREATERTHANEQ   reduce using rule 74 (nexp -> term op4aux .)
    EQ              reduce using rule 74 (nexp -> term op4aux .)
    DIFERENT        reduce using rule 74 (nexp -> term op4aux .)
    AND             reduce using rule 74 (nexp -> term op4aux .)
    OR              reduce using rule 74 (nexp -> term op4aux .)
    R_SB            reduce using rule 74 (nexp -> term op4aux .)
    ID              reduce using rule 74 (nexp -> term op4aux .)
    RETURN          reduce using rule 74 (nexp -> term op4aux .)
    READ            reduce using rule 74 (nexp -> term op4aux .)
    PRINT           reduce using rule 74 (nexp -> term op4aux .)
    IF              reduce using rule 74 (nexp -> term op4aux .)
    WHILE           reduce using rule 74 (nexp -> term op4aux .)
    FOR             reduce using rule 74 (nexp -> term op4aux .)
    L_P             reduce using rule 74 (nexp -> term op4aux .)
    CTE_I           reduce using rule 74 (nexp -> term op4aux .)
    CTE_F           reduce using rule 74 (nexp -> term op4aux .)
    CTE_CHAR        reduce using rule 74 (nexp -> term op4aux .)
    R_B             reduce using rule 74 (nexp -> term op4aux .)
    R_P             reduce using rule 74 (nexp -> term op4aux .)
    COMA            reduce using rule 74 (nexp -> term op4aux .)
    SEMICOLON       reduce using rule 74 (nexp -> term op4aux .)
    TO              reduce using rule 74 (nexp -> term op4aux .)
    DO              reduce using rule 74 (nexp -> term op4aux .)


state 117

    (98) op4aux -> op4 . nexp
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    nexp                           shift and go to state 150
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 118

    (99) op4aux -> empty .

    LESSTHAN        reduce using rule 99 (op4aux -> empty .)
    LESSTHANEQ      reduce using rule 99 (op4aux -> empty .)
    GREATERTHAN     reduce using rule 99 (op4aux -> empty .)
    GREATERTHANEQ   reduce using rule 99 (op4aux -> empty .)
    EQ              reduce using rule 99 (op4aux -> empty .)
    DIFERENT        reduce using rule 99 (op4aux -> empty .)
    AND             reduce using rule 99 (op4aux -> empty .)
    OR              reduce using rule 99 (op4aux -> empty .)
    R_SB            reduce using rule 99 (op4aux -> empty .)
    ID              reduce using rule 99 (op4aux -> empty .)
    RETURN          reduce using rule 99 (op4aux -> empty .)
    READ            reduce using rule 99 (op4aux -> empty .)
    PRINT           reduce using rule 99 (op4aux -> empty .)
    IF              reduce using rule 99 (op4aux -> empty .)
    WHILE           reduce using rule 99 (op4aux -> empty .)
    FOR             reduce using rule 99 (op4aux -> empty .)
    L_P             reduce using rule 99 (op4aux -> empty .)
    CTE_I           reduce using rule 99 (op4aux -> empty .)
    CTE_F           reduce using rule 99 (op4aux -> empty .)
    CTE_CHAR        reduce using rule 99 (op4aux -> empty .)
    R_B             reduce using rule 99 (op4aux -> empty .)
    R_P             reduce using rule 99 (op4aux -> empty .)
    COMA            reduce using rule 99 (op4aux -> empty .)
    SEMICOLON       reduce using rule 99 (op4aux -> empty .)
    TO              reduce using rule 99 (op4aux -> empty .)
    DO              reduce using rule 99 (op4aux -> empty .)


state 119

    (96) op4 -> PLUS .

    ID              reduce using rule 96 (op4 -> PLUS .)
    L_P             reduce using rule 96 (op4 -> PLUS .)
    CTE_I           reduce using rule 96 (op4 -> PLUS .)
    CTE_F           reduce using rule 96 (op4 -> PLUS .)
    CTE_CHAR        reduce using rule 96 (op4 -> PLUS .)


state 120

    (97) op4 -> MINUS .

    ID              reduce using rule 97 (op4 -> MINUS .)
    L_P             reduce using rule 97 (op4 -> MINUS .)
    CTE_I           reduce using rule 97 (op4 -> MINUS .)
    CTE_F           reduce using rule 97 (op4 -> MINUS .)
    CTE_CHAR        reduce using rule 97 (op4 -> MINUS .)


state 121

    (75) term -> fact op5aux .

    PLUS            reduce using rule 75 (term -> fact op5aux .)
    MINUS           reduce using rule 75 (term -> fact op5aux .)
    LESSTHAN        reduce using rule 75 (term -> fact op5aux .)
    LESSTHANEQ      reduce using rule 75 (term -> fact op5aux .)
    GREATERTHAN     reduce using rule 75 (term -> fact op5aux .)
    GREATERTHANEQ   reduce using rule 75 (term -> fact op5aux .)
    EQ              reduce using rule 75 (term -> fact op5aux .)
    DIFERENT        reduce using rule 75 (term -> fact op5aux .)
    AND             reduce using rule 75 (term -> fact op5aux .)
    OR              reduce using rule 75 (term -> fact op5aux .)
    R_SB            reduce using rule 75 (term -> fact op5aux .)
    ID              reduce using rule 75 (term -> fact op5aux .)
    RETURN          reduce using rule 75 (term -> fact op5aux .)
    READ            reduce using rule 75 (term -> fact op5aux .)
    PRINT           reduce using rule 75 (term -> fact op5aux .)
    IF              reduce using rule 75 (term -> fact op5aux .)
    WHILE           reduce using rule 75 (term -> fact op5aux .)
    FOR             reduce using rule 75 (term -> fact op5aux .)
    L_P             reduce using rule 75 (term -> fact op5aux .)
    CTE_I           reduce using rule 75 (term -> fact op5aux .)
    CTE_F           reduce using rule 75 (term -> fact op5aux .)
    CTE_CHAR        reduce using rule 75 (term -> fact op5aux .)
    R_B             reduce using rule 75 (term -> fact op5aux .)
    R_P             reduce using rule 75 (term -> fact op5aux .)
    COMA            reduce using rule 75 (term -> fact op5aux .)
    SEMICOLON       reduce using rule 75 (term -> fact op5aux .)
    TO              reduce using rule 75 (term -> fact op5aux .)
    DO              reduce using rule 75 (term -> fact op5aux .)


state 122

    (103) op5aux -> op5 . term
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    term                           shift and go to state 151
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 123

    (104) op5aux -> empty .

    PLUS            reduce using rule 104 (op5aux -> empty .)
    MINUS           reduce using rule 104 (op5aux -> empty .)
    LESSTHAN        reduce using rule 104 (op5aux -> empty .)
    LESSTHANEQ      reduce using rule 104 (op5aux -> empty .)
    GREATERTHAN     reduce using rule 104 (op5aux -> empty .)
    GREATERTHANEQ   reduce using rule 104 (op5aux -> empty .)
    EQ              reduce using rule 104 (op5aux -> empty .)
    DIFERENT        reduce using rule 104 (op5aux -> empty .)
    AND             reduce using rule 104 (op5aux -> empty .)
    OR              reduce using rule 104 (op5aux -> empty .)
    R_SB            reduce using rule 104 (op5aux -> empty .)
    ID              reduce using rule 104 (op5aux -> empty .)
    RETURN          reduce using rule 104 (op5aux -> empty .)
    READ            reduce using rule 104 (op5aux -> empty .)
    PRINT           reduce using rule 104 (op5aux -> empty .)
    IF              reduce using rule 104 (op5aux -> empty .)
    WHILE           reduce using rule 104 (op5aux -> empty .)
    FOR             reduce using rule 104 (op5aux -> empty .)
    L_P             reduce using rule 104 (op5aux -> empty .)
    CTE_I           reduce using rule 104 (op5aux -> empty .)
    CTE_F           reduce using rule 104 (op5aux -> empty .)
    CTE_CHAR        reduce using rule 104 (op5aux -> empty .)
    R_B             reduce using rule 104 (op5aux -> empty .)
    R_P             reduce using rule 104 (op5aux -> empty .)
    COMA            reduce using rule 104 (op5aux -> empty .)
    SEMICOLON       reduce using rule 104 (op5aux -> empty .)
    TO              reduce using rule 104 (op5aux -> empty .)
    DO              reduce using rule 104 (op5aux -> empty .)


state 124

    (100) op5 -> MULT .

    ID              reduce using rule 100 (op5 -> MULT .)
    L_P             reduce using rule 100 (op5 -> MULT .)
    CTE_I           reduce using rule 100 (op5 -> MULT .)
    CTE_F           reduce using rule 100 (op5 -> MULT .)
    CTE_CHAR        reduce using rule 100 (op5 -> MULT .)


state 125

    (101) op5 -> DIV .

    ID              reduce using rule 101 (op5 -> DIV .)
    L_P             reduce using rule 101 (op5 -> DIV .)
    CTE_I           reduce using rule 101 (op5 -> DIV .)
    CTE_F           reduce using rule 101 (op5 -> DIV .)
    CTE_CHAR        reduce using rule 101 (op5 -> DIV .)


state 126

    (102) op5 -> MOD .

    ID              reduce using rule 102 (op5 -> MOD .)
    L_P             reduce using rule 102 (op5 -> MOD .)
    CTE_I           reduce using rule 102 (op5 -> MOD .)
    CTE_F           reduce using rule 102 (op5 -> MOD .)
    CTE_CHAR        reduce using rule 102 (op5 -> MOD .)


state 127

    (76) fact -> ID fact1 .

    MULT            reduce using rule 76 (fact -> ID fact1 .)
    DIV             reduce using rule 76 (fact -> ID fact1 .)
    MOD             reduce using rule 76 (fact -> ID fact1 .)
    PLUS            reduce using rule 76 (fact -> ID fact1 .)
    MINUS           reduce using rule 76 (fact -> ID fact1 .)
    LESSTHAN        reduce using rule 76 (fact -> ID fact1 .)
    LESSTHANEQ      reduce using rule 76 (fact -> ID fact1 .)
    GREATERTHAN     reduce using rule 76 (fact -> ID fact1 .)
    GREATERTHANEQ   reduce using rule 76 (fact -> ID fact1 .)
    EQ              reduce using rule 76 (fact -> ID fact1 .)
    DIFERENT        reduce using rule 76 (fact -> ID fact1 .)
    AND             reduce using rule 76 (fact -> ID fact1 .)
    OR              reduce using rule 76 (fact -> ID fact1 .)
    R_SB            reduce using rule 76 (fact -> ID fact1 .)
    ID              reduce using rule 76 (fact -> ID fact1 .)
    RETURN          reduce using rule 76 (fact -> ID fact1 .)
    READ            reduce using rule 76 (fact -> ID fact1 .)
    PRINT           reduce using rule 76 (fact -> ID fact1 .)
    IF              reduce using rule 76 (fact -> ID fact1 .)
    WHILE           reduce using rule 76 (fact -> ID fact1 .)
    FOR             reduce using rule 76 (fact -> ID fact1 .)
    L_P             reduce using rule 76 (fact -> ID fact1 .)
    CTE_I           reduce using rule 76 (fact -> ID fact1 .)
    CTE_F           reduce using rule 76 (fact -> ID fact1 .)
    CTE_CHAR        reduce using rule 76 (fact -> ID fact1 .)
    R_B             reduce using rule 76 (fact -> ID fact1 .)
    R_P             reduce using rule 76 (fact -> ID fact1 .)
    COMA            reduce using rule 76 (fact -> ID fact1 .)
    SEMICOLON       reduce using rule 76 (fact -> ID fact1 .)
    TO              reduce using rule 76 (fact -> ID fact1 .)
    DO              reduce using rule 76 (fact -> ID fact1 .)


state 128

    (79) fact1 -> L_P . args R_P
    (46) args -> . args1
    (47) args -> . empty
    (48) args1 -> . expression args2
    (105) empty -> .
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    R_P             reduce using rule 105 (empty -> .)
    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    args                           shift and go to state 152
    args1                          shift and go to state 153
    empty                          shift and go to state 154
    expression                     shift and go to state 155
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 129

    (80) fact1 -> id1 .

    MULT            reduce using rule 80 (fact1 -> id1 .)
    DIV             reduce using rule 80 (fact1 -> id1 .)
    MOD             reduce using rule 80 (fact1 -> id1 .)
    PLUS            reduce using rule 80 (fact1 -> id1 .)
    MINUS           reduce using rule 80 (fact1 -> id1 .)
    LESSTHAN        reduce using rule 80 (fact1 -> id1 .)
    LESSTHANEQ      reduce using rule 80 (fact1 -> id1 .)
    GREATERTHAN     reduce using rule 80 (fact1 -> id1 .)
    GREATERTHANEQ   reduce using rule 80 (fact1 -> id1 .)
    EQ              reduce using rule 80 (fact1 -> id1 .)
    DIFERENT        reduce using rule 80 (fact1 -> id1 .)
    AND             reduce using rule 80 (fact1 -> id1 .)
    OR              reduce using rule 80 (fact1 -> id1 .)
    R_SB            reduce using rule 80 (fact1 -> id1 .)
    R_P             reduce using rule 80 (fact1 -> id1 .)
    ID              reduce using rule 80 (fact1 -> id1 .)
    RETURN          reduce using rule 80 (fact1 -> id1 .)
    READ            reduce using rule 80 (fact1 -> id1 .)
    PRINT           reduce using rule 80 (fact1 -> id1 .)
    IF              reduce using rule 80 (fact1 -> id1 .)
    WHILE           reduce using rule 80 (fact1 -> id1 .)
    FOR             reduce using rule 80 (fact1 -> id1 .)
    L_P             reduce using rule 80 (fact1 -> id1 .)
    CTE_I           reduce using rule 80 (fact1 -> id1 .)
    CTE_F           reduce using rule 80 (fact1 -> id1 .)
    CTE_CHAR        reduce using rule 80 (fact1 -> id1 .)
    R_B             reduce using rule 80 (fact1 -> id1 .)
    COMA            reduce using rule 80 (fact1 -> id1 .)
    SEMICOLON       reduce using rule 80 (fact1 -> id1 .)
    TO              reduce using rule 80 (fact1 -> id1 .)
    DO              reduce using rule 80 (fact1 -> id1 .)


state 130

    (77) fact -> L_P expression . R_P

    R_P             shift and go to state 156


state 131

    (28) function -> FUNC func_type ID L_P params R_P var_declaration L_B . statements R_B
    (35) statements -> . statement statements
    (36) statements -> . empty
    (37) statement -> . assignation
    (38) statement -> . call_func
    (39) statement -> . return_func
    (40) statement -> . read
    (41) statement -> . write
    (42) statement -> . decision_statement
    (43) statement -> . repetition_statement
    (44) statement -> . expression
    (105) empty -> .
    (45) assignation -> . id EQUAL expression SEMICOLON
    (51) call_func -> . ID L_P args R_P SEMICOLON
    (52) return_func -> . RETURN L_P expression R_P SEMICOLON
    (53) read -> . READ L_P read_args R_P SEMICOLON
    (57) write -> . PRINT L_P write_args R_P SEMICOLON
    (63) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (66) repetition_statement -> . while_statement
    (67) repetition_statement -> . for_statement
    (71) expression -> . texp op1
    (22) id -> . ID id1
    (69) while_statement -> . WHILE L_P expression R_P do_statement
    (68) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    R_B             reduce using rule 105 (empty -> .)
    ID              shift and go to state 91
    RETURN          shift and go to state 92
    READ            shift and go to state 93
    PRINT           shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 98
    FOR             shift and go to state 99
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    statements                     shift and go to state 157
    statement                      shift and go to state 80
    empty                          shift and go to state 81
    assignation                    shift and go to state 82
    call_func                      shift and go to state 83
    return_func                    shift and go to state 84
    read                           shift and go to state 85
    write                          shift and go to state 86
    decision_statement             shift and go to state 87
    repetition_statement           shift and go to state 88
    expression                     shift and go to state 89
    id                             shift and go to state 90
    while_statement                shift and go to state 96
    for_statement                  shift and go to state 97
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 132

    (20) dec_id2 -> L_SB CTE_I R_SB .

    COMA            reduce using rule 20 (dec_id2 -> L_SB CTE_I R_SB .)
    SEMICOLON       reduce using rule 20 (dec_id2 -> L_SB CTE_I R_SB .)


state 133

    (2) main -> MAIN L_P params R_P var_declaration L_B statements R_B .

    $end            reduce using rule 2 (main -> MAIN L_P params R_P var_declaration L_B statements R_B .)


state 134

    (35) statements -> statement statements .

    R_B             reduce using rule 35 (statements -> statement statements .)


state 135

    (45) assignation -> id EQUAL . expression SEMICOLON
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    expression                     shift and go to state 158
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 136

    (51) call_func -> ID L_P . args R_P SEMICOLON
    (79) fact1 -> L_P . args R_P
    (46) args -> . args1
    (47) args -> . empty
    (48) args1 -> . expression args2
    (105) empty -> .
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    R_P             reduce using rule 105 (empty -> .)
    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    args                           shift and go to state 159
    args1                          shift and go to state 153
    empty                          shift and go to state 154
    expression                     shift and go to state 155
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 137

    (22) id -> ID id1 .
    (80) fact1 -> id1 .

    EQUAL           reduce using rule 22 (id -> ID id1 .)
    MULT            reduce using rule 80 (fact1 -> id1 .)
    DIV             reduce using rule 80 (fact1 -> id1 .)
    MOD             reduce using rule 80 (fact1 -> id1 .)
    PLUS            reduce using rule 80 (fact1 -> id1 .)
    MINUS           reduce using rule 80 (fact1 -> id1 .)
    LESSTHAN        reduce using rule 80 (fact1 -> id1 .)
    LESSTHANEQ      reduce using rule 80 (fact1 -> id1 .)
    GREATERTHAN     reduce using rule 80 (fact1 -> id1 .)
    GREATERTHANEQ   reduce using rule 80 (fact1 -> id1 .)
    EQ              reduce using rule 80 (fact1 -> id1 .)
    DIFERENT        reduce using rule 80 (fact1 -> id1 .)
    AND             reduce using rule 80 (fact1 -> id1 .)
    OR              reduce using rule 80 (fact1 -> id1 .)
    ID              reduce using rule 80 (fact1 -> id1 .)
    RETURN          reduce using rule 80 (fact1 -> id1 .)
    READ            reduce using rule 80 (fact1 -> id1 .)
    PRINT           reduce using rule 80 (fact1 -> id1 .)
    IF              reduce using rule 80 (fact1 -> id1 .)
    WHILE           reduce using rule 80 (fact1 -> id1 .)
    FOR             reduce using rule 80 (fact1 -> id1 .)
    L_P             reduce using rule 80 (fact1 -> id1 .)
    CTE_I           reduce using rule 80 (fact1 -> id1 .)
    CTE_F           reduce using rule 80 (fact1 -> id1 .)
    CTE_CHAR        reduce using rule 80 (fact1 -> id1 .)
    R_B             reduce using rule 80 (fact1 -> id1 .)


state 138

    (52) return_func -> RETURN L_P . expression R_P SEMICOLON
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    expression                     shift and go to state 160
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 139

    (53) read -> READ L_P . read_args R_P SEMICOLON
    (54) read_args -> . expression read_args1
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    read_args                      shift and go to state 161
    expression                     shift and go to state 162
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 140

    (57) write -> PRINT L_P . write_args R_P SEMICOLON
    (58) write_args -> . write_args2 write_args1
    (61) write_args2 -> . expression
    (62) write_args2 -> . CTE_STRING
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    CTE_STRING      shift and go to state 166
    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    write_args                     shift and go to state 163
    write_args2                    shift and go to state 164
    expression                     shift and go to state 165
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 141

    (63) decision_statement -> IF L_P . expression R_P L_B statements R_B decision_statement1
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    expression                     shift and go to state 167
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 142

    (69) while_statement -> WHILE L_P . expression R_P do_statement
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    expression                     shift and go to state 168
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 143

    (68) for_statement -> FOR id . EQUAL expression TO expression do_statement

    EQUAL           shift and go to state 169


state 144

    (25) id2 -> L_SB . expression R_SB
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    expression                     shift and go to state 170
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 145

    (23) id1 -> L_SB expression R_SB id2 .

    COMA            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    R_P             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    EQUAL           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    MULT            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    DIV             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    MOD             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    PLUS            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    MINUS           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    LESSTHAN        reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    LESSTHANEQ      reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    GREATERTHAN     reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    GREATERTHANEQ   reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    EQ              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    DIFERENT        reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    AND             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    OR              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    R_SB            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    ID              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    RETURN          reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    READ            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    PRINT           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    IF              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    WHILE           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    FOR             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    L_P             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    CTE_I           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    CTE_F           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    CTE_CHAR        reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    R_B             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    SEMICOLON       reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    TO              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    DO              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)


state 146

    (26) id2 -> empty .

    COMA            reduce using rule 26 (id2 -> empty .)
    R_P             reduce using rule 26 (id2 -> empty .)
    EQUAL           reduce using rule 26 (id2 -> empty .)
    MULT            reduce using rule 26 (id2 -> empty .)
    DIV             reduce using rule 26 (id2 -> empty .)
    MOD             reduce using rule 26 (id2 -> empty .)
    PLUS            reduce using rule 26 (id2 -> empty .)
    MINUS           reduce using rule 26 (id2 -> empty .)
    LESSTHAN        reduce using rule 26 (id2 -> empty .)
    LESSTHANEQ      reduce using rule 26 (id2 -> empty .)
    GREATERTHAN     reduce using rule 26 (id2 -> empty .)
    GREATERTHANEQ   reduce using rule 26 (id2 -> empty .)
    EQ              reduce using rule 26 (id2 -> empty .)
    DIFERENT        reduce using rule 26 (id2 -> empty .)
    AND             reduce using rule 26 (id2 -> empty .)
    OR              reduce using rule 26 (id2 -> empty .)
    R_SB            reduce using rule 26 (id2 -> empty .)
    ID              reduce using rule 26 (id2 -> empty .)
    RETURN          reduce using rule 26 (id2 -> empty .)
    READ            reduce using rule 26 (id2 -> empty .)
    PRINT           reduce using rule 26 (id2 -> empty .)
    IF              reduce using rule 26 (id2 -> empty .)
    WHILE           reduce using rule 26 (id2 -> empty .)
    FOR             reduce using rule 26 (id2 -> empty .)
    L_P             reduce using rule 26 (id2 -> empty .)
    CTE_I           reduce using rule 26 (id2 -> empty .)
    CTE_F           reduce using rule 26 (id2 -> empty .)
    CTE_CHAR        reduce using rule 26 (id2 -> empty .)
    R_B             reduce using rule 26 (id2 -> empty .)
    SEMICOLON       reduce using rule 26 (id2 -> empty .)
    TO              reduce using rule 26 (id2 -> empty .)
    DO              reduce using rule 26 (id2 -> empty .)


state 147

    (84) op1 -> OR expression .

    R_SB            reduce using rule 84 (op1 -> OR expression .)
    ID              reduce using rule 84 (op1 -> OR expression .)
    RETURN          reduce using rule 84 (op1 -> OR expression .)
    READ            reduce using rule 84 (op1 -> OR expression .)
    PRINT           reduce using rule 84 (op1 -> OR expression .)
    IF              reduce using rule 84 (op1 -> OR expression .)
    WHILE           reduce using rule 84 (op1 -> OR expression .)
    FOR             reduce using rule 84 (op1 -> OR expression .)
    L_P             reduce using rule 84 (op1 -> OR expression .)
    CTE_I           reduce using rule 84 (op1 -> OR expression .)
    CTE_F           reduce using rule 84 (op1 -> OR expression .)
    CTE_CHAR        reduce using rule 84 (op1 -> OR expression .)
    R_B             reduce using rule 84 (op1 -> OR expression .)
    R_P             reduce using rule 84 (op1 -> OR expression .)
    COMA            reduce using rule 84 (op1 -> OR expression .)
    SEMICOLON       reduce using rule 84 (op1 -> OR expression .)
    TO              reduce using rule 84 (op1 -> OR expression .)
    DO              reduce using rule 84 (op1 -> OR expression .)


state 148

    (86) op2 -> AND texp .

    OR              reduce using rule 86 (op2 -> AND texp .)
    R_SB            reduce using rule 86 (op2 -> AND texp .)
    ID              reduce using rule 86 (op2 -> AND texp .)
    RETURN          reduce using rule 86 (op2 -> AND texp .)
    READ            reduce using rule 86 (op2 -> AND texp .)
    PRINT           reduce using rule 86 (op2 -> AND texp .)
    IF              reduce using rule 86 (op2 -> AND texp .)
    WHILE           reduce using rule 86 (op2 -> AND texp .)
    FOR             reduce using rule 86 (op2 -> AND texp .)
    L_P             reduce using rule 86 (op2 -> AND texp .)
    CTE_I           reduce using rule 86 (op2 -> AND texp .)
    CTE_F           reduce using rule 86 (op2 -> AND texp .)
    CTE_CHAR        reduce using rule 86 (op2 -> AND texp .)
    R_B             reduce using rule 86 (op2 -> AND texp .)
    R_P             reduce using rule 86 (op2 -> AND texp .)
    COMA            reduce using rule 86 (op2 -> AND texp .)
    SEMICOLON       reduce using rule 86 (op2 -> AND texp .)
    TO              reduce using rule 86 (op2 -> AND texp .)
    DO              reduce using rule 86 (op2 -> AND texp .)


state 149

    (94) op3aux -> op3 nexp .

    AND             reduce using rule 94 (op3aux -> op3 nexp .)
    OR              reduce using rule 94 (op3aux -> op3 nexp .)
    R_SB            reduce using rule 94 (op3aux -> op3 nexp .)
    ID              reduce using rule 94 (op3aux -> op3 nexp .)
    RETURN          reduce using rule 94 (op3aux -> op3 nexp .)
    READ            reduce using rule 94 (op3aux -> op3 nexp .)
    PRINT           reduce using rule 94 (op3aux -> op3 nexp .)
    IF              reduce using rule 94 (op3aux -> op3 nexp .)
    WHILE           reduce using rule 94 (op3aux -> op3 nexp .)
    FOR             reduce using rule 94 (op3aux -> op3 nexp .)
    L_P             reduce using rule 94 (op3aux -> op3 nexp .)
    CTE_I           reduce using rule 94 (op3aux -> op3 nexp .)
    CTE_F           reduce using rule 94 (op3aux -> op3 nexp .)
    CTE_CHAR        reduce using rule 94 (op3aux -> op3 nexp .)
    R_B             reduce using rule 94 (op3aux -> op3 nexp .)
    R_P             reduce using rule 94 (op3aux -> op3 nexp .)
    COMA            reduce using rule 94 (op3aux -> op3 nexp .)
    SEMICOLON       reduce using rule 94 (op3aux -> op3 nexp .)
    TO              reduce using rule 94 (op3aux -> op3 nexp .)
    DO              reduce using rule 94 (op3aux -> op3 nexp .)


state 150

    (98) op4aux -> op4 nexp .

    LESSTHAN        reduce using rule 98 (op4aux -> op4 nexp .)
    LESSTHANEQ      reduce using rule 98 (op4aux -> op4 nexp .)
    GREATERTHAN     reduce using rule 98 (op4aux -> op4 nexp .)
    GREATERTHANEQ   reduce using rule 98 (op4aux -> op4 nexp .)
    EQ              reduce using rule 98 (op4aux -> op4 nexp .)
    DIFERENT        reduce using rule 98 (op4aux -> op4 nexp .)
    AND             reduce using rule 98 (op4aux -> op4 nexp .)
    OR              reduce using rule 98 (op4aux -> op4 nexp .)
    R_SB            reduce using rule 98 (op4aux -> op4 nexp .)
    ID              reduce using rule 98 (op4aux -> op4 nexp .)
    RETURN          reduce using rule 98 (op4aux -> op4 nexp .)
    READ            reduce using rule 98 (op4aux -> op4 nexp .)
    PRINT           reduce using rule 98 (op4aux -> op4 nexp .)
    IF              reduce using rule 98 (op4aux -> op4 nexp .)
    WHILE           reduce using rule 98 (op4aux -> op4 nexp .)
    FOR             reduce using rule 98 (op4aux -> op4 nexp .)
    L_P             reduce using rule 98 (op4aux -> op4 nexp .)
    CTE_I           reduce using rule 98 (op4aux -> op4 nexp .)
    CTE_F           reduce using rule 98 (op4aux -> op4 nexp .)
    CTE_CHAR        reduce using rule 98 (op4aux -> op4 nexp .)
    R_B             reduce using rule 98 (op4aux -> op4 nexp .)
    R_P             reduce using rule 98 (op4aux -> op4 nexp .)
    COMA            reduce using rule 98 (op4aux -> op4 nexp .)
    SEMICOLON       reduce using rule 98 (op4aux -> op4 nexp .)
    TO              reduce using rule 98 (op4aux -> op4 nexp .)
    DO              reduce using rule 98 (op4aux -> op4 nexp .)


state 151

    (103) op5aux -> op5 term .

    PLUS            reduce using rule 103 (op5aux -> op5 term .)
    MINUS           reduce using rule 103 (op5aux -> op5 term .)
    LESSTHAN        reduce using rule 103 (op5aux -> op5 term .)
    LESSTHANEQ      reduce using rule 103 (op5aux -> op5 term .)
    GREATERTHAN     reduce using rule 103 (op5aux -> op5 term .)
    GREATERTHANEQ   reduce using rule 103 (op5aux -> op5 term .)
    EQ              reduce using rule 103 (op5aux -> op5 term .)
    DIFERENT        reduce using rule 103 (op5aux -> op5 term .)
    AND             reduce using rule 103 (op5aux -> op5 term .)
    OR              reduce using rule 103 (op5aux -> op5 term .)
    R_SB            reduce using rule 103 (op5aux -> op5 term .)
    ID              reduce using rule 103 (op5aux -> op5 term .)
    RETURN          reduce using rule 103 (op5aux -> op5 term .)
    READ            reduce using rule 103 (op5aux -> op5 term .)
    PRINT           reduce using rule 103 (op5aux -> op5 term .)
    IF              reduce using rule 103 (op5aux -> op5 term .)
    WHILE           reduce using rule 103 (op5aux -> op5 term .)
    FOR             reduce using rule 103 (op5aux -> op5 term .)
    L_P             reduce using rule 103 (op5aux -> op5 term .)
    CTE_I           reduce using rule 103 (op5aux -> op5 term .)
    CTE_F           reduce using rule 103 (op5aux -> op5 term .)
    CTE_CHAR        reduce using rule 103 (op5aux -> op5 term .)
    R_B             reduce using rule 103 (op5aux -> op5 term .)
    R_P             reduce using rule 103 (op5aux -> op5 term .)
    COMA            reduce using rule 103 (op5aux -> op5 term .)
    SEMICOLON       reduce using rule 103 (op5aux -> op5 term .)
    TO              reduce using rule 103 (op5aux -> op5 term .)
    DO              reduce using rule 103 (op5aux -> op5 term .)


state 152

    (79) fact1 -> L_P args . R_P

    R_P             shift and go to state 171


state 153

    (46) args -> args1 .

    R_P             reduce using rule 46 (args -> args1 .)


state 154

    (47) args -> empty .

    R_P             reduce using rule 47 (args -> empty .)


state 155

    (48) args1 -> expression . args2
    (49) args2 -> . COMA args1
    (50) args2 -> . empty
    (105) empty -> .

    COMA            shift and go to state 173
    R_P             reduce using rule 105 (empty -> .)

    args2                          shift and go to state 172
    empty                          shift and go to state 174

state 156

    (77) fact -> L_P expression R_P .

    MULT            reduce using rule 77 (fact -> L_P expression R_P .)
    DIV             reduce using rule 77 (fact -> L_P expression R_P .)
    MOD             reduce using rule 77 (fact -> L_P expression R_P .)
    PLUS            reduce using rule 77 (fact -> L_P expression R_P .)
    MINUS           reduce using rule 77 (fact -> L_P expression R_P .)
    LESSTHAN        reduce using rule 77 (fact -> L_P expression R_P .)
    LESSTHANEQ      reduce using rule 77 (fact -> L_P expression R_P .)
    GREATERTHAN     reduce using rule 77 (fact -> L_P expression R_P .)
    GREATERTHANEQ   reduce using rule 77 (fact -> L_P expression R_P .)
    EQ              reduce using rule 77 (fact -> L_P expression R_P .)
    DIFERENT        reduce using rule 77 (fact -> L_P expression R_P .)
    AND             reduce using rule 77 (fact -> L_P expression R_P .)
    OR              reduce using rule 77 (fact -> L_P expression R_P .)
    R_SB            reduce using rule 77 (fact -> L_P expression R_P .)
    ID              reduce using rule 77 (fact -> L_P expression R_P .)
    RETURN          reduce using rule 77 (fact -> L_P expression R_P .)
    READ            reduce using rule 77 (fact -> L_P expression R_P .)
    PRINT           reduce using rule 77 (fact -> L_P expression R_P .)
    IF              reduce using rule 77 (fact -> L_P expression R_P .)
    WHILE           reduce using rule 77 (fact -> L_P expression R_P .)
    FOR             reduce using rule 77 (fact -> L_P expression R_P .)
    L_P             reduce using rule 77 (fact -> L_P expression R_P .)
    CTE_I           reduce using rule 77 (fact -> L_P expression R_P .)
    CTE_F           reduce using rule 77 (fact -> L_P expression R_P .)
    CTE_CHAR        reduce using rule 77 (fact -> L_P expression R_P .)
    R_B             reduce using rule 77 (fact -> L_P expression R_P .)
    R_P             reduce using rule 77 (fact -> L_P expression R_P .)
    COMA            reduce using rule 77 (fact -> L_P expression R_P .)
    SEMICOLON       reduce using rule 77 (fact -> L_P expression R_P .)
    TO              reduce using rule 77 (fact -> L_P expression R_P .)
    DO              reduce using rule 77 (fact -> L_P expression R_P .)


state 157

    (28) function -> FUNC func_type ID L_P params R_P var_declaration L_B statements . R_B

    R_B             shift and go to state 175


state 158

    (45) assignation -> id EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 176


state 159

    (51) call_func -> ID L_P args . R_P SEMICOLON
    (79) fact1 -> L_P args . R_P

    R_P             shift and go to state 177


state 160

    (52) return_func -> RETURN L_P expression . R_P SEMICOLON

    R_P             shift and go to state 178


state 161

    (53) read -> READ L_P read_args . R_P SEMICOLON

    R_P             shift and go to state 179


state 162

    (54) read_args -> expression . read_args1
    (55) read_args1 -> . COMA expression read_args1
    (56) read_args1 -> . empty
    (105) empty -> .

    COMA            shift and go to state 181
    R_P             reduce using rule 105 (empty -> .)

    read_args1                     shift and go to state 180
    empty                          shift and go to state 182

state 163

    (57) write -> PRINT L_P write_args . R_P SEMICOLON

    R_P             shift and go to state 183


state 164

    (58) write_args -> write_args2 . write_args1
    (59) write_args1 -> . COMA write_args2 write_args1
    (60) write_args1 -> . empty
    (105) empty -> .

    COMA            shift and go to state 185
    R_P             reduce using rule 105 (empty -> .)

    write_args1                    shift and go to state 184
    empty                          shift and go to state 186

state 165

    (61) write_args2 -> expression .

    COMA            reduce using rule 61 (write_args2 -> expression .)
    R_P             reduce using rule 61 (write_args2 -> expression .)


state 166

    (62) write_args2 -> CTE_STRING .

    COMA            reduce using rule 62 (write_args2 -> CTE_STRING .)
    R_P             reduce using rule 62 (write_args2 -> CTE_STRING .)


state 167

    (63) decision_statement -> IF L_P expression . R_P L_B statements R_B decision_statement1

    R_P             shift and go to state 187


state 168

    (69) while_statement -> WHILE L_P expression . R_P do_statement

    R_P             shift and go to state 188


state 169

    (68) for_statement -> FOR id EQUAL . expression TO expression do_statement
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    expression                     shift and go to state 189
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 170

    (25) id2 -> L_SB expression . R_SB

    R_SB            shift and go to state 190


state 171

    (79) fact1 -> L_P args R_P .

    MULT            reduce using rule 79 (fact1 -> L_P args R_P .)
    DIV             reduce using rule 79 (fact1 -> L_P args R_P .)
    MOD             reduce using rule 79 (fact1 -> L_P args R_P .)
    PLUS            reduce using rule 79 (fact1 -> L_P args R_P .)
    MINUS           reduce using rule 79 (fact1 -> L_P args R_P .)
    LESSTHAN        reduce using rule 79 (fact1 -> L_P args R_P .)
    LESSTHANEQ      reduce using rule 79 (fact1 -> L_P args R_P .)
    GREATERTHAN     reduce using rule 79 (fact1 -> L_P args R_P .)
    GREATERTHANEQ   reduce using rule 79 (fact1 -> L_P args R_P .)
    EQ              reduce using rule 79 (fact1 -> L_P args R_P .)
    DIFERENT        reduce using rule 79 (fact1 -> L_P args R_P .)
    AND             reduce using rule 79 (fact1 -> L_P args R_P .)
    OR              reduce using rule 79 (fact1 -> L_P args R_P .)
    R_SB            reduce using rule 79 (fact1 -> L_P args R_P .)
    R_P             reduce using rule 79 (fact1 -> L_P args R_P .)
    ID              reduce using rule 79 (fact1 -> L_P args R_P .)
    RETURN          reduce using rule 79 (fact1 -> L_P args R_P .)
    READ            reduce using rule 79 (fact1 -> L_P args R_P .)
    PRINT           reduce using rule 79 (fact1 -> L_P args R_P .)
    IF              reduce using rule 79 (fact1 -> L_P args R_P .)
    WHILE           reduce using rule 79 (fact1 -> L_P args R_P .)
    FOR             reduce using rule 79 (fact1 -> L_P args R_P .)
    L_P             reduce using rule 79 (fact1 -> L_P args R_P .)
    CTE_I           reduce using rule 79 (fact1 -> L_P args R_P .)
    CTE_F           reduce using rule 79 (fact1 -> L_P args R_P .)
    CTE_CHAR        reduce using rule 79 (fact1 -> L_P args R_P .)
    R_B             reduce using rule 79 (fact1 -> L_P args R_P .)
    COMA            reduce using rule 79 (fact1 -> L_P args R_P .)
    SEMICOLON       reduce using rule 79 (fact1 -> L_P args R_P .)
    TO              reduce using rule 79 (fact1 -> L_P args R_P .)
    DO              reduce using rule 79 (fact1 -> L_P args R_P .)


state 172

    (48) args1 -> expression args2 .

    R_P             reduce using rule 48 (args1 -> expression args2 .)


state 173

    (49) args2 -> COMA . args1
    (48) args1 -> . expression args2
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    args1                          shift and go to state 191
    expression                     shift and go to state 155
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 174

    (50) args2 -> empty .

    R_P             reduce using rule 50 (args2 -> empty .)


state 175

    (28) function -> FUNC func_type ID L_P params R_P var_declaration L_B statements R_B .

    FUNC            reduce using rule 28 (function -> FUNC func_type ID L_P params R_P var_declaration L_B statements R_B .)
    MAIN            reduce using rule 28 (function -> FUNC func_type ID L_P params R_P var_declaration L_B statements R_B .)


state 176

    (45) assignation -> id EQUAL expression SEMICOLON .

    ID              reduce using rule 45 (assignation -> id EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 45 (assignation -> id EQUAL expression SEMICOLON .)
    READ            reduce using rule 45 (assignation -> id EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 45 (assignation -> id EQUAL expression SEMICOLON .)
    IF              reduce using rule 45 (assignation -> id EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 45 (assignation -> id EQUAL expression SEMICOLON .)
    FOR             reduce using rule 45 (assignation -> id EQUAL expression SEMICOLON .)
    L_P             reduce using rule 45 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_I           reduce using rule 45 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_F           reduce using rule 45 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_CHAR        reduce using rule 45 (assignation -> id EQUAL expression SEMICOLON .)
    R_B             reduce using rule 45 (assignation -> id EQUAL expression SEMICOLON .)


state 177

    (51) call_func -> ID L_P args R_P . SEMICOLON
    (79) fact1 -> L_P args R_P .

    SEMICOLON       shift and go to state 192
    MULT            reduce using rule 79 (fact1 -> L_P args R_P .)
    DIV             reduce using rule 79 (fact1 -> L_P args R_P .)
    MOD             reduce using rule 79 (fact1 -> L_P args R_P .)
    PLUS            reduce using rule 79 (fact1 -> L_P args R_P .)
    MINUS           reduce using rule 79 (fact1 -> L_P args R_P .)
    LESSTHAN        reduce using rule 79 (fact1 -> L_P args R_P .)
    LESSTHANEQ      reduce using rule 79 (fact1 -> L_P args R_P .)
    GREATERTHAN     reduce using rule 79 (fact1 -> L_P args R_P .)
    GREATERTHANEQ   reduce using rule 79 (fact1 -> L_P args R_P .)
    EQ              reduce using rule 79 (fact1 -> L_P args R_P .)
    DIFERENT        reduce using rule 79 (fact1 -> L_P args R_P .)
    AND             reduce using rule 79 (fact1 -> L_P args R_P .)
    OR              reduce using rule 79 (fact1 -> L_P args R_P .)
    ID              reduce using rule 79 (fact1 -> L_P args R_P .)
    RETURN          reduce using rule 79 (fact1 -> L_P args R_P .)
    READ            reduce using rule 79 (fact1 -> L_P args R_P .)
    PRINT           reduce using rule 79 (fact1 -> L_P args R_P .)
    IF              reduce using rule 79 (fact1 -> L_P args R_P .)
    WHILE           reduce using rule 79 (fact1 -> L_P args R_P .)
    FOR             reduce using rule 79 (fact1 -> L_P args R_P .)
    L_P             reduce using rule 79 (fact1 -> L_P args R_P .)
    CTE_I           reduce using rule 79 (fact1 -> L_P args R_P .)
    CTE_F           reduce using rule 79 (fact1 -> L_P args R_P .)
    CTE_CHAR        reduce using rule 79 (fact1 -> L_P args R_P .)
    R_B             reduce using rule 79 (fact1 -> L_P args R_P .)


state 178

    (52) return_func -> RETURN L_P expression R_P . SEMICOLON

    SEMICOLON       shift and go to state 193


state 179

    (53) read -> READ L_P read_args R_P . SEMICOLON

    SEMICOLON       shift and go to state 194


state 180

    (54) read_args -> expression read_args1 .

    R_P             reduce using rule 54 (read_args -> expression read_args1 .)


state 181

    (55) read_args1 -> COMA . expression read_args1
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    expression                     shift and go to state 195
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 182

    (56) read_args1 -> empty .

    R_P             reduce using rule 56 (read_args1 -> empty .)


state 183

    (57) write -> PRINT L_P write_args R_P . SEMICOLON

    SEMICOLON       shift and go to state 196


state 184

    (58) write_args -> write_args2 write_args1 .

    R_P             reduce using rule 58 (write_args -> write_args2 write_args1 .)


state 185

    (59) write_args1 -> COMA . write_args2 write_args1
    (61) write_args2 -> . expression
    (62) write_args2 -> . CTE_STRING
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    CTE_STRING      shift and go to state 166
    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    write_args2                    shift and go to state 197
    expression                     shift and go to state 165
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 186

    (60) write_args1 -> empty .

    R_P             reduce using rule 60 (write_args1 -> empty .)


state 187

    (63) decision_statement -> IF L_P expression R_P . L_B statements R_B decision_statement1

    L_B             shift and go to state 198


state 188

    (69) while_statement -> WHILE L_P expression R_P . do_statement
    (70) do_statement -> . DO L_B statements R_B

    DO              shift and go to state 200

    do_statement                   shift and go to state 199

state 189

    (68) for_statement -> FOR id EQUAL expression . TO expression do_statement

    TO              shift and go to state 201


state 190

    (25) id2 -> L_SB expression R_SB .

    COMA            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    R_P             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    EQUAL           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    MULT            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    DIV             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    MOD             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    PLUS            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    MINUS           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    LESSTHAN        reduce using rule 25 (id2 -> L_SB expression R_SB .)
    LESSTHANEQ      reduce using rule 25 (id2 -> L_SB expression R_SB .)
    GREATERTHAN     reduce using rule 25 (id2 -> L_SB expression R_SB .)
    GREATERTHANEQ   reduce using rule 25 (id2 -> L_SB expression R_SB .)
    EQ              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    DIFERENT        reduce using rule 25 (id2 -> L_SB expression R_SB .)
    AND             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    OR              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    R_SB            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    ID              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    RETURN          reduce using rule 25 (id2 -> L_SB expression R_SB .)
    READ            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    PRINT           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    IF              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    WHILE           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    FOR             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    L_P             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    CTE_I           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    CTE_F           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    CTE_CHAR        reduce using rule 25 (id2 -> L_SB expression R_SB .)
    R_B             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    SEMICOLON       reduce using rule 25 (id2 -> L_SB expression R_SB .)
    TO              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    DO              reduce using rule 25 (id2 -> L_SB expression R_SB .)


state 191

    (49) args2 -> COMA args1 .

    R_P             reduce using rule 49 (args2 -> COMA args1 .)


state 192

    (51) call_func -> ID L_P args R_P SEMICOLON .

    ID              reduce using rule 51 (call_func -> ID L_P args R_P SEMICOLON .)
    RETURN          reduce using rule 51 (call_func -> ID L_P args R_P SEMICOLON .)
    READ            reduce using rule 51 (call_func -> ID L_P args R_P SEMICOLON .)
    PRINT           reduce using rule 51 (call_func -> ID L_P args R_P SEMICOLON .)
    IF              reduce using rule 51 (call_func -> ID L_P args R_P SEMICOLON .)
    WHILE           reduce using rule 51 (call_func -> ID L_P args R_P SEMICOLON .)
    FOR             reduce using rule 51 (call_func -> ID L_P args R_P SEMICOLON .)
    L_P             reduce using rule 51 (call_func -> ID L_P args R_P SEMICOLON .)
    CTE_I           reduce using rule 51 (call_func -> ID L_P args R_P SEMICOLON .)
    CTE_F           reduce using rule 51 (call_func -> ID L_P args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 51 (call_func -> ID L_P args R_P SEMICOLON .)
    R_B             reduce using rule 51 (call_func -> ID L_P args R_P SEMICOLON .)


state 193

    (52) return_func -> RETURN L_P expression R_P SEMICOLON .

    ID              reduce using rule 52 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    RETURN          reduce using rule 52 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    READ            reduce using rule 52 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    PRINT           reduce using rule 52 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    IF              reduce using rule 52 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    WHILE           reduce using rule 52 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    FOR             reduce using rule 52 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    L_P             reduce using rule 52 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_I           reduce using rule 52 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_F           reduce using rule 52 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 52 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    R_B             reduce using rule 52 (return_func -> RETURN L_P expression R_P SEMICOLON .)


state 194

    (53) read -> READ L_P read_args R_P SEMICOLON .

    ID              reduce using rule 53 (read -> READ L_P read_args R_P SEMICOLON .)
    RETURN          reduce using rule 53 (read -> READ L_P read_args R_P SEMICOLON .)
    READ            reduce using rule 53 (read -> READ L_P read_args R_P SEMICOLON .)
    PRINT           reduce using rule 53 (read -> READ L_P read_args R_P SEMICOLON .)
    IF              reduce using rule 53 (read -> READ L_P read_args R_P SEMICOLON .)
    WHILE           reduce using rule 53 (read -> READ L_P read_args R_P SEMICOLON .)
    FOR             reduce using rule 53 (read -> READ L_P read_args R_P SEMICOLON .)
    L_P             reduce using rule 53 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_I           reduce using rule 53 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_F           reduce using rule 53 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 53 (read -> READ L_P read_args R_P SEMICOLON .)
    R_B             reduce using rule 53 (read -> READ L_P read_args R_P SEMICOLON .)


state 195

    (55) read_args1 -> COMA expression . read_args1
    (55) read_args1 -> . COMA expression read_args1
    (56) read_args1 -> . empty
    (105) empty -> .

    COMA            shift and go to state 181
    R_P             reduce using rule 105 (empty -> .)

    read_args1                     shift and go to state 202
    empty                          shift and go to state 182

state 196

    (57) write -> PRINT L_P write_args R_P SEMICOLON .

    ID              reduce using rule 57 (write -> PRINT L_P write_args R_P SEMICOLON .)
    RETURN          reduce using rule 57 (write -> PRINT L_P write_args R_P SEMICOLON .)
    READ            reduce using rule 57 (write -> PRINT L_P write_args R_P SEMICOLON .)
    PRINT           reduce using rule 57 (write -> PRINT L_P write_args R_P SEMICOLON .)
    IF              reduce using rule 57 (write -> PRINT L_P write_args R_P SEMICOLON .)
    WHILE           reduce using rule 57 (write -> PRINT L_P write_args R_P SEMICOLON .)
    FOR             reduce using rule 57 (write -> PRINT L_P write_args R_P SEMICOLON .)
    L_P             reduce using rule 57 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_I           reduce using rule 57 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_F           reduce using rule 57 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 57 (write -> PRINT L_P write_args R_P SEMICOLON .)
    R_B             reduce using rule 57 (write -> PRINT L_P write_args R_P SEMICOLON .)


state 197

    (59) write_args1 -> COMA write_args2 . write_args1
    (59) write_args1 -> . COMA write_args2 write_args1
    (60) write_args1 -> . empty
    (105) empty -> .

    COMA            shift and go to state 185
    R_P             reduce using rule 105 (empty -> .)

    write_args1                    shift and go to state 203
    empty                          shift and go to state 186

state 198

    (63) decision_statement -> IF L_P expression R_P L_B . statements R_B decision_statement1
    (35) statements -> . statement statements
    (36) statements -> . empty
    (37) statement -> . assignation
    (38) statement -> . call_func
    (39) statement -> . return_func
    (40) statement -> . read
    (41) statement -> . write
    (42) statement -> . decision_statement
    (43) statement -> . repetition_statement
    (44) statement -> . expression
    (105) empty -> .
    (45) assignation -> . id EQUAL expression SEMICOLON
    (51) call_func -> . ID L_P args R_P SEMICOLON
    (52) return_func -> . RETURN L_P expression R_P SEMICOLON
    (53) read -> . READ L_P read_args R_P SEMICOLON
    (57) write -> . PRINT L_P write_args R_P SEMICOLON
    (63) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (66) repetition_statement -> . while_statement
    (67) repetition_statement -> . for_statement
    (71) expression -> . texp op1
    (22) id -> . ID id1
    (69) while_statement -> . WHILE L_P expression R_P do_statement
    (68) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    R_B             reduce using rule 105 (empty -> .)
    ID              shift and go to state 91
    RETURN          shift and go to state 92
    READ            shift and go to state 93
    PRINT           shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 98
    FOR             shift and go to state 99
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    expression                     shift and go to state 89
    statements                     shift and go to state 204
    statement                      shift and go to state 80
    empty                          shift and go to state 81
    assignation                    shift and go to state 82
    call_func                      shift and go to state 83
    return_func                    shift and go to state 84
    read                           shift and go to state 85
    write                          shift and go to state 86
    decision_statement             shift and go to state 87
    repetition_statement           shift and go to state 88
    id                             shift and go to state 90
    while_statement                shift and go to state 96
    for_statement                  shift and go to state 97
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 199

    (69) while_statement -> WHILE L_P expression R_P do_statement .

    ID              reduce using rule 69 (while_statement -> WHILE L_P expression R_P do_statement .)
    RETURN          reduce using rule 69 (while_statement -> WHILE L_P expression R_P do_statement .)
    READ            reduce using rule 69 (while_statement -> WHILE L_P expression R_P do_statement .)
    PRINT           reduce using rule 69 (while_statement -> WHILE L_P expression R_P do_statement .)
    IF              reduce using rule 69 (while_statement -> WHILE L_P expression R_P do_statement .)
    WHILE           reduce using rule 69 (while_statement -> WHILE L_P expression R_P do_statement .)
    FOR             reduce using rule 69 (while_statement -> WHILE L_P expression R_P do_statement .)
    L_P             reduce using rule 69 (while_statement -> WHILE L_P expression R_P do_statement .)
    CTE_I           reduce using rule 69 (while_statement -> WHILE L_P expression R_P do_statement .)
    CTE_F           reduce using rule 69 (while_statement -> WHILE L_P expression R_P do_statement .)
    CTE_CHAR        reduce using rule 69 (while_statement -> WHILE L_P expression R_P do_statement .)
    R_B             reduce using rule 69 (while_statement -> WHILE L_P expression R_P do_statement .)


state 200

    (70) do_statement -> DO . L_B statements R_B

    L_B             shift and go to state 205


state 201

    (68) for_statement -> FOR id EQUAL expression TO . expression do_statement
    (71) expression -> . texp op1
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    ID              shift and go to state 71
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    expression                     shift and go to state 206
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 202

    (55) read_args1 -> COMA expression read_args1 .

    R_P             reduce using rule 55 (read_args1 -> COMA expression read_args1 .)


state 203

    (59) write_args1 -> COMA write_args2 write_args1 .

    R_P             reduce using rule 59 (write_args1 -> COMA write_args2 write_args1 .)


state 204

    (63) decision_statement -> IF L_P expression R_P L_B statements . R_B decision_statement1

    R_B             shift and go to state 207


state 205

    (70) do_statement -> DO L_B . statements R_B
    (35) statements -> . statement statements
    (36) statements -> . empty
    (37) statement -> . assignation
    (38) statement -> . call_func
    (39) statement -> . return_func
    (40) statement -> . read
    (41) statement -> . write
    (42) statement -> . decision_statement
    (43) statement -> . repetition_statement
    (44) statement -> . expression
    (105) empty -> .
    (45) assignation -> . id EQUAL expression SEMICOLON
    (51) call_func -> . ID L_P args R_P SEMICOLON
    (52) return_func -> . RETURN L_P expression R_P SEMICOLON
    (53) read -> . READ L_P read_args R_P SEMICOLON
    (57) write -> . PRINT L_P write_args R_P SEMICOLON
    (63) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (66) repetition_statement -> . while_statement
    (67) repetition_statement -> . for_statement
    (71) expression -> . texp op1
    (22) id -> . ID id1
    (69) while_statement -> . WHILE L_P expression R_P do_statement
    (68) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    R_B             reduce using rule 105 (empty -> .)
    ID              shift and go to state 91
    RETURN          shift and go to state 92
    READ            shift and go to state 93
    PRINT           shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 98
    FOR             shift and go to state 99
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    statements                     shift and go to state 208
    statement                      shift and go to state 80
    empty                          shift and go to state 81
    assignation                    shift and go to state 82
    call_func                      shift and go to state 83
    return_func                    shift and go to state 84
    read                           shift and go to state 85
    write                          shift and go to state 86
    decision_statement             shift and go to state 87
    repetition_statement           shift and go to state 88
    expression                     shift and go to state 89
    id                             shift and go to state 90
    while_statement                shift and go to state 96
    for_statement                  shift and go to state 97
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 206

    (68) for_statement -> FOR id EQUAL expression TO expression . do_statement
    (70) do_statement -> . DO L_B statements R_B

    DO              shift and go to state 200

    do_statement                   shift and go to state 209

state 207

    (63) decision_statement -> IF L_P expression R_P L_B statements R_B . decision_statement1
    (64) decision_statement1 -> . ELSE L_B statements R_B
    (65) decision_statement1 -> . empty
    (105) empty -> .

    ELSE            shift and go to state 211
    ID              reduce using rule 105 (empty -> .)
    RETURN          reduce using rule 105 (empty -> .)
    READ            reduce using rule 105 (empty -> .)
    PRINT           reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    WHILE           reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    L_P             reduce using rule 105 (empty -> .)
    CTE_I           reduce using rule 105 (empty -> .)
    CTE_F           reduce using rule 105 (empty -> .)
    CTE_CHAR        reduce using rule 105 (empty -> .)
    R_B             reduce using rule 105 (empty -> .)

    decision_statement1            shift and go to state 210
    empty                          shift and go to state 212

state 208

    (70) do_statement -> DO L_B statements . R_B

    R_B             shift and go to state 213


state 209

    (68) for_statement -> FOR id EQUAL expression TO expression do_statement .

    ID              reduce using rule 68 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    RETURN          reduce using rule 68 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    READ            reduce using rule 68 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    PRINT           reduce using rule 68 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    IF              reduce using rule 68 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    WHILE           reduce using rule 68 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    FOR             reduce using rule 68 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    L_P             reduce using rule 68 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    CTE_I           reduce using rule 68 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    CTE_F           reduce using rule 68 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    CTE_CHAR        reduce using rule 68 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    R_B             reduce using rule 68 (for_statement -> FOR id EQUAL expression TO expression do_statement .)


state 210

    (63) decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .

    ID              reduce using rule 63 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    RETURN          reduce using rule 63 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    READ            reduce using rule 63 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    PRINT           reduce using rule 63 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    IF              reduce using rule 63 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    WHILE           reduce using rule 63 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    FOR             reduce using rule 63 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    L_P             reduce using rule 63 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    CTE_I           reduce using rule 63 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    CTE_F           reduce using rule 63 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    CTE_CHAR        reduce using rule 63 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    R_B             reduce using rule 63 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)


state 211

    (64) decision_statement1 -> ELSE . L_B statements R_B

    L_B             shift and go to state 214


state 212

    (65) decision_statement1 -> empty .

    ID              reduce using rule 65 (decision_statement1 -> empty .)
    RETURN          reduce using rule 65 (decision_statement1 -> empty .)
    READ            reduce using rule 65 (decision_statement1 -> empty .)
    PRINT           reduce using rule 65 (decision_statement1 -> empty .)
    IF              reduce using rule 65 (decision_statement1 -> empty .)
    WHILE           reduce using rule 65 (decision_statement1 -> empty .)
    FOR             reduce using rule 65 (decision_statement1 -> empty .)
    L_P             reduce using rule 65 (decision_statement1 -> empty .)
    CTE_I           reduce using rule 65 (decision_statement1 -> empty .)
    CTE_F           reduce using rule 65 (decision_statement1 -> empty .)
    CTE_CHAR        reduce using rule 65 (decision_statement1 -> empty .)
    R_B             reduce using rule 65 (decision_statement1 -> empty .)


state 213

    (70) do_statement -> DO L_B statements R_B .

    ID              reduce using rule 70 (do_statement -> DO L_B statements R_B .)
    RETURN          reduce using rule 70 (do_statement -> DO L_B statements R_B .)
    READ            reduce using rule 70 (do_statement -> DO L_B statements R_B .)
    PRINT           reduce using rule 70 (do_statement -> DO L_B statements R_B .)
    IF              reduce using rule 70 (do_statement -> DO L_B statements R_B .)
    WHILE           reduce using rule 70 (do_statement -> DO L_B statements R_B .)
    FOR             reduce using rule 70 (do_statement -> DO L_B statements R_B .)
    L_P             reduce using rule 70 (do_statement -> DO L_B statements R_B .)
    CTE_I           reduce using rule 70 (do_statement -> DO L_B statements R_B .)
    CTE_F           reduce using rule 70 (do_statement -> DO L_B statements R_B .)
    CTE_CHAR        reduce using rule 70 (do_statement -> DO L_B statements R_B .)
    R_B             reduce using rule 70 (do_statement -> DO L_B statements R_B .)


state 214

    (64) decision_statement1 -> ELSE L_B . statements R_B
    (35) statements -> . statement statements
    (36) statements -> . empty
    (37) statement -> . assignation
    (38) statement -> . call_func
    (39) statement -> . return_func
    (40) statement -> . read
    (41) statement -> . write
    (42) statement -> . decision_statement
    (43) statement -> . repetition_statement
    (44) statement -> . expression
    (105) empty -> .
    (45) assignation -> . id EQUAL expression SEMICOLON
    (51) call_func -> . ID L_P args R_P SEMICOLON
    (52) return_func -> . RETURN L_P expression R_P SEMICOLON
    (53) read -> . READ L_P read_args R_P SEMICOLON
    (57) write -> . PRINT L_P write_args R_P SEMICOLON
    (63) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (66) repetition_statement -> . while_statement
    (67) repetition_statement -> . for_statement
    (71) expression -> . texp op1
    (22) id -> . ID id1
    (69) while_statement -> . WHILE L_P expression R_P do_statement
    (68) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (72) texp -> . gexp op2
    (73) gexp -> . nexp op3aux
    (74) nexp -> . term op4aux
    (75) term -> . fact op5aux
    (76) fact -> . ID fact1
    (77) fact -> . L_P expression R_P
    (78) fact -> . cte
    (81) cte -> . CTE_I
    (82) cte -> . CTE_F
    (83) cte -> . CTE_CHAR

    R_B             reduce using rule 105 (empty -> .)
    ID              shift and go to state 91
    RETURN          shift and go to state 92
    READ            shift and go to state 93
    PRINT           shift and go to state 94
    IF              shift and go to state 95
    WHILE           shift and go to state 98
    FOR             shift and go to state 99
    L_P             shift and go to state 72
    CTE_I           shift and go to state 74
    CTE_F           shift and go to state 75
    CTE_CHAR        shift and go to state 76

    statements                     shift and go to state 215
    statement                      shift and go to state 80
    empty                          shift and go to state 81
    assignation                    shift and go to state 82
    call_func                      shift and go to state 83
    return_func                    shift and go to state 84
    read                           shift and go to state 85
    write                          shift and go to state 86
    decision_statement             shift and go to state 87
    repetition_statement           shift and go to state 88
    expression                     shift and go to state 89
    id                             shift and go to state 90
    while_statement                shift and go to state 96
    for_statement                  shift and go to state 97
    texp                           shift and go to state 66
    gexp                           shift and go to state 67
    nexp                           shift and go to state 68
    term                           shift and go to state 69
    fact                           shift and go to state 70
    cte                            shift and go to state 73

state 215

    (64) decision_statement1 -> ELSE L_B statements . R_B

    R_B             shift and go to state 216


state 216

    (64) decision_statement1 -> ELSE L_B statements R_B .

    ID              reduce using rule 64 (decision_statement1 -> ELSE L_B statements R_B .)
    RETURN          reduce using rule 64 (decision_statement1 -> ELSE L_B statements R_B .)
    READ            reduce using rule 64 (decision_statement1 -> ELSE L_B statements R_B .)
    PRINT           reduce using rule 64 (decision_statement1 -> ELSE L_B statements R_B .)
    IF              reduce using rule 64 (decision_statement1 -> ELSE L_B statements R_B .)
    WHILE           reduce using rule 64 (decision_statement1 -> ELSE L_B statements R_B .)
    FOR             reduce using rule 64 (decision_statement1 -> ELSE L_B statements R_B .)
    L_P             reduce using rule 64 (decision_statement1 -> ELSE L_B statements R_B .)
    CTE_I           reduce using rule 64 (decision_statement1 -> ELSE L_B statements R_B .)
    CTE_F           reduce using rule 64 (decision_statement1 -> ELSE L_B statements R_B .)
    CTE_CHAR        reduce using rule 64 (decision_statement1 -> ELSE L_B statements R_B .)
    R_B             reduce using rule 64 (decision_statement1 -> ELSE L_B statements R_B .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for L_P in state 71 resolved as shift
WARNING: shift/reduce conflict for L_P in state 91 resolved as shift
