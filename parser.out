Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON g_var funcs main
Rule 2     main -> MAIN L_P params R_P var_declaration L_B statements R_B
Rule 3     type -> INT
Rule 4     type -> FLOAT
Rule 5     type -> CHAR
Rule 6     g_var -> var_declaration
Rule 7     funcs -> function funcs
Rule 8     funcs -> empty
Rule 9     var_declaration -> VAR var1
Rule 10    var_declaration -> empty
Rule 11    var1 -> var_type dec_id var2 SEMICOLON var4
Rule 12    var2 -> COMA dec_id var3
Rule 13    var2 -> empty
Rule 14    var3 -> var2
Rule 15    var4 -> var1
Rule 16    var4 -> empty
Rule 17    dec_id -> ID dec_id1
Rule 18    dec_id1 -> L_SB CTE_I R_SB dec_id2
Rule 19    dec_id1 -> empty
Rule 20    dec_id2 -> L_SB CTE_I R_SB
Rule 21    dec_id2 -> empty
Rule 22    id -> ID id1
Rule 23    id1 -> L_SB expression R_SB id2
Rule 24    id1 -> empty
Rule 25    id2 -> L_SB expression R_SB
Rule 26    id2 -> empty
Rule 27    var_type -> type
Rule 28    function -> FUNC func_type ID register_func L_P params R_P var_declaration L_B statements R_B
Rule 29    register_func -> <empty>
Rule 30    func_type -> VOID
Rule 31    func_type -> type
Rule 32    params -> var_type param_type dec_id params1
Rule 33    params -> empty
Rule 34    param_type -> <empty>
Rule 35    params1 -> COMA params
Rule 36    params1 -> empty
Rule 37    statements -> statement statements
Rule 38    statements -> empty
Rule 39    statement -> assignation
Rule 40    statement -> call_func
Rule 41    statement -> return_func
Rule 42    statement -> read
Rule 43    statement -> write
Rule 44    statement -> decision_statement
Rule 45    statement -> repetition_statement
Rule 46    statement -> expression
Rule 47    assignation -> id EQUAL expression SEMICOLON
Rule 48    args -> args1
Rule 49    args -> empty
Rule 50    args1 -> expression args2
Rule 51    args2 -> COMA args1
Rule 52    args2 -> empty
Rule 53    call_func -> ID L_P args R_P SEMICOLON
Rule 54    call_func_exp -> ID L_P args R_P
Rule 55    return_func -> RETURN L_P expression R_P SEMICOLON
Rule 56    read -> READ L_P read_args R_P SEMICOLON
Rule 57    read_args -> expression read_args1
Rule 58    read_args1 -> COMA expression read_args1
Rule 59    read_args1 -> empty
Rule 60    write -> PRINT L_P write_args R_P SEMICOLON
Rule 61    write_args -> write_args2 write_args1
Rule 62    write_args1 -> COMA write_args2 write_args1
Rule 63    write_args1 -> empty
Rule 64    write_args2 -> expression
Rule 65    write_args2 -> CTE_STRING
Rule 66    decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1
Rule 67    decision_statement1 -> ELSE L_B statements R_B
Rule 68    decision_statement1 -> empty
Rule 69    repetition_statement -> while_statement
Rule 70    repetition_statement -> for_statement
Rule 71    for_statement -> FOR id EQUAL expression TO expression do_statement
Rule 72    while_statement -> WHILE L_P expression R_P do_statement
Rule 73    do_statement -> DO L_B statements R_B
Rule 74    expression -> texp op1
Rule 75    texp -> gexp op2
Rule 76    gexp -> mexp op3aux
Rule 77    mexp -> term op4aux
Rule 78    term -> fact op5aux
Rule 79    fact -> id
Rule 80    fact -> call_func_exp
Rule 81    fact -> L_P expression R_P
Rule 82    fact -> cte
Rule 83    cte -> CTE_I
Rule 84    cte -> CTE_F
Rule 85    cte -> CTE_CHAR
Rule 86    op1 -> OR expression
Rule 87    op1 -> empty
Rule 88    op2 -> AND texp
Rule 89    op2 -> empty
Rule 90    op3 -> LESSTHAN
Rule 91    op3 -> LESSTHANEQ
Rule 92    op3 -> GREATERTHAN
Rule 93    op3 -> GREATERTHANEQ
Rule 94    op3 -> EQ
Rule 95    op3 -> DIFERENT
Rule 96    op3aux -> op3 mexp
Rule 97    op3aux -> empty
Rule 98    op4 -> PLUS
Rule 99    op4 -> MINUS
Rule 100   op4aux -> op4 mexp
Rule 101   op4aux -> empty
Rule 102   op5 -> MULT
Rule 103   op5 -> DIV
Rule 104   op5 -> MOD
Rule 105   op5aux -> op5 term
Rule 106   op5aux -> empty
Rule 107   empty -> <empty>

Terminals, with rules where they appear

AND                  : 88
CHAR                 : 5
COMA                 : 12 35 51 58 62
CTE_CHAR             : 85
CTE_F                : 84
CTE_I                : 18 20 83
CTE_STRING           : 65
DIFERENT             : 95
DIV                  : 103
DO                   : 73
ELSE                 : 67
EQ                   : 94
EQUAL                : 47 71
FLOAT                : 4
FOR                  : 71
FUNC                 : 28
GREATERTHAN          : 92
GREATERTHANEQ        : 93
ID                   : 1 17 22 28 53 54
IF                   : 66
INT                  : 3
LESSTHAN             : 90
LESSTHANEQ           : 91
L_B                  : 2 28 66 67 73
L_P                  : 2 28 53 54 55 56 60 66 72 81
L_SB                 : 18 20 23 25
MAIN                 : 2
MINUS                : 99
MOD                  : 104
MULT                 : 102
OR                   : 86
PLUS                 : 98
PRINT                : 60
PROGRAM              : 1
READ                 : 56
RETURN               : 55
R_B                  : 2 28 66 67 73
R_P                  : 2 28 53 54 55 56 60 66 72 81
R_SB                 : 18 20 23 25
SEMICOLON            : 1 11 47 53 55 56 60
TO                   : 71
VAR                  : 9
VOID                 : 30
WHILE                : 72
error                : 

Nonterminals, with rules where they appear

args                 : 53 54
args1                : 48 51
args2                : 50
assignation          : 39
call_func            : 40
call_func_exp        : 80
cte                  : 82
dec_id               : 11 12 32
dec_id1              : 17
dec_id2              : 18
decision_statement   : 44
decision_statement1  : 66
do_statement         : 71 72
empty                : 8 10 13 16 19 21 24 26 33 36 38 49 52 59 63 68 87 89 97 101 106
expression           : 23 25 46 47 50 55 57 58 64 66 71 71 72 81 86
fact                 : 78
for_statement        : 70
func_type            : 28
funcs                : 1 7
function             : 7
g_var                : 1
gexp                 : 75
id                   : 47 71 79
id1                  : 22
id2                  : 23
main                 : 1
mexp                 : 76 96 100
op1                  : 74
op2                  : 75
op3                  : 96
op3aux               : 76
op4                  : 100
op4aux               : 77
op5                  : 105
op5aux               : 78
param_type           : 32
params               : 2 28 35
params1              : 32
program              : 0
read                 : 42
read_args            : 56
read_args1           : 57 58
register_func        : 28
repetition_statement : 45
return_func          : 41
statement            : 37
statements           : 2 28 37 66 67 73
term                 : 77 105
texp                 : 74 88
type                 : 27 31
var1                 : 9 15
var2                 : 11 14
var3                 : 12
var4                 : 11
var_declaration      : 2 6 28
var_type             : 11 32
while_statement      : 69
write                : 43
write_args           : 60
write_args1          : 61 62
write_args2          : 61 62

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON g_var funcs main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON g_var funcs main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON g_var funcs main

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . g_var funcs main
    (6) g_var -> . var_declaration
    (9) var_declaration -> . VAR var1
    (10) var_declaration -> . empty
    (107) empty -> .

    VAR             shift and go to state 7
    FUNC            reduce using rule 107 (empty -> .)
    MAIN            reduce using rule 107 (empty -> .)

    g_var                          shift and go to state 5
    var_declaration                shift and go to state 6
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID SEMICOLON g_var . funcs main
    (7) funcs -> . function funcs
    (8) funcs -> . empty
    (28) function -> . FUNC func_type ID register_func L_P params R_P var_declaration L_B statements R_B
    (107) empty -> .

    FUNC            shift and go to state 12
    MAIN            reduce using rule 107 (empty -> .)

    funcs                          shift and go to state 9
    function                       shift and go to state 10
    empty                          shift and go to state 11

state 6

    (6) g_var -> var_declaration .

    FUNC            reduce using rule 6 (g_var -> var_declaration .)
    MAIN            reduce using rule 6 (g_var -> var_declaration .)


state 7

    (9) var_declaration -> VAR . var1
    (11) var1 -> . var_type dec_id var2 SEMICOLON var4
    (27) var_type -> . type
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    var1                           shift and go to state 13
    var_type                       shift and go to state 14
    type                           shift and go to state 15

state 8

    (10) var_declaration -> empty .

    FUNC            reduce using rule 10 (var_declaration -> empty .)
    MAIN            reduce using rule 10 (var_declaration -> empty .)
    L_B             reduce using rule 10 (var_declaration -> empty .)


state 9

    (1) program -> PROGRAM ID SEMICOLON g_var funcs . main
    (2) main -> . MAIN L_P params R_P var_declaration L_B statements R_B

    MAIN            shift and go to state 20

    main                           shift and go to state 19

state 10

    (7) funcs -> function . funcs
    (7) funcs -> . function funcs
    (8) funcs -> . empty
    (28) function -> . FUNC func_type ID register_func L_P params R_P var_declaration L_B statements R_B
    (107) empty -> .

    FUNC            shift and go to state 12
    MAIN            reduce using rule 107 (empty -> .)

    function                       shift and go to state 10
    funcs                          shift and go to state 21
    empty                          shift and go to state 11

state 11

    (8) funcs -> empty .

    MAIN            reduce using rule 8 (funcs -> empty .)


state 12

    (28) function -> FUNC . func_type ID register_func L_P params R_P var_declaration L_B statements R_B
    (30) func_type -> . VOID
    (31) func_type -> . type
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    VOID            shift and go to state 23
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    func_type                      shift and go to state 22
    type                           shift and go to state 24

state 13

    (9) var_declaration -> VAR var1 .

    FUNC            reduce using rule 9 (var_declaration -> VAR var1 .)
    MAIN            reduce using rule 9 (var_declaration -> VAR var1 .)
    L_B             reduce using rule 9 (var_declaration -> VAR var1 .)


state 14

    (11) var1 -> var_type . dec_id var2 SEMICOLON var4
    (17) dec_id -> . ID dec_id1

    ID              shift and go to state 26

    dec_id                         shift and go to state 25

state 15

    (27) var_type -> type .

    ID              reduce using rule 27 (var_type -> type .)


state 16

    (3) type -> INT .

    ID              reduce using rule 3 (type -> INT .)


state 17

    (4) type -> FLOAT .

    ID              reduce using rule 4 (type -> FLOAT .)


state 18

    (5) type -> CHAR .

    ID              reduce using rule 5 (type -> CHAR .)


state 19

    (1) program -> PROGRAM ID SEMICOLON g_var funcs main .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON g_var funcs main .)


state 20

    (2) main -> MAIN . L_P params R_P var_declaration L_B statements R_B

    L_P             shift and go to state 27


state 21

    (7) funcs -> function funcs .

    MAIN            reduce using rule 7 (funcs -> function funcs .)


state 22

    (28) function -> FUNC func_type . ID register_func L_P params R_P var_declaration L_B statements R_B

    ID              shift and go to state 28


state 23

    (30) func_type -> VOID .

    ID              reduce using rule 30 (func_type -> VOID .)


state 24

    (31) func_type -> type .

    ID              reduce using rule 31 (func_type -> type .)


state 25

    (11) var1 -> var_type dec_id . var2 SEMICOLON var4
    (12) var2 -> . COMA dec_id var3
    (13) var2 -> . empty
    (107) empty -> .

    COMA            shift and go to state 30
    SEMICOLON       reduce using rule 107 (empty -> .)

    var2                           shift and go to state 29
    empty                          shift and go to state 31

state 26

    (17) dec_id -> ID . dec_id1
    (18) dec_id1 -> . L_SB CTE_I R_SB dec_id2
    (19) dec_id1 -> . empty
    (107) empty -> .

    L_SB            shift and go to state 33
    COMA            reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    R_P             reduce using rule 107 (empty -> .)

    dec_id1                        shift and go to state 32
    empty                          shift and go to state 34

state 27

    (2) main -> MAIN L_P . params R_P var_declaration L_B statements R_B
    (32) params -> . var_type param_type dec_id params1
    (33) params -> . empty
    (27) var_type -> . type
    (107) empty -> .
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    R_P             reduce using rule 107 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    params                         shift and go to state 35
    var_type                       shift and go to state 36
    empty                          shift and go to state 37
    type                           shift and go to state 15

state 28

    (28) function -> FUNC func_type ID . register_func L_P params R_P var_declaration L_B statements R_B
    (29) register_func -> .

    L_P             reduce using rule 29 (register_func -> .)

    register_func                  shift and go to state 38

state 29

    (11) var1 -> var_type dec_id var2 . SEMICOLON var4

    SEMICOLON       shift and go to state 39


state 30

    (12) var2 -> COMA . dec_id var3
    (17) dec_id -> . ID dec_id1

    ID              shift and go to state 26

    dec_id                         shift and go to state 40

state 31

    (13) var2 -> empty .

    SEMICOLON       reduce using rule 13 (var2 -> empty .)


state 32

    (17) dec_id -> ID dec_id1 .

    COMA            reduce using rule 17 (dec_id -> ID dec_id1 .)
    SEMICOLON       reduce using rule 17 (dec_id -> ID dec_id1 .)
    R_P             reduce using rule 17 (dec_id -> ID dec_id1 .)


state 33

    (18) dec_id1 -> L_SB . CTE_I R_SB dec_id2

    CTE_I           shift and go to state 41


state 34

    (19) dec_id1 -> empty .

    COMA            reduce using rule 19 (dec_id1 -> empty .)
    SEMICOLON       reduce using rule 19 (dec_id1 -> empty .)
    R_P             reduce using rule 19 (dec_id1 -> empty .)


state 35

    (2) main -> MAIN L_P params . R_P var_declaration L_B statements R_B

    R_P             shift and go to state 42


state 36

    (32) params -> var_type . param_type dec_id params1
    (34) param_type -> .

    ID              reduce using rule 34 (param_type -> .)

    param_type                     shift and go to state 43

state 37

    (33) params -> empty .

    R_P             reduce using rule 33 (params -> empty .)


state 38

    (28) function -> FUNC func_type ID register_func . L_P params R_P var_declaration L_B statements R_B

    L_P             shift and go to state 44


state 39

    (11) var1 -> var_type dec_id var2 SEMICOLON . var4
    (15) var4 -> . var1
    (16) var4 -> . empty
    (11) var1 -> . var_type dec_id var2 SEMICOLON var4
    (107) empty -> .
    (27) var_type -> . type
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    FUNC            reduce using rule 107 (empty -> .)
    MAIN            reduce using rule 107 (empty -> .)
    L_B             reduce using rule 107 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    var_type                       shift and go to state 14
    var4                           shift and go to state 45
    var1                           shift and go to state 46
    empty                          shift and go to state 47
    type                           shift and go to state 15

state 40

    (12) var2 -> COMA dec_id . var3
    (14) var3 -> . var2
    (12) var2 -> . COMA dec_id var3
    (13) var2 -> . empty
    (107) empty -> .

    COMA            shift and go to state 30
    SEMICOLON       reduce using rule 107 (empty -> .)

    var3                           shift and go to state 48
    var2                           shift and go to state 49
    empty                          shift and go to state 31

state 41

    (18) dec_id1 -> L_SB CTE_I . R_SB dec_id2

    R_SB            shift and go to state 50


state 42

    (2) main -> MAIN L_P params R_P . var_declaration L_B statements R_B
    (9) var_declaration -> . VAR var1
    (10) var_declaration -> . empty
    (107) empty -> .

    VAR             shift and go to state 7
    L_B             reduce using rule 107 (empty -> .)

    var_declaration                shift and go to state 51
    empty                          shift and go to state 8

state 43

    (32) params -> var_type param_type . dec_id params1
    (17) dec_id -> . ID dec_id1

    ID              shift and go to state 26

    dec_id                         shift and go to state 52

state 44

    (28) function -> FUNC func_type ID register_func L_P . params R_P var_declaration L_B statements R_B
    (32) params -> . var_type param_type dec_id params1
    (33) params -> . empty
    (27) var_type -> . type
    (107) empty -> .
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    R_P             reduce using rule 107 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    params                         shift and go to state 53
    var_type                       shift and go to state 36
    empty                          shift and go to state 37
    type                           shift and go to state 15

state 45

    (11) var1 -> var_type dec_id var2 SEMICOLON var4 .

    FUNC            reduce using rule 11 (var1 -> var_type dec_id var2 SEMICOLON var4 .)
    MAIN            reduce using rule 11 (var1 -> var_type dec_id var2 SEMICOLON var4 .)
    L_B             reduce using rule 11 (var1 -> var_type dec_id var2 SEMICOLON var4 .)


state 46

    (15) var4 -> var1 .

    FUNC            reduce using rule 15 (var4 -> var1 .)
    MAIN            reduce using rule 15 (var4 -> var1 .)
    L_B             reduce using rule 15 (var4 -> var1 .)


state 47

    (16) var4 -> empty .

    FUNC            reduce using rule 16 (var4 -> empty .)
    MAIN            reduce using rule 16 (var4 -> empty .)
    L_B             reduce using rule 16 (var4 -> empty .)


state 48

    (12) var2 -> COMA dec_id var3 .

    SEMICOLON       reduce using rule 12 (var2 -> COMA dec_id var3 .)


state 49

    (14) var3 -> var2 .

    SEMICOLON       reduce using rule 14 (var3 -> var2 .)


state 50

    (18) dec_id1 -> L_SB CTE_I R_SB . dec_id2
    (20) dec_id2 -> . L_SB CTE_I R_SB
    (21) dec_id2 -> . empty
    (107) empty -> .

    L_SB            shift and go to state 54
    COMA            reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    R_P             reduce using rule 107 (empty -> .)

    dec_id2                        shift and go to state 55
    empty                          shift and go to state 56

state 51

    (2) main -> MAIN L_P params R_P var_declaration . L_B statements R_B

    L_B             shift and go to state 57


state 52

    (32) params -> var_type param_type dec_id . params1
    (35) params1 -> . COMA params
    (36) params1 -> . empty
    (107) empty -> .

    COMA            shift and go to state 59
    R_P             reduce using rule 107 (empty -> .)

    params1                        shift and go to state 58
    empty                          shift and go to state 60

state 53

    (28) function -> FUNC func_type ID register_func L_P params . R_P var_declaration L_B statements R_B

    R_P             shift and go to state 61


state 54

    (20) dec_id2 -> L_SB . CTE_I R_SB

    CTE_I           shift and go to state 62


state 55

    (18) dec_id1 -> L_SB CTE_I R_SB dec_id2 .

    COMA            reduce using rule 18 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)
    SEMICOLON       reduce using rule 18 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)
    R_P             reduce using rule 18 (dec_id1 -> L_SB CTE_I R_SB dec_id2 .)


state 56

    (21) dec_id2 -> empty .

    COMA            reduce using rule 21 (dec_id2 -> empty .)
    SEMICOLON       reduce using rule 21 (dec_id2 -> empty .)
    R_P             reduce using rule 21 (dec_id2 -> empty .)


state 57

    (2) main -> MAIN L_P params R_P var_declaration L_B . statements R_B
    (37) statements -> . statement statements
    (38) statements -> . empty
    (39) statement -> . assignation
    (40) statement -> . call_func
    (41) statement -> . return_func
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . decision_statement
    (45) statement -> . repetition_statement
    (46) statement -> . expression
    (107) empty -> .
    (47) assignation -> . id EQUAL expression SEMICOLON
    (53) call_func -> . ID L_P args R_P SEMICOLON
    (55) return_func -> . RETURN L_P expression R_P SEMICOLON
    (56) read -> . READ L_P read_args R_P SEMICOLON
    (60) write -> . PRINT L_P write_args R_P SEMICOLON
    (66) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (69) repetition_statement -> . while_statement
    (70) repetition_statement -> . for_statement
    (74) expression -> . texp op1
    (22) id -> . ID id1
    (72) while_statement -> . WHILE L_P expression R_P do_statement
    (71) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    R_B             reduce using rule 107 (empty -> .)
    ID              shift and go to state 76
    RETURN          shift and go to state 77
    READ            shift and go to state 78
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 84
    FOR             shift and go to state 85
    L_P             shift and go to state 63
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    statements                     shift and go to state 64
    statement                      shift and go to state 65
    empty                          shift and go to state 66
    assignation                    shift and go to state 67
    call_func                      shift and go to state 68
    return_func                    shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    decision_statement             shift and go to state 72
    repetition_statement           shift and go to state 73
    expression                     shift and go to state 74
    id                             shift and go to state 75
    while_statement                shift and go to state 81
    for_statement                  shift and go to state 82
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 58

    (32) params -> var_type param_type dec_id params1 .

    R_P             reduce using rule 32 (params -> var_type param_type dec_id params1 .)


state 59

    (35) params1 -> COMA . params
    (32) params -> . var_type param_type dec_id params1
    (33) params -> . empty
    (27) var_type -> . type
    (107) empty -> .
    (3) type -> . INT
    (4) type -> . FLOAT
    (5) type -> . CHAR

    R_P             reduce using rule 107 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18

    params                         shift and go to state 95
    var_type                       shift and go to state 36
    empty                          shift and go to state 37
    type                           shift and go to state 15

state 60

    (36) params1 -> empty .

    R_P             reduce using rule 36 (params1 -> empty .)


state 61

    (28) function -> FUNC func_type ID register_func L_P params R_P . var_declaration L_B statements R_B
    (9) var_declaration -> . VAR var1
    (10) var_declaration -> . empty
    (107) empty -> .

    VAR             shift and go to state 7
    L_B             reduce using rule 107 (empty -> .)

    var_declaration                shift and go to state 96
    empty                          shift and go to state 8

state 62

    (20) dec_id2 -> L_SB CTE_I . R_SB

    R_SB            shift and go to state 97


state 63

    (81) fact -> L_P . expression R_P
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 98
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 64

    (2) main -> MAIN L_P params R_P var_declaration L_B statements . R_B

    R_B             shift and go to state 101


state 65

    (37) statements -> statement . statements
    (37) statements -> . statement statements
    (38) statements -> . empty
    (39) statement -> . assignation
    (40) statement -> . call_func
    (41) statement -> . return_func
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . decision_statement
    (45) statement -> . repetition_statement
    (46) statement -> . expression
    (107) empty -> .
    (47) assignation -> . id EQUAL expression SEMICOLON
    (53) call_func -> . ID L_P args R_P SEMICOLON
    (55) return_func -> . RETURN L_P expression R_P SEMICOLON
    (56) read -> . READ L_P read_args R_P SEMICOLON
    (60) write -> . PRINT L_P write_args R_P SEMICOLON
    (66) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (69) repetition_statement -> . while_statement
    (70) repetition_statement -> . for_statement
    (74) expression -> . texp op1
    (22) id -> . ID id1
    (72) while_statement -> . WHILE L_P expression R_P do_statement
    (71) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    R_B             reduce using rule 107 (empty -> .)
    ID              shift and go to state 76
    RETURN          shift and go to state 77
    READ            shift and go to state 78
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 84
    FOR             shift and go to state 85
    L_P             shift and go to state 63
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    statement                      shift and go to state 65
    statements                     shift and go to state 102
    empty                          shift and go to state 66
    assignation                    shift and go to state 67
    call_func                      shift and go to state 68
    return_func                    shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    decision_statement             shift and go to state 72
    repetition_statement           shift and go to state 73
    expression                     shift and go to state 74
    id                             shift and go to state 75
    while_statement                shift and go to state 81
    for_statement                  shift and go to state 82
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 66

    (38) statements -> empty .

    R_B             reduce using rule 38 (statements -> empty .)


state 67

    (39) statement -> assignation .

    ID              reduce using rule 39 (statement -> assignation .)
    RETURN          reduce using rule 39 (statement -> assignation .)
    READ            reduce using rule 39 (statement -> assignation .)
    PRINT           reduce using rule 39 (statement -> assignation .)
    IF              reduce using rule 39 (statement -> assignation .)
    WHILE           reduce using rule 39 (statement -> assignation .)
    FOR             reduce using rule 39 (statement -> assignation .)
    L_P             reduce using rule 39 (statement -> assignation .)
    CTE_I           reduce using rule 39 (statement -> assignation .)
    CTE_F           reduce using rule 39 (statement -> assignation .)
    CTE_CHAR        reduce using rule 39 (statement -> assignation .)
    R_B             reduce using rule 39 (statement -> assignation .)


state 68

    (40) statement -> call_func .

    ID              reduce using rule 40 (statement -> call_func .)
    RETURN          reduce using rule 40 (statement -> call_func .)
    READ            reduce using rule 40 (statement -> call_func .)
    PRINT           reduce using rule 40 (statement -> call_func .)
    IF              reduce using rule 40 (statement -> call_func .)
    WHILE           reduce using rule 40 (statement -> call_func .)
    FOR             reduce using rule 40 (statement -> call_func .)
    L_P             reduce using rule 40 (statement -> call_func .)
    CTE_I           reduce using rule 40 (statement -> call_func .)
    CTE_F           reduce using rule 40 (statement -> call_func .)
    CTE_CHAR        reduce using rule 40 (statement -> call_func .)
    R_B             reduce using rule 40 (statement -> call_func .)


state 69

    (41) statement -> return_func .

    ID              reduce using rule 41 (statement -> return_func .)
    RETURN          reduce using rule 41 (statement -> return_func .)
    READ            reduce using rule 41 (statement -> return_func .)
    PRINT           reduce using rule 41 (statement -> return_func .)
    IF              reduce using rule 41 (statement -> return_func .)
    WHILE           reduce using rule 41 (statement -> return_func .)
    FOR             reduce using rule 41 (statement -> return_func .)
    L_P             reduce using rule 41 (statement -> return_func .)
    CTE_I           reduce using rule 41 (statement -> return_func .)
    CTE_F           reduce using rule 41 (statement -> return_func .)
    CTE_CHAR        reduce using rule 41 (statement -> return_func .)
    R_B             reduce using rule 41 (statement -> return_func .)


state 70

    (42) statement -> read .

    ID              reduce using rule 42 (statement -> read .)
    RETURN          reduce using rule 42 (statement -> read .)
    READ            reduce using rule 42 (statement -> read .)
    PRINT           reduce using rule 42 (statement -> read .)
    IF              reduce using rule 42 (statement -> read .)
    WHILE           reduce using rule 42 (statement -> read .)
    FOR             reduce using rule 42 (statement -> read .)
    L_P             reduce using rule 42 (statement -> read .)
    CTE_I           reduce using rule 42 (statement -> read .)
    CTE_F           reduce using rule 42 (statement -> read .)
    CTE_CHAR        reduce using rule 42 (statement -> read .)
    R_B             reduce using rule 42 (statement -> read .)


state 71

    (43) statement -> write .

    ID              reduce using rule 43 (statement -> write .)
    RETURN          reduce using rule 43 (statement -> write .)
    READ            reduce using rule 43 (statement -> write .)
    PRINT           reduce using rule 43 (statement -> write .)
    IF              reduce using rule 43 (statement -> write .)
    WHILE           reduce using rule 43 (statement -> write .)
    FOR             reduce using rule 43 (statement -> write .)
    L_P             reduce using rule 43 (statement -> write .)
    CTE_I           reduce using rule 43 (statement -> write .)
    CTE_F           reduce using rule 43 (statement -> write .)
    CTE_CHAR        reduce using rule 43 (statement -> write .)
    R_B             reduce using rule 43 (statement -> write .)


state 72

    (44) statement -> decision_statement .

    ID              reduce using rule 44 (statement -> decision_statement .)
    RETURN          reduce using rule 44 (statement -> decision_statement .)
    READ            reduce using rule 44 (statement -> decision_statement .)
    PRINT           reduce using rule 44 (statement -> decision_statement .)
    IF              reduce using rule 44 (statement -> decision_statement .)
    WHILE           reduce using rule 44 (statement -> decision_statement .)
    FOR             reduce using rule 44 (statement -> decision_statement .)
    L_P             reduce using rule 44 (statement -> decision_statement .)
    CTE_I           reduce using rule 44 (statement -> decision_statement .)
    CTE_F           reduce using rule 44 (statement -> decision_statement .)
    CTE_CHAR        reduce using rule 44 (statement -> decision_statement .)
    R_B             reduce using rule 44 (statement -> decision_statement .)


state 73

    (45) statement -> repetition_statement .

    ID              reduce using rule 45 (statement -> repetition_statement .)
    RETURN          reduce using rule 45 (statement -> repetition_statement .)
    READ            reduce using rule 45 (statement -> repetition_statement .)
    PRINT           reduce using rule 45 (statement -> repetition_statement .)
    IF              reduce using rule 45 (statement -> repetition_statement .)
    WHILE           reduce using rule 45 (statement -> repetition_statement .)
    FOR             reduce using rule 45 (statement -> repetition_statement .)
    L_P             reduce using rule 45 (statement -> repetition_statement .)
    CTE_I           reduce using rule 45 (statement -> repetition_statement .)
    CTE_F           reduce using rule 45 (statement -> repetition_statement .)
    CTE_CHAR        reduce using rule 45 (statement -> repetition_statement .)
    R_B             reduce using rule 45 (statement -> repetition_statement .)


state 74

    (46) statement -> expression .

    ID              reduce using rule 46 (statement -> expression .)
    RETURN          reduce using rule 46 (statement -> expression .)
    READ            reduce using rule 46 (statement -> expression .)
    PRINT           reduce using rule 46 (statement -> expression .)
    IF              reduce using rule 46 (statement -> expression .)
    WHILE           reduce using rule 46 (statement -> expression .)
    FOR             reduce using rule 46 (statement -> expression .)
    L_P             reduce using rule 46 (statement -> expression .)
    CTE_I           reduce using rule 46 (statement -> expression .)
    CTE_F           reduce using rule 46 (statement -> expression .)
    CTE_CHAR        reduce using rule 46 (statement -> expression .)
    R_B             reduce using rule 46 (statement -> expression .)


state 75

    (47) assignation -> id . EQUAL expression SEMICOLON
    (79) fact -> id .

    EQUAL           shift and go to state 103
    MULT            reduce using rule 79 (fact -> id .)
    DIV             reduce using rule 79 (fact -> id .)
    MOD             reduce using rule 79 (fact -> id .)
    PLUS            reduce using rule 79 (fact -> id .)
    MINUS           reduce using rule 79 (fact -> id .)
    LESSTHAN        reduce using rule 79 (fact -> id .)
    LESSTHANEQ      reduce using rule 79 (fact -> id .)
    GREATERTHAN     reduce using rule 79 (fact -> id .)
    GREATERTHANEQ   reduce using rule 79 (fact -> id .)
    EQ              reduce using rule 79 (fact -> id .)
    DIFERENT        reduce using rule 79 (fact -> id .)
    AND             reduce using rule 79 (fact -> id .)
    OR              reduce using rule 79 (fact -> id .)
    ID              reduce using rule 79 (fact -> id .)
    RETURN          reduce using rule 79 (fact -> id .)
    READ            reduce using rule 79 (fact -> id .)
    PRINT           reduce using rule 79 (fact -> id .)
    IF              reduce using rule 79 (fact -> id .)
    WHILE           reduce using rule 79 (fact -> id .)
    FOR             reduce using rule 79 (fact -> id .)
    L_P             reduce using rule 79 (fact -> id .)
    CTE_I           reduce using rule 79 (fact -> id .)
    CTE_F           reduce using rule 79 (fact -> id .)
    CTE_CHAR        reduce using rule 79 (fact -> id .)
    R_B             reduce using rule 79 (fact -> id .)


state 76

    (53) call_func -> ID . L_P args R_P SEMICOLON
    (22) id -> ID . id1
    (54) call_func_exp -> ID . L_P args R_P
    (23) id1 -> . L_SB expression R_SB id2
    (24) id1 -> . empty
    (107) empty -> .

  ! shift/reduce conflict for L_P resolved as shift
    L_P             shift and go to state 104
    L_SB            shift and go to state 106
    EQUAL           reduce using rule 107 (empty -> .)
    MULT            reduce using rule 107 (empty -> .)
    DIV             reduce using rule 107 (empty -> .)
    MOD             reduce using rule 107 (empty -> .)
    PLUS            reduce using rule 107 (empty -> .)
    MINUS           reduce using rule 107 (empty -> .)
    LESSTHAN        reduce using rule 107 (empty -> .)
    LESSTHANEQ      reduce using rule 107 (empty -> .)
    GREATERTHAN     reduce using rule 107 (empty -> .)
    GREATERTHANEQ   reduce using rule 107 (empty -> .)
    EQ              reduce using rule 107 (empty -> .)
    DIFERENT        reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    PRINT           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    FOR             reduce using rule 107 (empty -> .)
    CTE_I           reduce using rule 107 (empty -> .)
    CTE_F           reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)
    R_B             reduce using rule 107 (empty -> .)

  ! L_P             [ reduce using rule 107 (empty -> .) ]

    id1                            shift and go to state 105
    empty                          shift and go to state 107

state 77

    (55) return_func -> RETURN . L_P expression R_P SEMICOLON

    L_P             shift and go to state 108


state 78

    (56) read -> READ . L_P read_args R_P SEMICOLON

    L_P             shift and go to state 109


state 79

    (60) write -> PRINT . L_P write_args R_P SEMICOLON

    L_P             shift and go to state 110


state 80

    (66) decision_statement -> IF . L_P expression R_P L_B statements R_B decision_statement1

    L_P             shift and go to state 111


state 81

    (69) repetition_statement -> while_statement .

    ID              reduce using rule 69 (repetition_statement -> while_statement .)
    RETURN          reduce using rule 69 (repetition_statement -> while_statement .)
    READ            reduce using rule 69 (repetition_statement -> while_statement .)
    PRINT           reduce using rule 69 (repetition_statement -> while_statement .)
    IF              reduce using rule 69 (repetition_statement -> while_statement .)
    WHILE           reduce using rule 69 (repetition_statement -> while_statement .)
    FOR             reduce using rule 69 (repetition_statement -> while_statement .)
    L_P             reduce using rule 69 (repetition_statement -> while_statement .)
    CTE_I           reduce using rule 69 (repetition_statement -> while_statement .)
    CTE_F           reduce using rule 69 (repetition_statement -> while_statement .)
    CTE_CHAR        reduce using rule 69 (repetition_statement -> while_statement .)
    R_B             reduce using rule 69 (repetition_statement -> while_statement .)


state 82

    (70) repetition_statement -> for_statement .

    ID              reduce using rule 70 (repetition_statement -> for_statement .)
    RETURN          reduce using rule 70 (repetition_statement -> for_statement .)
    READ            reduce using rule 70 (repetition_statement -> for_statement .)
    PRINT           reduce using rule 70 (repetition_statement -> for_statement .)
    IF              reduce using rule 70 (repetition_statement -> for_statement .)
    WHILE           reduce using rule 70 (repetition_statement -> for_statement .)
    FOR             reduce using rule 70 (repetition_statement -> for_statement .)
    L_P             reduce using rule 70 (repetition_statement -> for_statement .)
    CTE_I           reduce using rule 70 (repetition_statement -> for_statement .)
    CTE_F           reduce using rule 70 (repetition_statement -> for_statement .)
    CTE_CHAR        reduce using rule 70 (repetition_statement -> for_statement .)
    R_B             reduce using rule 70 (repetition_statement -> for_statement .)


state 83

    (74) expression -> texp . op1
    (86) op1 -> . OR expression
    (87) op1 -> . empty
    (107) empty -> .

    OR              shift and go to state 113
    ID              reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    PRINT           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    FOR             reduce using rule 107 (empty -> .)
    L_P             reduce using rule 107 (empty -> .)
    CTE_I           reduce using rule 107 (empty -> .)
    CTE_F           reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)
    R_B             reduce using rule 107 (empty -> .)
    R_P             reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    R_SB            reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

    op1                            shift and go to state 112
    empty                          shift and go to state 114

state 84

    (72) while_statement -> WHILE . L_P expression R_P do_statement

    L_P             shift and go to state 115


state 85

    (71) for_statement -> FOR . id EQUAL expression TO expression do_statement
    (22) id -> . ID id1

    ID              shift and go to state 117

    id                             shift and go to state 116

state 86

    (75) texp -> gexp . op2
    (88) op2 -> . AND texp
    (89) op2 -> . empty
    (107) empty -> .

    AND             shift and go to state 119
    OR              reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    PRINT           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    FOR             reduce using rule 107 (empty -> .)
    L_P             reduce using rule 107 (empty -> .)
    CTE_I           reduce using rule 107 (empty -> .)
    CTE_F           reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)
    R_B             reduce using rule 107 (empty -> .)
    R_P             reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    R_SB            reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

    op2                            shift and go to state 118
    empty                          shift and go to state 120

state 87

    (76) gexp -> mexp . op3aux
    (96) op3aux -> . op3 mexp
    (97) op3aux -> . empty
    (90) op3 -> . LESSTHAN
    (91) op3 -> . LESSTHANEQ
    (92) op3 -> . GREATERTHAN
    (93) op3 -> . GREATERTHANEQ
    (94) op3 -> . EQ
    (95) op3 -> . DIFERENT
    (107) empty -> .

    LESSTHAN        shift and go to state 124
    LESSTHANEQ      shift and go to state 125
    GREATERTHAN     shift and go to state 126
    GREATERTHANEQ   shift and go to state 127
    EQ              shift and go to state 128
    DIFERENT        shift and go to state 129
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    PRINT           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    FOR             reduce using rule 107 (empty -> .)
    L_P             reduce using rule 107 (empty -> .)
    CTE_I           reduce using rule 107 (empty -> .)
    CTE_F           reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)
    R_B             reduce using rule 107 (empty -> .)
    R_P             reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    R_SB            reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

    op3aux                         shift and go to state 121
    op3                            shift and go to state 122
    empty                          shift and go to state 123

state 88

    (77) mexp -> term . op4aux
    (100) op4aux -> . op4 mexp
    (101) op4aux -> . empty
    (98) op4 -> . PLUS
    (99) op4 -> . MINUS
    (107) empty -> .

    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    LESSTHAN        reduce using rule 107 (empty -> .)
    LESSTHANEQ      reduce using rule 107 (empty -> .)
    GREATERTHAN     reduce using rule 107 (empty -> .)
    GREATERTHANEQ   reduce using rule 107 (empty -> .)
    EQ              reduce using rule 107 (empty -> .)
    DIFERENT        reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    PRINT           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    FOR             reduce using rule 107 (empty -> .)
    L_P             reduce using rule 107 (empty -> .)
    CTE_I           reduce using rule 107 (empty -> .)
    CTE_F           reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)
    R_B             reduce using rule 107 (empty -> .)
    R_P             reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    R_SB            reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

    op4aux                         shift and go to state 130
    op4                            shift and go to state 131
    empty                          shift and go to state 132

state 89

    (78) term -> fact . op5aux
    (105) op5aux -> . op5 term
    (106) op5aux -> . empty
    (102) op5 -> . MULT
    (103) op5 -> . DIV
    (104) op5 -> . MOD
    (107) empty -> .

    MULT            shift and go to state 138
    DIV             shift and go to state 139
    MOD             shift and go to state 140
    PLUS            reduce using rule 107 (empty -> .)
    MINUS           reduce using rule 107 (empty -> .)
    LESSTHAN        reduce using rule 107 (empty -> .)
    LESSTHANEQ      reduce using rule 107 (empty -> .)
    GREATERTHAN     reduce using rule 107 (empty -> .)
    GREATERTHANEQ   reduce using rule 107 (empty -> .)
    EQ              reduce using rule 107 (empty -> .)
    DIFERENT        reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    PRINT           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    FOR             reduce using rule 107 (empty -> .)
    L_P             reduce using rule 107 (empty -> .)
    CTE_I           reduce using rule 107 (empty -> .)
    CTE_F           reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)
    R_B             reduce using rule 107 (empty -> .)
    R_P             reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    R_SB            reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

    op5aux                         shift and go to state 135
    op5                            shift and go to state 136
    empty                          shift and go to state 137

state 90

    (80) fact -> call_func_exp .

    MULT            reduce using rule 80 (fact -> call_func_exp .)
    DIV             reduce using rule 80 (fact -> call_func_exp .)
    MOD             reduce using rule 80 (fact -> call_func_exp .)
    PLUS            reduce using rule 80 (fact -> call_func_exp .)
    MINUS           reduce using rule 80 (fact -> call_func_exp .)
    LESSTHAN        reduce using rule 80 (fact -> call_func_exp .)
    LESSTHANEQ      reduce using rule 80 (fact -> call_func_exp .)
    GREATERTHAN     reduce using rule 80 (fact -> call_func_exp .)
    GREATERTHANEQ   reduce using rule 80 (fact -> call_func_exp .)
    EQ              reduce using rule 80 (fact -> call_func_exp .)
    DIFERENT        reduce using rule 80 (fact -> call_func_exp .)
    AND             reduce using rule 80 (fact -> call_func_exp .)
    OR              reduce using rule 80 (fact -> call_func_exp .)
    ID              reduce using rule 80 (fact -> call_func_exp .)
    RETURN          reduce using rule 80 (fact -> call_func_exp .)
    READ            reduce using rule 80 (fact -> call_func_exp .)
    PRINT           reduce using rule 80 (fact -> call_func_exp .)
    IF              reduce using rule 80 (fact -> call_func_exp .)
    WHILE           reduce using rule 80 (fact -> call_func_exp .)
    FOR             reduce using rule 80 (fact -> call_func_exp .)
    L_P             reduce using rule 80 (fact -> call_func_exp .)
    CTE_I           reduce using rule 80 (fact -> call_func_exp .)
    CTE_F           reduce using rule 80 (fact -> call_func_exp .)
    CTE_CHAR        reduce using rule 80 (fact -> call_func_exp .)
    R_B             reduce using rule 80 (fact -> call_func_exp .)
    R_P             reduce using rule 80 (fact -> call_func_exp .)
    SEMICOLON       reduce using rule 80 (fact -> call_func_exp .)
    COMA            reduce using rule 80 (fact -> call_func_exp .)
    R_SB            reduce using rule 80 (fact -> call_func_exp .)
    TO              reduce using rule 80 (fact -> call_func_exp .)
    DO              reduce using rule 80 (fact -> call_func_exp .)


state 91

    (82) fact -> cte .

    MULT            reduce using rule 82 (fact -> cte .)
    DIV             reduce using rule 82 (fact -> cte .)
    MOD             reduce using rule 82 (fact -> cte .)
    PLUS            reduce using rule 82 (fact -> cte .)
    MINUS           reduce using rule 82 (fact -> cte .)
    LESSTHAN        reduce using rule 82 (fact -> cte .)
    LESSTHANEQ      reduce using rule 82 (fact -> cte .)
    GREATERTHAN     reduce using rule 82 (fact -> cte .)
    GREATERTHANEQ   reduce using rule 82 (fact -> cte .)
    EQ              reduce using rule 82 (fact -> cte .)
    DIFERENT        reduce using rule 82 (fact -> cte .)
    AND             reduce using rule 82 (fact -> cte .)
    OR              reduce using rule 82 (fact -> cte .)
    ID              reduce using rule 82 (fact -> cte .)
    RETURN          reduce using rule 82 (fact -> cte .)
    READ            reduce using rule 82 (fact -> cte .)
    PRINT           reduce using rule 82 (fact -> cte .)
    IF              reduce using rule 82 (fact -> cte .)
    WHILE           reduce using rule 82 (fact -> cte .)
    FOR             reduce using rule 82 (fact -> cte .)
    L_P             reduce using rule 82 (fact -> cte .)
    CTE_I           reduce using rule 82 (fact -> cte .)
    CTE_F           reduce using rule 82 (fact -> cte .)
    CTE_CHAR        reduce using rule 82 (fact -> cte .)
    R_B             reduce using rule 82 (fact -> cte .)
    R_P             reduce using rule 82 (fact -> cte .)
    SEMICOLON       reduce using rule 82 (fact -> cte .)
    COMA            reduce using rule 82 (fact -> cte .)
    R_SB            reduce using rule 82 (fact -> cte .)
    TO              reduce using rule 82 (fact -> cte .)
    DO              reduce using rule 82 (fact -> cte .)


state 92

    (83) cte -> CTE_I .

    MULT            reduce using rule 83 (cte -> CTE_I .)
    DIV             reduce using rule 83 (cte -> CTE_I .)
    MOD             reduce using rule 83 (cte -> CTE_I .)
    PLUS            reduce using rule 83 (cte -> CTE_I .)
    MINUS           reduce using rule 83 (cte -> CTE_I .)
    LESSTHAN        reduce using rule 83 (cte -> CTE_I .)
    LESSTHANEQ      reduce using rule 83 (cte -> CTE_I .)
    GREATERTHAN     reduce using rule 83 (cte -> CTE_I .)
    GREATERTHANEQ   reduce using rule 83 (cte -> CTE_I .)
    EQ              reduce using rule 83 (cte -> CTE_I .)
    DIFERENT        reduce using rule 83 (cte -> CTE_I .)
    AND             reduce using rule 83 (cte -> CTE_I .)
    OR              reduce using rule 83 (cte -> CTE_I .)
    ID              reduce using rule 83 (cte -> CTE_I .)
    RETURN          reduce using rule 83 (cte -> CTE_I .)
    READ            reduce using rule 83 (cte -> CTE_I .)
    PRINT           reduce using rule 83 (cte -> CTE_I .)
    IF              reduce using rule 83 (cte -> CTE_I .)
    WHILE           reduce using rule 83 (cte -> CTE_I .)
    FOR             reduce using rule 83 (cte -> CTE_I .)
    L_P             reduce using rule 83 (cte -> CTE_I .)
    CTE_I           reduce using rule 83 (cte -> CTE_I .)
    CTE_F           reduce using rule 83 (cte -> CTE_I .)
    CTE_CHAR        reduce using rule 83 (cte -> CTE_I .)
    R_B             reduce using rule 83 (cte -> CTE_I .)
    R_P             reduce using rule 83 (cte -> CTE_I .)
    SEMICOLON       reduce using rule 83 (cte -> CTE_I .)
    COMA            reduce using rule 83 (cte -> CTE_I .)
    R_SB            reduce using rule 83 (cte -> CTE_I .)
    TO              reduce using rule 83 (cte -> CTE_I .)
    DO              reduce using rule 83 (cte -> CTE_I .)


state 93

    (84) cte -> CTE_F .

    MULT            reduce using rule 84 (cte -> CTE_F .)
    DIV             reduce using rule 84 (cte -> CTE_F .)
    MOD             reduce using rule 84 (cte -> CTE_F .)
    PLUS            reduce using rule 84 (cte -> CTE_F .)
    MINUS           reduce using rule 84 (cte -> CTE_F .)
    LESSTHAN        reduce using rule 84 (cte -> CTE_F .)
    LESSTHANEQ      reduce using rule 84 (cte -> CTE_F .)
    GREATERTHAN     reduce using rule 84 (cte -> CTE_F .)
    GREATERTHANEQ   reduce using rule 84 (cte -> CTE_F .)
    EQ              reduce using rule 84 (cte -> CTE_F .)
    DIFERENT        reduce using rule 84 (cte -> CTE_F .)
    AND             reduce using rule 84 (cte -> CTE_F .)
    OR              reduce using rule 84 (cte -> CTE_F .)
    ID              reduce using rule 84 (cte -> CTE_F .)
    RETURN          reduce using rule 84 (cte -> CTE_F .)
    READ            reduce using rule 84 (cte -> CTE_F .)
    PRINT           reduce using rule 84 (cte -> CTE_F .)
    IF              reduce using rule 84 (cte -> CTE_F .)
    WHILE           reduce using rule 84 (cte -> CTE_F .)
    FOR             reduce using rule 84 (cte -> CTE_F .)
    L_P             reduce using rule 84 (cte -> CTE_F .)
    CTE_I           reduce using rule 84 (cte -> CTE_F .)
    CTE_F           reduce using rule 84 (cte -> CTE_F .)
    CTE_CHAR        reduce using rule 84 (cte -> CTE_F .)
    R_B             reduce using rule 84 (cte -> CTE_F .)
    R_P             reduce using rule 84 (cte -> CTE_F .)
    SEMICOLON       reduce using rule 84 (cte -> CTE_F .)
    COMA            reduce using rule 84 (cte -> CTE_F .)
    R_SB            reduce using rule 84 (cte -> CTE_F .)
    TO              reduce using rule 84 (cte -> CTE_F .)
    DO              reduce using rule 84 (cte -> CTE_F .)


state 94

    (85) cte -> CTE_CHAR .

    MULT            reduce using rule 85 (cte -> CTE_CHAR .)
    DIV             reduce using rule 85 (cte -> CTE_CHAR .)
    MOD             reduce using rule 85 (cte -> CTE_CHAR .)
    PLUS            reduce using rule 85 (cte -> CTE_CHAR .)
    MINUS           reduce using rule 85 (cte -> CTE_CHAR .)
    LESSTHAN        reduce using rule 85 (cte -> CTE_CHAR .)
    LESSTHANEQ      reduce using rule 85 (cte -> CTE_CHAR .)
    GREATERTHAN     reduce using rule 85 (cte -> CTE_CHAR .)
    GREATERTHANEQ   reduce using rule 85 (cte -> CTE_CHAR .)
    EQ              reduce using rule 85 (cte -> CTE_CHAR .)
    DIFERENT        reduce using rule 85 (cte -> CTE_CHAR .)
    AND             reduce using rule 85 (cte -> CTE_CHAR .)
    OR              reduce using rule 85 (cte -> CTE_CHAR .)
    ID              reduce using rule 85 (cte -> CTE_CHAR .)
    RETURN          reduce using rule 85 (cte -> CTE_CHAR .)
    READ            reduce using rule 85 (cte -> CTE_CHAR .)
    PRINT           reduce using rule 85 (cte -> CTE_CHAR .)
    IF              reduce using rule 85 (cte -> CTE_CHAR .)
    WHILE           reduce using rule 85 (cte -> CTE_CHAR .)
    FOR             reduce using rule 85 (cte -> CTE_CHAR .)
    L_P             reduce using rule 85 (cte -> CTE_CHAR .)
    CTE_I           reduce using rule 85 (cte -> CTE_CHAR .)
    CTE_F           reduce using rule 85 (cte -> CTE_CHAR .)
    CTE_CHAR        reduce using rule 85 (cte -> CTE_CHAR .)
    R_B             reduce using rule 85 (cte -> CTE_CHAR .)
    R_P             reduce using rule 85 (cte -> CTE_CHAR .)
    SEMICOLON       reduce using rule 85 (cte -> CTE_CHAR .)
    COMA            reduce using rule 85 (cte -> CTE_CHAR .)
    R_SB            reduce using rule 85 (cte -> CTE_CHAR .)
    TO              reduce using rule 85 (cte -> CTE_CHAR .)
    DO              reduce using rule 85 (cte -> CTE_CHAR .)


state 95

    (35) params1 -> COMA params .

    R_P             reduce using rule 35 (params1 -> COMA params .)


state 96

    (28) function -> FUNC func_type ID register_func L_P params R_P var_declaration . L_B statements R_B

    L_B             shift and go to state 141


state 97

    (20) dec_id2 -> L_SB CTE_I R_SB .

    COMA            reduce using rule 20 (dec_id2 -> L_SB CTE_I R_SB .)
    SEMICOLON       reduce using rule 20 (dec_id2 -> L_SB CTE_I R_SB .)
    R_P             reduce using rule 20 (dec_id2 -> L_SB CTE_I R_SB .)


state 98

    (81) fact -> L_P expression . R_P

    R_P             shift and go to state 142


state 99

    (79) fact -> id .

    MULT            reduce using rule 79 (fact -> id .)
    DIV             reduce using rule 79 (fact -> id .)
    MOD             reduce using rule 79 (fact -> id .)
    PLUS            reduce using rule 79 (fact -> id .)
    MINUS           reduce using rule 79 (fact -> id .)
    LESSTHAN        reduce using rule 79 (fact -> id .)
    LESSTHANEQ      reduce using rule 79 (fact -> id .)
    GREATERTHAN     reduce using rule 79 (fact -> id .)
    GREATERTHANEQ   reduce using rule 79 (fact -> id .)
    EQ              reduce using rule 79 (fact -> id .)
    DIFERENT        reduce using rule 79 (fact -> id .)
    AND             reduce using rule 79 (fact -> id .)
    OR              reduce using rule 79 (fact -> id .)
    R_P             reduce using rule 79 (fact -> id .)
    SEMICOLON       reduce using rule 79 (fact -> id .)
    COMA            reduce using rule 79 (fact -> id .)
    R_SB            reduce using rule 79 (fact -> id .)
    ID              reduce using rule 79 (fact -> id .)
    RETURN          reduce using rule 79 (fact -> id .)
    READ            reduce using rule 79 (fact -> id .)
    PRINT           reduce using rule 79 (fact -> id .)
    IF              reduce using rule 79 (fact -> id .)
    WHILE           reduce using rule 79 (fact -> id .)
    FOR             reduce using rule 79 (fact -> id .)
    L_P             reduce using rule 79 (fact -> id .)
    CTE_I           reduce using rule 79 (fact -> id .)
    CTE_F           reduce using rule 79 (fact -> id .)
    CTE_CHAR        reduce using rule 79 (fact -> id .)
    R_B             reduce using rule 79 (fact -> id .)
    TO              reduce using rule 79 (fact -> id .)
    DO              reduce using rule 79 (fact -> id .)


state 100

    (22) id -> ID . id1
    (54) call_func_exp -> ID . L_P args R_P
    (23) id1 -> . L_SB expression R_SB id2
    (24) id1 -> . empty
    (107) empty -> .

  ! shift/reduce conflict for L_P resolved as shift
    L_P             shift and go to state 143
    L_SB            shift and go to state 106
    MULT            reduce using rule 107 (empty -> .)
    DIV             reduce using rule 107 (empty -> .)
    MOD             reduce using rule 107 (empty -> .)
    PLUS            reduce using rule 107 (empty -> .)
    MINUS           reduce using rule 107 (empty -> .)
    LESSTHAN        reduce using rule 107 (empty -> .)
    LESSTHANEQ      reduce using rule 107 (empty -> .)
    GREATERTHAN     reduce using rule 107 (empty -> .)
    GREATERTHANEQ   reduce using rule 107 (empty -> .)
    EQ              reduce using rule 107 (empty -> .)
    DIFERENT        reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    R_P             reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    R_SB            reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    PRINT           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    FOR             reduce using rule 107 (empty -> .)
    CTE_I           reduce using rule 107 (empty -> .)
    CTE_F           reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)
    R_B             reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

  ! L_P             [ reduce using rule 107 (empty -> .) ]

    id1                            shift and go to state 105
    empty                          shift and go to state 107

state 101

    (2) main -> MAIN L_P params R_P var_declaration L_B statements R_B .

    $end            reduce using rule 2 (main -> MAIN L_P params R_P var_declaration L_B statements R_B .)


state 102

    (37) statements -> statement statements .

    R_B             reduce using rule 37 (statements -> statement statements .)


state 103

    (47) assignation -> id EQUAL . expression SEMICOLON
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    id                             shift and go to state 99
    expression                     shift and go to state 144
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 104

    (53) call_func -> ID L_P . args R_P SEMICOLON
    (54) call_func_exp -> ID L_P . args R_P
    (48) args -> . args1
    (49) args -> . empty
    (50) args1 -> . expression args2
    (107) empty -> .
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    R_P             reduce using rule 107 (empty -> .)
    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    args                           shift and go to state 145
    args1                          shift and go to state 146
    empty                          shift and go to state 147
    expression                     shift and go to state 148
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 105

    (22) id -> ID id1 .

    EQUAL           reduce using rule 22 (id -> ID id1 .)
    MULT            reduce using rule 22 (id -> ID id1 .)
    DIV             reduce using rule 22 (id -> ID id1 .)
    MOD             reduce using rule 22 (id -> ID id1 .)
    PLUS            reduce using rule 22 (id -> ID id1 .)
    MINUS           reduce using rule 22 (id -> ID id1 .)
    LESSTHAN        reduce using rule 22 (id -> ID id1 .)
    LESSTHANEQ      reduce using rule 22 (id -> ID id1 .)
    GREATERTHAN     reduce using rule 22 (id -> ID id1 .)
    GREATERTHANEQ   reduce using rule 22 (id -> ID id1 .)
    EQ              reduce using rule 22 (id -> ID id1 .)
    DIFERENT        reduce using rule 22 (id -> ID id1 .)
    AND             reduce using rule 22 (id -> ID id1 .)
    OR              reduce using rule 22 (id -> ID id1 .)
    ID              reduce using rule 22 (id -> ID id1 .)
    RETURN          reduce using rule 22 (id -> ID id1 .)
    READ            reduce using rule 22 (id -> ID id1 .)
    PRINT           reduce using rule 22 (id -> ID id1 .)
    IF              reduce using rule 22 (id -> ID id1 .)
    WHILE           reduce using rule 22 (id -> ID id1 .)
    FOR             reduce using rule 22 (id -> ID id1 .)
    L_P             reduce using rule 22 (id -> ID id1 .)
    CTE_I           reduce using rule 22 (id -> ID id1 .)
    CTE_F           reduce using rule 22 (id -> ID id1 .)
    CTE_CHAR        reduce using rule 22 (id -> ID id1 .)
    R_B             reduce using rule 22 (id -> ID id1 .)
    R_P             reduce using rule 22 (id -> ID id1 .)
    SEMICOLON       reduce using rule 22 (id -> ID id1 .)
    COMA            reduce using rule 22 (id -> ID id1 .)
    R_SB            reduce using rule 22 (id -> ID id1 .)
    TO              reduce using rule 22 (id -> ID id1 .)
    DO              reduce using rule 22 (id -> ID id1 .)


state 106

    (23) id1 -> L_SB . expression R_SB id2
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 149
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 107

    (24) id1 -> empty .

    EQUAL           reduce using rule 24 (id1 -> empty .)
    MULT            reduce using rule 24 (id1 -> empty .)
    DIV             reduce using rule 24 (id1 -> empty .)
    MOD             reduce using rule 24 (id1 -> empty .)
    PLUS            reduce using rule 24 (id1 -> empty .)
    MINUS           reduce using rule 24 (id1 -> empty .)
    LESSTHAN        reduce using rule 24 (id1 -> empty .)
    LESSTHANEQ      reduce using rule 24 (id1 -> empty .)
    GREATERTHAN     reduce using rule 24 (id1 -> empty .)
    GREATERTHANEQ   reduce using rule 24 (id1 -> empty .)
    EQ              reduce using rule 24 (id1 -> empty .)
    DIFERENT        reduce using rule 24 (id1 -> empty .)
    AND             reduce using rule 24 (id1 -> empty .)
    OR              reduce using rule 24 (id1 -> empty .)
    ID              reduce using rule 24 (id1 -> empty .)
    RETURN          reduce using rule 24 (id1 -> empty .)
    READ            reduce using rule 24 (id1 -> empty .)
    PRINT           reduce using rule 24 (id1 -> empty .)
    IF              reduce using rule 24 (id1 -> empty .)
    WHILE           reduce using rule 24 (id1 -> empty .)
    FOR             reduce using rule 24 (id1 -> empty .)
    L_P             reduce using rule 24 (id1 -> empty .)
    CTE_I           reduce using rule 24 (id1 -> empty .)
    CTE_F           reduce using rule 24 (id1 -> empty .)
    CTE_CHAR        reduce using rule 24 (id1 -> empty .)
    R_B             reduce using rule 24 (id1 -> empty .)
    R_P             reduce using rule 24 (id1 -> empty .)
    SEMICOLON       reduce using rule 24 (id1 -> empty .)
    COMA            reduce using rule 24 (id1 -> empty .)
    R_SB            reduce using rule 24 (id1 -> empty .)
    TO              reduce using rule 24 (id1 -> empty .)
    DO              reduce using rule 24 (id1 -> empty .)


state 108

    (55) return_func -> RETURN L_P . expression R_P SEMICOLON
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 150
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 109

    (56) read -> READ L_P . read_args R_P SEMICOLON
    (57) read_args -> . expression read_args1
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    read_args                      shift and go to state 151
    expression                     shift and go to state 152
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 110

    (60) write -> PRINT L_P . write_args R_P SEMICOLON
    (61) write_args -> . write_args2 write_args1
    (64) write_args2 -> . expression
    (65) write_args2 -> . CTE_STRING
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    CTE_STRING      shift and go to state 156
    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    write_args                     shift and go to state 153
    write_args2                    shift and go to state 154
    expression                     shift and go to state 155
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 111

    (66) decision_statement -> IF L_P . expression R_P L_B statements R_B decision_statement1
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 157
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 112

    (74) expression -> texp op1 .

    ID              reduce using rule 74 (expression -> texp op1 .)
    RETURN          reduce using rule 74 (expression -> texp op1 .)
    READ            reduce using rule 74 (expression -> texp op1 .)
    PRINT           reduce using rule 74 (expression -> texp op1 .)
    IF              reduce using rule 74 (expression -> texp op1 .)
    WHILE           reduce using rule 74 (expression -> texp op1 .)
    FOR             reduce using rule 74 (expression -> texp op1 .)
    L_P             reduce using rule 74 (expression -> texp op1 .)
    CTE_I           reduce using rule 74 (expression -> texp op1 .)
    CTE_F           reduce using rule 74 (expression -> texp op1 .)
    CTE_CHAR        reduce using rule 74 (expression -> texp op1 .)
    R_B             reduce using rule 74 (expression -> texp op1 .)
    R_P             reduce using rule 74 (expression -> texp op1 .)
    SEMICOLON       reduce using rule 74 (expression -> texp op1 .)
    COMA            reduce using rule 74 (expression -> texp op1 .)
    R_SB            reduce using rule 74 (expression -> texp op1 .)
    TO              reduce using rule 74 (expression -> texp op1 .)
    DO              reduce using rule 74 (expression -> texp op1 .)


state 113

    (86) op1 -> OR . expression
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 158
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 114

    (87) op1 -> empty .

    ID              reduce using rule 87 (op1 -> empty .)
    RETURN          reduce using rule 87 (op1 -> empty .)
    READ            reduce using rule 87 (op1 -> empty .)
    PRINT           reduce using rule 87 (op1 -> empty .)
    IF              reduce using rule 87 (op1 -> empty .)
    WHILE           reduce using rule 87 (op1 -> empty .)
    FOR             reduce using rule 87 (op1 -> empty .)
    L_P             reduce using rule 87 (op1 -> empty .)
    CTE_I           reduce using rule 87 (op1 -> empty .)
    CTE_F           reduce using rule 87 (op1 -> empty .)
    CTE_CHAR        reduce using rule 87 (op1 -> empty .)
    R_B             reduce using rule 87 (op1 -> empty .)
    R_P             reduce using rule 87 (op1 -> empty .)
    SEMICOLON       reduce using rule 87 (op1 -> empty .)
    COMA            reduce using rule 87 (op1 -> empty .)
    R_SB            reduce using rule 87 (op1 -> empty .)
    TO              reduce using rule 87 (op1 -> empty .)
    DO              reduce using rule 87 (op1 -> empty .)


state 115

    (72) while_statement -> WHILE L_P . expression R_P do_statement
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 159
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 116

    (71) for_statement -> FOR id . EQUAL expression TO expression do_statement

    EQUAL           shift and go to state 160


state 117

    (22) id -> ID . id1
    (23) id1 -> . L_SB expression R_SB id2
    (24) id1 -> . empty
    (107) empty -> .

    L_SB            shift and go to state 106
    EQUAL           reduce using rule 107 (empty -> .)

    id1                            shift and go to state 105
    empty                          shift and go to state 107

state 118

    (75) texp -> gexp op2 .

    OR              reduce using rule 75 (texp -> gexp op2 .)
    ID              reduce using rule 75 (texp -> gexp op2 .)
    RETURN          reduce using rule 75 (texp -> gexp op2 .)
    READ            reduce using rule 75 (texp -> gexp op2 .)
    PRINT           reduce using rule 75 (texp -> gexp op2 .)
    IF              reduce using rule 75 (texp -> gexp op2 .)
    WHILE           reduce using rule 75 (texp -> gexp op2 .)
    FOR             reduce using rule 75 (texp -> gexp op2 .)
    L_P             reduce using rule 75 (texp -> gexp op2 .)
    CTE_I           reduce using rule 75 (texp -> gexp op2 .)
    CTE_F           reduce using rule 75 (texp -> gexp op2 .)
    CTE_CHAR        reduce using rule 75 (texp -> gexp op2 .)
    R_B             reduce using rule 75 (texp -> gexp op2 .)
    R_P             reduce using rule 75 (texp -> gexp op2 .)
    SEMICOLON       reduce using rule 75 (texp -> gexp op2 .)
    COMA            reduce using rule 75 (texp -> gexp op2 .)
    R_SB            reduce using rule 75 (texp -> gexp op2 .)
    TO              reduce using rule 75 (texp -> gexp op2 .)
    DO              reduce using rule 75 (texp -> gexp op2 .)


state 119

    (88) op2 -> AND . texp
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    texp                           shift and go to state 161
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 120

    (89) op2 -> empty .

    OR              reduce using rule 89 (op2 -> empty .)
    ID              reduce using rule 89 (op2 -> empty .)
    RETURN          reduce using rule 89 (op2 -> empty .)
    READ            reduce using rule 89 (op2 -> empty .)
    PRINT           reduce using rule 89 (op2 -> empty .)
    IF              reduce using rule 89 (op2 -> empty .)
    WHILE           reduce using rule 89 (op2 -> empty .)
    FOR             reduce using rule 89 (op2 -> empty .)
    L_P             reduce using rule 89 (op2 -> empty .)
    CTE_I           reduce using rule 89 (op2 -> empty .)
    CTE_F           reduce using rule 89 (op2 -> empty .)
    CTE_CHAR        reduce using rule 89 (op2 -> empty .)
    R_B             reduce using rule 89 (op2 -> empty .)
    R_P             reduce using rule 89 (op2 -> empty .)
    SEMICOLON       reduce using rule 89 (op2 -> empty .)
    COMA            reduce using rule 89 (op2 -> empty .)
    R_SB            reduce using rule 89 (op2 -> empty .)
    TO              reduce using rule 89 (op2 -> empty .)
    DO              reduce using rule 89 (op2 -> empty .)


state 121

    (76) gexp -> mexp op3aux .

    AND             reduce using rule 76 (gexp -> mexp op3aux .)
    OR              reduce using rule 76 (gexp -> mexp op3aux .)
    ID              reduce using rule 76 (gexp -> mexp op3aux .)
    RETURN          reduce using rule 76 (gexp -> mexp op3aux .)
    READ            reduce using rule 76 (gexp -> mexp op3aux .)
    PRINT           reduce using rule 76 (gexp -> mexp op3aux .)
    IF              reduce using rule 76 (gexp -> mexp op3aux .)
    WHILE           reduce using rule 76 (gexp -> mexp op3aux .)
    FOR             reduce using rule 76 (gexp -> mexp op3aux .)
    L_P             reduce using rule 76 (gexp -> mexp op3aux .)
    CTE_I           reduce using rule 76 (gexp -> mexp op3aux .)
    CTE_F           reduce using rule 76 (gexp -> mexp op3aux .)
    CTE_CHAR        reduce using rule 76 (gexp -> mexp op3aux .)
    R_B             reduce using rule 76 (gexp -> mexp op3aux .)
    R_P             reduce using rule 76 (gexp -> mexp op3aux .)
    SEMICOLON       reduce using rule 76 (gexp -> mexp op3aux .)
    COMA            reduce using rule 76 (gexp -> mexp op3aux .)
    R_SB            reduce using rule 76 (gexp -> mexp op3aux .)
    TO              reduce using rule 76 (gexp -> mexp op3aux .)
    DO              reduce using rule 76 (gexp -> mexp op3aux .)


state 122

    (96) op3aux -> op3 . mexp
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    mexp                           shift and go to state 162
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 123

    (97) op3aux -> empty .

    AND             reduce using rule 97 (op3aux -> empty .)
    OR              reduce using rule 97 (op3aux -> empty .)
    ID              reduce using rule 97 (op3aux -> empty .)
    RETURN          reduce using rule 97 (op3aux -> empty .)
    READ            reduce using rule 97 (op3aux -> empty .)
    PRINT           reduce using rule 97 (op3aux -> empty .)
    IF              reduce using rule 97 (op3aux -> empty .)
    WHILE           reduce using rule 97 (op3aux -> empty .)
    FOR             reduce using rule 97 (op3aux -> empty .)
    L_P             reduce using rule 97 (op3aux -> empty .)
    CTE_I           reduce using rule 97 (op3aux -> empty .)
    CTE_F           reduce using rule 97 (op3aux -> empty .)
    CTE_CHAR        reduce using rule 97 (op3aux -> empty .)
    R_B             reduce using rule 97 (op3aux -> empty .)
    R_P             reduce using rule 97 (op3aux -> empty .)
    SEMICOLON       reduce using rule 97 (op3aux -> empty .)
    COMA            reduce using rule 97 (op3aux -> empty .)
    R_SB            reduce using rule 97 (op3aux -> empty .)
    TO              reduce using rule 97 (op3aux -> empty .)
    DO              reduce using rule 97 (op3aux -> empty .)


state 124

    (90) op3 -> LESSTHAN .

    L_P             reduce using rule 90 (op3 -> LESSTHAN .)
    ID              reduce using rule 90 (op3 -> LESSTHAN .)
    CTE_I           reduce using rule 90 (op3 -> LESSTHAN .)
    CTE_F           reduce using rule 90 (op3 -> LESSTHAN .)
    CTE_CHAR        reduce using rule 90 (op3 -> LESSTHAN .)


state 125

    (91) op3 -> LESSTHANEQ .

    L_P             reduce using rule 91 (op3 -> LESSTHANEQ .)
    ID              reduce using rule 91 (op3 -> LESSTHANEQ .)
    CTE_I           reduce using rule 91 (op3 -> LESSTHANEQ .)
    CTE_F           reduce using rule 91 (op3 -> LESSTHANEQ .)
    CTE_CHAR        reduce using rule 91 (op3 -> LESSTHANEQ .)


state 126

    (92) op3 -> GREATERTHAN .

    L_P             reduce using rule 92 (op3 -> GREATERTHAN .)
    ID              reduce using rule 92 (op3 -> GREATERTHAN .)
    CTE_I           reduce using rule 92 (op3 -> GREATERTHAN .)
    CTE_F           reduce using rule 92 (op3 -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 92 (op3 -> GREATERTHAN .)


state 127

    (93) op3 -> GREATERTHANEQ .

    L_P             reduce using rule 93 (op3 -> GREATERTHANEQ .)
    ID              reduce using rule 93 (op3 -> GREATERTHANEQ .)
    CTE_I           reduce using rule 93 (op3 -> GREATERTHANEQ .)
    CTE_F           reduce using rule 93 (op3 -> GREATERTHANEQ .)
    CTE_CHAR        reduce using rule 93 (op3 -> GREATERTHANEQ .)


state 128

    (94) op3 -> EQ .

    L_P             reduce using rule 94 (op3 -> EQ .)
    ID              reduce using rule 94 (op3 -> EQ .)
    CTE_I           reduce using rule 94 (op3 -> EQ .)
    CTE_F           reduce using rule 94 (op3 -> EQ .)
    CTE_CHAR        reduce using rule 94 (op3 -> EQ .)


state 129

    (95) op3 -> DIFERENT .

    L_P             reduce using rule 95 (op3 -> DIFERENT .)
    ID              reduce using rule 95 (op3 -> DIFERENT .)
    CTE_I           reduce using rule 95 (op3 -> DIFERENT .)
    CTE_F           reduce using rule 95 (op3 -> DIFERENT .)
    CTE_CHAR        reduce using rule 95 (op3 -> DIFERENT .)


state 130

    (77) mexp -> term op4aux .

    LESSTHAN        reduce using rule 77 (mexp -> term op4aux .)
    LESSTHANEQ      reduce using rule 77 (mexp -> term op4aux .)
    GREATERTHAN     reduce using rule 77 (mexp -> term op4aux .)
    GREATERTHANEQ   reduce using rule 77 (mexp -> term op4aux .)
    EQ              reduce using rule 77 (mexp -> term op4aux .)
    DIFERENT        reduce using rule 77 (mexp -> term op4aux .)
    AND             reduce using rule 77 (mexp -> term op4aux .)
    OR              reduce using rule 77 (mexp -> term op4aux .)
    ID              reduce using rule 77 (mexp -> term op4aux .)
    RETURN          reduce using rule 77 (mexp -> term op4aux .)
    READ            reduce using rule 77 (mexp -> term op4aux .)
    PRINT           reduce using rule 77 (mexp -> term op4aux .)
    IF              reduce using rule 77 (mexp -> term op4aux .)
    WHILE           reduce using rule 77 (mexp -> term op4aux .)
    FOR             reduce using rule 77 (mexp -> term op4aux .)
    L_P             reduce using rule 77 (mexp -> term op4aux .)
    CTE_I           reduce using rule 77 (mexp -> term op4aux .)
    CTE_F           reduce using rule 77 (mexp -> term op4aux .)
    CTE_CHAR        reduce using rule 77 (mexp -> term op4aux .)
    R_B             reduce using rule 77 (mexp -> term op4aux .)
    R_P             reduce using rule 77 (mexp -> term op4aux .)
    SEMICOLON       reduce using rule 77 (mexp -> term op4aux .)
    COMA            reduce using rule 77 (mexp -> term op4aux .)
    R_SB            reduce using rule 77 (mexp -> term op4aux .)
    TO              reduce using rule 77 (mexp -> term op4aux .)
    DO              reduce using rule 77 (mexp -> term op4aux .)


state 131

    (100) op4aux -> op4 . mexp
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    mexp                           shift and go to state 163
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 132

    (101) op4aux -> empty .

    LESSTHAN        reduce using rule 101 (op4aux -> empty .)
    LESSTHANEQ      reduce using rule 101 (op4aux -> empty .)
    GREATERTHAN     reduce using rule 101 (op4aux -> empty .)
    GREATERTHANEQ   reduce using rule 101 (op4aux -> empty .)
    EQ              reduce using rule 101 (op4aux -> empty .)
    DIFERENT        reduce using rule 101 (op4aux -> empty .)
    AND             reduce using rule 101 (op4aux -> empty .)
    OR              reduce using rule 101 (op4aux -> empty .)
    ID              reduce using rule 101 (op4aux -> empty .)
    RETURN          reduce using rule 101 (op4aux -> empty .)
    READ            reduce using rule 101 (op4aux -> empty .)
    PRINT           reduce using rule 101 (op4aux -> empty .)
    IF              reduce using rule 101 (op4aux -> empty .)
    WHILE           reduce using rule 101 (op4aux -> empty .)
    FOR             reduce using rule 101 (op4aux -> empty .)
    L_P             reduce using rule 101 (op4aux -> empty .)
    CTE_I           reduce using rule 101 (op4aux -> empty .)
    CTE_F           reduce using rule 101 (op4aux -> empty .)
    CTE_CHAR        reduce using rule 101 (op4aux -> empty .)
    R_B             reduce using rule 101 (op4aux -> empty .)
    R_P             reduce using rule 101 (op4aux -> empty .)
    SEMICOLON       reduce using rule 101 (op4aux -> empty .)
    COMA            reduce using rule 101 (op4aux -> empty .)
    R_SB            reduce using rule 101 (op4aux -> empty .)
    TO              reduce using rule 101 (op4aux -> empty .)
    DO              reduce using rule 101 (op4aux -> empty .)


state 133

    (98) op4 -> PLUS .

    L_P             reduce using rule 98 (op4 -> PLUS .)
    ID              reduce using rule 98 (op4 -> PLUS .)
    CTE_I           reduce using rule 98 (op4 -> PLUS .)
    CTE_F           reduce using rule 98 (op4 -> PLUS .)
    CTE_CHAR        reduce using rule 98 (op4 -> PLUS .)


state 134

    (99) op4 -> MINUS .

    L_P             reduce using rule 99 (op4 -> MINUS .)
    ID              reduce using rule 99 (op4 -> MINUS .)
    CTE_I           reduce using rule 99 (op4 -> MINUS .)
    CTE_F           reduce using rule 99 (op4 -> MINUS .)
    CTE_CHAR        reduce using rule 99 (op4 -> MINUS .)


state 135

    (78) term -> fact op5aux .

    PLUS            reduce using rule 78 (term -> fact op5aux .)
    MINUS           reduce using rule 78 (term -> fact op5aux .)
    LESSTHAN        reduce using rule 78 (term -> fact op5aux .)
    LESSTHANEQ      reduce using rule 78 (term -> fact op5aux .)
    GREATERTHAN     reduce using rule 78 (term -> fact op5aux .)
    GREATERTHANEQ   reduce using rule 78 (term -> fact op5aux .)
    EQ              reduce using rule 78 (term -> fact op5aux .)
    DIFERENT        reduce using rule 78 (term -> fact op5aux .)
    AND             reduce using rule 78 (term -> fact op5aux .)
    OR              reduce using rule 78 (term -> fact op5aux .)
    ID              reduce using rule 78 (term -> fact op5aux .)
    RETURN          reduce using rule 78 (term -> fact op5aux .)
    READ            reduce using rule 78 (term -> fact op5aux .)
    PRINT           reduce using rule 78 (term -> fact op5aux .)
    IF              reduce using rule 78 (term -> fact op5aux .)
    WHILE           reduce using rule 78 (term -> fact op5aux .)
    FOR             reduce using rule 78 (term -> fact op5aux .)
    L_P             reduce using rule 78 (term -> fact op5aux .)
    CTE_I           reduce using rule 78 (term -> fact op5aux .)
    CTE_F           reduce using rule 78 (term -> fact op5aux .)
    CTE_CHAR        reduce using rule 78 (term -> fact op5aux .)
    R_B             reduce using rule 78 (term -> fact op5aux .)
    R_P             reduce using rule 78 (term -> fact op5aux .)
    SEMICOLON       reduce using rule 78 (term -> fact op5aux .)
    COMA            reduce using rule 78 (term -> fact op5aux .)
    R_SB            reduce using rule 78 (term -> fact op5aux .)
    TO              reduce using rule 78 (term -> fact op5aux .)
    DO              reduce using rule 78 (term -> fact op5aux .)


state 136

    (105) op5aux -> op5 . term
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    term                           shift and go to state 164
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 137

    (106) op5aux -> empty .

    PLUS            reduce using rule 106 (op5aux -> empty .)
    MINUS           reduce using rule 106 (op5aux -> empty .)
    LESSTHAN        reduce using rule 106 (op5aux -> empty .)
    LESSTHANEQ      reduce using rule 106 (op5aux -> empty .)
    GREATERTHAN     reduce using rule 106 (op5aux -> empty .)
    GREATERTHANEQ   reduce using rule 106 (op5aux -> empty .)
    EQ              reduce using rule 106 (op5aux -> empty .)
    DIFERENT        reduce using rule 106 (op5aux -> empty .)
    AND             reduce using rule 106 (op5aux -> empty .)
    OR              reduce using rule 106 (op5aux -> empty .)
    ID              reduce using rule 106 (op5aux -> empty .)
    RETURN          reduce using rule 106 (op5aux -> empty .)
    READ            reduce using rule 106 (op5aux -> empty .)
    PRINT           reduce using rule 106 (op5aux -> empty .)
    IF              reduce using rule 106 (op5aux -> empty .)
    WHILE           reduce using rule 106 (op5aux -> empty .)
    FOR             reduce using rule 106 (op5aux -> empty .)
    L_P             reduce using rule 106 (op5aux -> empty .)
    CTE_I           reduce using rule 106 (op5aux -> empty .)
    CTE_F           reduce using rule 106 (op5aux -> empty .)
    CTE_CHAR        reduce using rule 106 (op5aux -> empty .)
    R_B             reduce using rule 106 (op5aux -> empty .)
    R_P             reduce using rule 106 (op5aux -> empty .)
    SEMICOLON       reduce using rule 106 (op5aux -> empty .)
    COMA            reduce using rule 106 (op5aux -> empty .)
    R_SB            reduce using rule 106 (op5aux -> empty .)
    TO              reduce using rule 106 (op5aux -> empty .)
    DO              reduce using rule 106 (op5aux -> empty .)


state 138

    (102) op5 -> MULT .

    L_P             reduce using rule 102 (op5 -> MULT .)
    ID              reduce using rule 102 (op5 -> MULT .)
    CTE_I           reduce using rule 102 (op5 -> MULT .)
    CTE_F           reduce using rule 102 (op5 -> MULT .)
    CTE_CHAR        reduce using rule 102 (op5 -> MULT .)


state 139

    (103) op5 -> DIV .

    L_P             reduce using rule 103 (op5 -> DIV .)
    ID              reduce using rule 103 (op5 -> DIV .)
    CTE_I           reduce using rule 103 (op5 -> DIV .)
    CTE_F           reduce using rule 103 (op5 -> DIV .)
    CTE_CHAR        reduce using rule 103 (op5 -> DIV .)


state 140

    (104) op5 -> MOD .

    L_P             reduce using rule 104 (op5 -> MOD .)
    ID              reduce using rule 104 (op5 -> MOD .)
    CTE_I           reduce using rule 104 (op5 -> MOD .)
    CTE_F           reduce using rule 104 (op5 -> MOD .)
    CTE_CHAR        reduce using rule 104 (op5 -> MOD .)


state 141

    (28) function -> FUNC func_type ID register_func L_P params R_P var_declaration L_B . statements R_B
    (37) statements -> . statement statements
    (38) statements -> . empty
    (39) statement -> . assignation
    (40) statement -> . call_func
    (41) statement -> . return_func
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . decision_statement
    (45) statement -> . repetition_statement
    (46) statement -> . expression
    (107) empty -> .
    (47) assignation -> . id EQUAL expression SEMICOLON
    (53) call_func -> . ID L_P args R_P SEMICOLON
    (55) return_func -> . RETURN L_P expression R_P SEMICOLON
    (56) read -> . READ L_P read_args R_P SEMICOLON
    (60) write -> . PRINT L_P write_args R_P SEMICOLON
    (66) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (69) repetition_statement -> . while_statement
    (70) repetition_statement -> . for_statement
    (74) expression -> . texp op1
    (22) id -> . ID id1
    (72) while_statement -> . WHILE L_P expression R_P do_statement
    (71) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    R_B             reduce using rule 107 (empty -> .)
    ID              shift and go to state 76
    RETURN          shift and go to state 77
    READ            shift and go to state 78
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 84
    FOR             shift and go to state 85
    L_P             shift and go to state 63
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    statements                     shift and go to state 165
    statement                      shift and go to state 65
    empty                          shift and go to state 66
    assignation                    shift and go to state 67
    call_func                      shift and go to state 68
    return_func                    shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    decision_statement             shift and go to state 72
    repetition_statement           shift and go to state 73
    expression                     shift and go to state 74
    id                             shift and go to state 75
    while_statement                shift and go to state 81
    for_statement                  shift and go to state 82
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 142

    (81) fact -> L_P expression R_P .

    MULT            reduce using rule 81 (fact -> L_P expression R_P .)
    DIV             reduce using rule 81 (fact -> L_P expression R_P .)
    MOD             reduce using rule 81 (fact -> L_P expression R_P .)
    PLUS            reduce using rule 81 (fact -> L_P expression R_P .)
    MINUS           reduce using rule 81 (fact -> L_P expression R_P .)
    LESSTHAN        reduce using rule 81 (fact -> L_P expression R_P .)
    LESSTHANEQ      reduce using rule 81 (fact -> L_P expression R_P .)
    GREATERTHAN     reduce using rule 81 (fact -> L_P expression R_P .)
    GREATERTHANEQ   reduce using rule 81 (fact -> L_P expression R_P .)
    EQ              reduce using rule 81 (fact -> L_P expression R_P .)
    DIFERENT        reduce using rule 81 (fact -> L_P expression R_P .)
    AND             reduce using rule 81 (fact -> L_P expression R_P .)
    OR              reduce using rule 81 (fact -> L_P expression R_P .)
    ID              reduce using rule 81 (fact -> L_P expression R_P .)
    RETURN          reduce using rule 81 (fact -> L_P expression R_P .)
    READ            reduce using rule 81 (fact -> L_P expression R_P .)
    PRINT           reduce using rule 81 (fact -> L_P expression R_P .)
    IF              reduce using rule 81 (fact -> L_P expression R_P .)
    WHILE           reduce using rule 81 (fact -> L_P expression R_P .)
    FOR             reduce using rule 81 (fact -> L_P expression R_P .)
    L_P             reduce using rule 81 (fact -> L_P expression R_P .)
    CTE_I           reduce using rule 81 (fact -> L_P expression R_P .)
    CTE_F           reduce using rule 81 (fact -> L_P expression R_P .)
    CTE_CHAR        reduce using rule 81 (fact -> L_P expression R_P .)
    R_B             reduce using rule 81 (fact -> L_P expression R_P .)
    R_P             reduce using rule 81 (fact -> L_P expression R_P .)
    SEMICOLON       reduce using rule 81 (fact -> L_P expression R_P .)
    COMA            reduce using rule 81 (fact -> L_P expression R_P .)
    R_SB            reduce using rule 81 (fact -> L_P expression R_P .)
    TO              reduce using rule 81 (fact -> L_P expression R_P .)
    DO              reduce using rule 81 (fact -> L_P expression R_P .)


state 143

    (54) call_func_exp -> ID L_P . args R_P
    (48) args -> . args1
    (49) args -> . empty
    (50) args1 -> . expression args2
    (107) empty -> .
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    R_P             reduce using rule 107 (empty -> .)
    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    args                           shift and go to state 166
    args1                          shift and go to state 146
    empty                          shift and go to state 147
    expression                     shift and go to state 148
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 144

    (47) assignation -> id EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 167


state 145

    (53) call_func -> ID L_P args . R_P SEMICOLON
    (54) call_func_exp -> ID L_P args . R_P

    R_P             shift and go to state 168


state 146

    (48) args -> args1 .

    R_P             reduce using rule 48 (args -> args1 .)


state 147

    (49) args -> empty .

    R_P             reduce using rule 49 (args -> empty .)


state 148

    (50) args1 -> expression . args2
    (51) args2 -> . COMA args1
    (52) args2 -> . empty
    (107) empty -> .

    COMA            shift and go to state 170
    R_P             reduce using rule 107 (empty -> .)

    args2                          shift and go to state 169
    empty                          shift and go to state 171

state 149

    (23) id1 -> L_SB expression . R_SB id2

    R_SB            shift and go to state 172


state 150

    (55) return_func -> RETURN L_P expression . R_P SEMICOLON

    R_P             shift and go to state 173


state 151

    (56) read -> READ L_P read_args . R_P SEMICOLON

    R_P             shift and go to state 174


state 152

    (57) read_args -> expression . read_args1
    (58) read_args1 -> . COMA expression read_args1
    (59) read_args1 -> . empty
    (107) empty -> .

    COMA            shift and go to state 176
    R_P             reduce using rule 107 (empty -> .)

    read_args1                     shift and go to state 175
    empty                          shift and go to state 177

state 153

    (60) write -> PRINT L_P write_args . R_P SEMICOLON

    R_P             shift and go to state 178


state 154

    (61) write_args -> write_args2 . write_args1
    (62) write_args1 -> . COMA write_args2 write_args1
    (63) write_args1 -> . empty
    (107) empty -> .

    COMA            shift and go to state 180
    R_P             reduce using rule 107 (empty -> .)

    write_args1                    shift and go to state 179
    empty                          shift and go to state 181

state 155

    (64) write_args2 -> expression .

    COMA            reduce using rule 64 (write_args2 -> expression .)
    R_P             reduce using rule 64 (write_args2 -> expression .)


state 156

    (65) write_args2 -> CTE_STRING .

    COMA            reduce using rule 65 (write_args2 -> CTE_STRING .)
    R_P             reduce using rule 65 (write_args2 -> CTE_STRING .)


state 157

    (66) decision_statement -> IF L_P expression . R_P L_B statements R_B decision_statement1

    R_P             shift and go to state 182


state 158

    (86) op1 -> OR expression .

    ID              reduce using rule 86 (op1 -> OR expression .)
    RETURN          reduce using rule 86 (op1 -> OR expression .)
    READ            reduce using rule 86 (op1 -> OR expression .)
    PRINT           reduce using rule 86 (op1 -> OR expression .)
    IF              reduce using rule 86 (op1 -> OR expression .)
    WHILE           reduce using rule 86 (op1 -> OR expression .)
    FOR             reduce using rule 86 (op1 -> OR expression .)
    L_P             reduce using rule 86 (op1 -> OR expression .)
    CTE_I           reduce using rule 86 (op1 -> OR expression .)
    CTE_F           reduce using rule 86 (op1 -> OR expression .)
    CTE_CHAR        reduce using rule 86 (op1 -> OR expression .)
    R_B             reduce using rule 86 (op1 -> OR expression .)
    R_P             reduce using rule 86 (op1 -> OR expression .)
    SEMICOLON       reduce using rule 86 (op1 -> OR expression .)
    COMA            reduce using rule 86 (op1 -> OR expression .)
    R_SB            reduce using rule 86 (op1 -> OR expression .)
    TO              reduce using rule 86 (op1 -> OR expression .)
    DO              reduce using rule 86 (op1 -> OR expression .)


state 159

    (72) while_statement -> WHILE L_P expression . R_P do_statement

    R_P             shift and go to state 183


state 160

    (71) for_statement -> FOR id EQUAL . expression TO expression do_statement
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    id                             shift and go to state 99
    expression                     shift and go to state 184
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 161

    (88) op2 -> AND texp .

    OR              reduce using rule 88 (op2 -> AND texp .)
    ID              reduce using rule 88 (op2 -> AND texp .)
    RETURN          reduce using rule 88 (op2 -> AND texp .)
    READ            reduce using rule 88 (op2 -> AND texp .)
    PRINT           reduce using rule 88 (op2 -> AND texp .)
    IF              reduce using rule 88 (op2 -> AND texp .)
    WHILE           reduce using rule 88 (op2 -> AND texp .)
    FOR             reduce using rule 88 (op2 -> AND texp .)
    L_P             reduce using rule 88 (op2 -> AND texp .)
    CTE_I           reduce using rule 88 (op2 -> AND texp .)
    CTE_F           reduce using rule 88 (op2 -> AND texp .)
    CTE_CHAR        reduce using rule 88 (op2 -> AND texp .)
    R_B             reduce using rule 88 (op2 -> AND texp .)
    R_P             reduce using rule 88 (op2 -> AND texp .)
    SEMICOLON       reduce using rule 88 (op2 -> AND texp .)
    COMA            reduce using rule 88 (op2 -> AND texp .)
    R_SB            reduce using rule 88 (op2 -> AND texp .)
    TO              reduce using rule 88 (op2 -> AND texp .)
    DO              reduce using rule 88 (op2 -> AND texp .)


state 162

    (96) op3aux -> op3 mexp .

    AND             reduce using rule 96 (op3aux -> op3 mexp .)
    OR              reduce using rule 96 (op3aux -> op3 mexp .)
    ID              reduce using rule 96 (op3aux -> op3 mexp .)
    RETURN          reduce using rule 96 (op3aux -> op3 mexp .)
    READ            reduce using rule 96 (op3aux -> op3 mexp .)
    PRINT           reduce using rule 96 (op3aux -> op3 mexp .)
    IF              reduce using rule 96 (op3aux -> op3 mexp .)
    WHILE           reduce using rule 96 (op3aux -> op3 mexp .)
    FOR             reduce using rule 96 (op3aux -> op3 mexp .)
    L_P             reduce using rule 96 (op3aux -> op3 mexp .)
    CTE_I           reduce using rule 96 (op3aux -> op3 mexp .)
    CTE_F           reduce using rule 96 (op3aux -> op3 mexp .)
    CTE_CHAR        reduce using rule 96 (op3aux -> op3 mexp .)
    R_B             reduce using rule 96 (op3aux -> op3 mexp .)
    R_P             reduce using rule 96 (op3aux -> op3 mexp .)
    SEMICOLON       reduce using rule 96 (op3aux -> op3 mexp .)
    COMA            reduce using rule 96 (op3aux -> op3 mexp .)
    R_SB            reduce using rule 96 (op3aux -> op3 mexp .)
    TO              reduce using rule 96 (op3aux -> op3 mexp .)
    DO              reduce using rule 96 (op3aux -> op3 mexp .)


state 163

    (100) op4aux -> op4 mexp .

    LESSTHAN        reduce using rule 100 (op4aux -> op4 mexp .)
    LESSTHANEQ      reduce using rule 100 (op4aux -> op4 mexp .)
    GREATERTHAN     reduce using rule 100 (op4aux -> op4 mexp .)
    GREATERTHANEQ   reduce using rule 100 (op4aux -> op4 mexp .)
    EQ              reduce using rule 100 (op4aux -> op4 mexp .)
    DIFERENT        reduce using rule 100 (op4aux -> op4 mexp .)
    AND             reduce using rule 100 (op4aux -> op4 mexp .)
    OR              reduce using rule 100 (op4aux -> op4 mexp .)
    ID              reduce using rule 100 (op4aux -> op4 mexp .)
    RETURN          reduce using rule 100 (op4aux -> op4 mexp .)
    READ            reduce using rule 100 (op4aux -> op4 mexp .)
    PRINT           reduce using rule 100 (op4aux -> op4 mexp .)
    IF              reduce using rule 100 (op4aux -> op4 mexp .)
    WHILE           reduce using rule 100 (op4aux -> op4 mexp .)
    FOR             reduce using rule 100 (op4aux -> op4 mexp .)
    L_P             reduce using rule 100 (op4aux -> op4 mexp .)
    CTE_I           reduce using rule 100 (op4aux -> op4 mexp .)
    CTE_F           reduce using rule 100 (op4aux -> op4 mexp .)
    CTE_CHAR        reduce using rule 100 (op4aux -> op4 mexp .)
    R_B             reduce using rule 100 (op4aux -> op4 mexp .)
    R_P             reduce using rule 100 (op4aux -> op4 mexp .)
    SEMICOLON       reduce using rule 100 (op4aux -> op4 mexp .)
    COMA            reduce using rule 100 (op4aux -> op4 mexp .)
    R_SB            reduce using rule 100 (op4aux -> op4 mexp .)
    TO              reduce using rule 100 (op4aux -> op4 mexp .)
    DO              reduce using rule 100 (op4aux -> op4 mexp .)


state 164

    (105) op5aux -> op5 term .

    PLUS            reduce using rule 105 (op5aux -> op5 term .)
    MINUS           reduce using rule 105 (op5aux -> op5 term .)
    LESSTHAN        reduce using rule 105 (op5aux -> op5 term .)
    LESSTHANEQ      reduce using rule 105 (op5aux -> op5 term .)
    GREATERTHAN     reduce using rule 105 (op5aux -> op5 term .)
    GREATERTHANEQ   reduce using rule 105 (op5aux -> op5 term .)
    EQ              reduce using rule 105 (op5aux -> op5 term .)
    DIFERENT        reduce using rule 105 (op5aux -> op5 term .)
    AND             reduce using rule 105 (op5aux -> op5 term .)
    OR              reduce using rule 105 (op5aux -> op5 term .)
    ID              reduce using rule 105 (op5aux -> op5 term .)
    RETURN          reduce using rule 105 (op5aux -> op5 term .)
    READ            reduce using rule 105 (op5aux -> op5 term .)
    PRINT           reduce using rule 105 (op5aux -> op5 term .)
    IF              reduce using rule 105 (op5aux -> op5 term .)
    WHILE           reduce using rule 105 (op5aux -> op5 term .)
    FOR             reduce using rule 105 (op5aux -> op5 term .)
    L_P             reduce using rule 105 (op5aux -> op5 term .)
    CTE_I           reduce using rule 105 (op5aux -> op5 term .)
    CTE_F           reduce using rule 105 (op5aux -> op5 term .)
    CTE_CHAR        reduce using rule 105 (op5aux -> op5 term .)
    R_B             reduce using rule 105 (op5aux -> op5 term .)
    R_P             reduce using rule 105 (op5aux -> op5 term .)
    SEMICOLON       reduce using rule 105 (op5aux -> op5 term .)
    COMA            reduce using rule 105 (op5aux -> op5 term .)
    R_SB            reduce using rule 105 (op5aux -> op5 term .)
    TO              reduce using rule 105 (op5aux -> op5 term .)
    DO              reduce using rule 105 (op5aux -> op5 term .)


state 165

    (28) function -> FUNC func_type ID register_func L_P params R_P var_declaration L_B statements . R_B

    R_B             shift and go to state 185


state 166

    (54) call_func_exp -> ID L_P args . R_P

    R_P             shift and go to state 186


state 167

    (47) assignation -> id EQUAL expression SEMICOLON .

    ID              reduce using rule 47 (assignation -> id EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 47 (assignation -> id EQUAL expression SEMICOLON .)
    READ            reduce using rule 47 (assignation -> id EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 47 (assignation -> id EQUAL expression SEMICOLON .)
    IF              reduce using rule 47 (assignation -> id EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 47 (assignation -> id EQUAL expression SEMICOLON .)
    FOR             reduce using rule 47 (assignation -> id EQUAL expression SEMICOLON .)
    L_P             reduce using rule 47 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_I           reduce using rule 47 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_F           reduce using rule 47 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_CHAR        reduce using rule 47 (assignation -> id EQUAL expression SEMICOLON .)
    R_B             reduce using rule 47 (assignation -> id EQUAL expression SEMICOLON .)


state 168

    (53) call_func -> ID L_P args R_P . SEMICOLON
    (54) call_func_exp -> ID L_P args R_P .

    SEMICOLON       shift and go to state 187
    MULT            reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    DIV             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    MOD             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    PLUS            reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    MINUS           reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    LESSTHAN        reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    LESSTHANEQ      reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    GREATERTHAN     reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    GREATERTHANEQ   reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    EQ              reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    DIFERENT        reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    AND             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    OR              reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    ID              reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    RETURN          reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    READ            reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    PRINT           reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    IF              reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    WHILE           reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    FOR             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    L_P             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    CTE_I           reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    CTE_F           reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    CTE_CHAR        reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    R_B             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)


state 169

    (50) args1 -> expression args2 .

    R_P             reduce using rule 50 (args1 -> expression args2 .)


state 170

    (51) args2 -> COMA . args1
    (50) args1 -> . expression args2
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    args1                          shift and go to state 188
    expression                     shift and go to state 148
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 171

    (52) args2 -> empty .

    R_P             reduce using rule 52 (args2 -> empty .)


state 172

    (23) id1 -> L_SB expression R_SB . id2
    (25) id2 -> . L_SB expression R_SB
    (26) id2 -> . empty
    (107) empty -> .

    L_SB            shift and go to state 189
    EQUAL           reduce using rule 107 (empty -> .)
    MULT            reduce using rule 107 (empty -> .)
    DIV             reduce using rule 107 (empty -> .)
    MOD             reduce using rule 107 (empty -> .)
    PLUS            reduce using rule 107 (empty -> .)
    MINUS           reduce using rule 107 (empty -> .)
    LESSTHAN        reduce using rule 107 (empty -> .)
    LESSTHANEQ      reduce using rule 107 (empty -> .)
    GREATERTHAN     reduce using rule 107 (empty -> .)
    GREATERTHANEQ   reduce using rule 107 (empty -> .)
    EQ              reduce using rule 107 (empty -> .)
    DIFERENT        reduce using rule 107 (empty -> .)
    AND             reduce using rule 107 (empty -> .)
    OR              reduce using rule 107 (empty -> .)
    ID              reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    PRINT           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    FOR             reduce using rule 107 (empty -> .)
    L_P             reduce using rule 107 (empty -> .)
    CTE_I           reduce using rule 107 (empty -> .)
    CTE_F           reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)
    R_B             reduce using rule 107 (empty -> .)
    R_P             reduce using rule 107 (empty -> .)
    SEMICOLON       reduce using rule 107 (empty -> .)
    COMA            reduce using rule 107 (empty -> .)
    R_SB            reduce using rule 107 (empty -> .)
    TO              reduce using rule 107 (empty -> .)
    DO              reduce using rule 107 (empty -> .)

    id2                            shift and go to state 190
    empty                          shift and go to state 191

state 173

    (55) return_func -> RETURN L_P expression R_P . SEMICOLON

    SEMICOLON       shift and go to state 192


state 174

    (56) read -> READ L_P read_args R_P . SEMICOLON

    SEMICOLON       shift and go to state 193


state 175

    (57) read_args -> expression read_args1 .

    R_P             reduce using rule 57 (read_args -> expression read_args1 .)


state 176

    (58) read_args1 -> COMA . expression read_args1
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 194
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 177

    (59) read_args1 -> empty .

    R_P             reduce using rule 59 (read_args1 -> empty .)


state 178

    (60) write -> PRINT L_P write_args R_P . SEMICOLON

    SEMICOLON       shift and go to state 195


state 179

    (61) write_args -> write_args2 write_args1 .

    R_P             reduce using rule 61 (write_args -> write_args2 write_args1 .)


state 180

    (62) write_args1 -> COMA . write_args2 write_args1
    (64) write_args2 -> . expression
    (65) write_args2 -> . CTE_STRING
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    CTE_STRING      shift and go to state 156
    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    write_args2                    shift and go to state 196
    expression                     shift and go to state 155
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 181

    (63) write_args1 -> empty .

    R_P             reduce using rule 63 (write_args1 -> empty .)


state 182

    (66) decision_statement -> IF L_P expression R_P . L_B statements R_B decision_statement1

    L_B             shift and go to state 197


state 183

    (72) while_statement -> WHILE L_P expression R_P . do_statement
    (73) do_statement -> . DO L_B statements R_B

    DO              shift and go to state 199

    do_statement                   shift and go to state 198

state 184

    (71) for_statement -> FOR id EQUAL expression . TO expression do_statement

    TO              shift and go to state 200


state 185

    (28) function -> FUNC func_type ID register_func L_P params R_P var_declaration L_B statements R_B .

    FUNC            reduce using rule 28 (function -> FUNC func_type ID register_func L_P params R_P var_declaration L_B statements R_B .)
    MAIN            reduce using rule 28 (function -> FUNC func_type ID register_func L_P params R_P var_declaration L_B statements R_B .)


state 186

    (54) call_func_exp -> ID L_P args R_P .

    MULT            reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    DIV             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    MOD             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    PLUS            reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    MINUS           reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    LESSTHAN        reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    LESSTHANEQ      reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    GREATERTHAN     reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    GREATERTHANEQ   reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    EQ              reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    DIFERENT        reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    AND             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    OR              reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    R_P             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    SEMICOLON       reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    COMA            reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    R_SB            reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    ID              reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    RETURN          reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    READ            reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    PRINT           reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    IF              reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    WHILE           reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    FOR             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    L_P             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    CTE_I           reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    CTE_F           reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    CTE_CHAR        reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    R_B             reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    TO              reduce using rule 54 (call_func_exp -> ID L_P args R_P .)
    DO              reduce using rule 54 (call_func_exp -> ID L_P args R_P .)


state 187

    (53) call_func -> ID L_P args R_P SEMICOLON .

    ID              reduce using rule 53 (call_func -> ID L_P args R_P SEMICOLON .)
    RETURN          reduce using rule 53 (call_func -> ID L_P args R_P SEMICOLON .)
    READ            reduce using rule 53 (call_func -> ID L_P args R_P SEMICOLON .)
    PRINT           reduce using rule 53 (call_func -> ID L_P args R_P SEMICOLON .)
    IF              reduce using rule 53 (call_func -> ID L_P args R_P SEMICOLON .)
    WHILE           reduce using rule 53 (call_func -> ID L_P args R_P SEMICOLON .)
    FOR             reduce using rule 53 (call_func -> ID L_P args R_P SEMICOLON .)
    L_P             reduce using rule 53 (call_func -> ID L_P args R_P SEMICOLON .)
    CTE_I           reduce using rule 53 (call_func -> ID L_P args R_P SEMICOLON .)
    CTE_F           reduce using rule 53 (call_func -> ID L_P args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 53 (call_func -> ID L_P args R_P SEMICOLON .)
    R_B             reduce using rule 53 (call_func -> ID L_P args R_P SEMICOLON .)


state 188

    (51) args2 -> COMA args1 .

    R_P             reduce using rule 51 (args2 -> COMA args1 .)


state 189

    (25) id2 -> L_SB . expression R_SB
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 201
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    id                             shift and go to state 99
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 190

    (23) id1 -> L_SB expression R_SB id2 .

    EQUAL           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    MULT            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    DIV             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    MOD             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    PLUS            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    MINUS           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    LESSTHAN        reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    LESSTHANEQ      reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    GREATERTHAN     reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    GREATERTHANEQ   reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    EQ              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    DIFERENT        reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    AND             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    OR              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    ID              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    RETURN          reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    READ            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    PRINT           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    IF              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    WHILE           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    FOR             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    L_P             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    CTE_I           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    CTE_F           reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    CTE_CHAR        reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    R_B             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    R_P             reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    SEMICOLON       reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    COMA            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    R_SB            reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    TO              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)
    DO              reduce using rule 23 (id1 -> L_SB expression R_SB id2 .)


state 191

    (26) id2 -> empty .

    EQUAL           reduce using rule 26 (id2 -> empty .)
    MULT            reduce using rule 26 (id2 -> empty .)
    DIV             reduce using rule 26 (id2 -> empty .)
    MOD             reduce using rule 26 (id2 -> empty .)
    PLUS            reduce using rule 26 (id2 -> empty .)
    MINUS           reduce using rule 26 (id2 -> empty .)
    LESSTHAN        reduce using rule 26 (id2 -> empty .)
    LESSTHANEQ      reduce using rule 26 (id2 -> empty .)
    GREATERTHAN     reduce using rule 26 (id2 -> empty .)
    GREATERTHANEQ   reduce using rule 26 (id2 -> empty .)
    EQ              reduce using rule 26 (id2 -> empty .)
    DIFERENT        reduce using rule 26 (id2 -> empty .)
    AND             reduce using rule 26 (id2 -> empty .)
    OR              reduce using rule 26 (id2 -> empty .)
    ID              reduce using rule 26 (id2 -> empty .)
    RETURN          reduce using rule 26 (id2 -> empty .)
    READ            reduce using rule 26 (id2 -> empty .)
    PRINT           reduce using rule 26 (id2 -> empty .)
    IF              reduce using rule 26 (id2 -> empty .)
    WHILE           reduce using rule 26 (id2 -> empty .)
    FOR             reduce using rule 26 (id2 -> empty .)
    L_P             reduce using rule 26 (id2 -> empty .)
    CTE_I           reduce using rule 26 (id2 -> empty .)
    CTE_F           reduce using rule 26 (id2 -> empty .)
    CTE_CHAR        reduce using rule 26 (id2 -> empty .)
    R_B             reduce using rule 26 (id2 -> empty .)
    R_P             reduce using rule 26 (id2 -> empty .)
    SEMICOLON       reduce using rule 26 (id2 -> empty .)
    COMA            reduce using rule 26 (id2 -> empty .)
    R_SB            reduce using rule 26 (id2 -> empty .)
    TO              reduce using rule 26 (id2 -> empty .)
    DO              reduce using rule 26 (id2 -> empty .)


state 192

    (55) return_func -> RETURN L_P expression R_P SEMICOLON .

    ID              reduce using rule 55 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    RETURN          reduce using rule 55 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    READ            reduce using rule 55 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    PRINT           reduce using rule 55 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    IF              reduce using rule 55 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    WHILE           reduce using rule 55 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    FOR             reduce using rule 55 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    L_P             reduce using rule 55 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_I           reduce using rule 55 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_F           reduce using rule 55 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 55 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    R_B             reduce using rule 55 (return_func -> RETURN L_P expression R_P SEMICOLON .)


state 193

    (56) read -> READ L_P read_args R_P SEMICOLON .

    ID              reduce using rule 56 (read -> READ L_P read_args R_P SEMICOLON .)
    RETURN          reduce using rule 56 (read -> READ L_P read_args R_P SEMICOLON .)
    READ            reduce using rule 56 (read -> READ L_P read_args R_P SEMICOLON .)
    PRINT           reduce using rule 56 (read -> READ L_P read_args R_P SEMICOLON .)
    IF              reduce using rule 56 (read -> READ L_P read_args R_P SEMICOLON .)
    WHILE           reduce using rule 56 (read -> READ L_P read_args R_P SEMICOLON .)
    FOR             reduce using rule 56 (read -> READ L_P read_args R_P SEMICOLON .)
    L_P             reduce using rule 56 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_I           reduce using rule 56 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_F           reduce using rule 56 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 56 (read -> READ L_P read_args R_P SEMICOLON .)
    R_B             reduce using rule 56 (read -> READ L_P read_args R_P SEMICOLON .)


state 194

    (58) read_args1 -> COMA expression . read_args1
    (58) read_args1 -> . COMA expression read_args1
    (59) read_args1 -> . empty
    (107) empty -> .

    COMA            shift and go to state 176
    R_P             reduce using rule 107 (empty -> .)

    read_args1                     shift and go to state 202
    empty                          shift and go to state 177

state 195

    (60) write -> PRINT L_P write_args R_P SEMICOLON .

    ID              reduce using rule 60 (write -> PRINT L_P write_args R_P SEMICOLON .)
    RETURN          reduce using rule 60 (write -> PRINT L_P write_args R_P SEMICOLON .)
    READ            reduce using rule 60 (write -> PRINT L_P write_args R_P SEMICOLON .)
    PRINT           reduce using rule 60 (write -> PRINT L_P write_args R_P SEMICOLON .)
    IF              reduce using rule 60 (write -> PRINT L_P write_args R_P SEMICOLON .)
    WHILE           reduce using rule 60 (write -> PRINT L_P write_args R_P SEMICOLON .)
    FOR             reduce using rule 60 (write -> PRINT L_P write_args R_P SEMICOLON .)
    L_P             reduce using rule 60 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_I           reduce using rule 60 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_F           reduce using rule 60 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 60 (write -> PRINT L_P write_args R_P SEMICOLON .)
    R_B             reduce using rule 60 (write -> PRINT L_P write_args R_P SEMICOLON .)


state 196

    (62) write_args1 -> COMA write_args2 . write_args1
    (62) write_args1 -> . COMA write_args2 write_args1
    (63) write_args1 -> . empty
    (107) empty -> .

    COMA            shift and go to state 180
    R_P             reduce using rule 107 (empty -> .)

    write_args1                    shift and go to state 203
    empty                          shift and go to state 181

state 197

    (66) decision_statement -> IF L_P expression R_P L_B . statements R_B decision_statement1
    (37) statements -> . statement statements
    (38) statements -> . empty
    (39) statement -> . assignation
    (40) statement -> . call_func
    (41) statement -> . return_func
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . decision_statement
    (45) statement -> . repetition_statement
    (46) statement -> . expression
    (107) empty -> .
    (47) assignation -> . id EQUAL expression SEMICOLON
    (53) call_func -> . ID L_P args R_P SEMICOLON
    (55) return_func -> . RETURN L_P expression R_P SEMICOLON
    (56) read -> . READ L_P read_args R_P SEMICOLON
    (60) write -> . PRINT L_P write_args R_P SEMICOLON
    (66) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (69) repetition_statement -> . while_statement
    (70) repetition_statement -> . for_statement
    (74) expression -> . texp op1
    (22) id -> . ID id1
    (72) while_statement -> . WHILE L_P expression R_P do_statement
    (71) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    R_B             reduce using rule 107 (empty -> .)
    ID              shift and go to state 76
    RETURN          shift and go to state 77
    READ            shift and go to state 78
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 84
    FOR             shift and go to state 85
    L_P             shift and go to state 63
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    expression                     shift and go to state 74
    statements                     shift and go to state 204
    statement                      shift and go to state 65
    empty                          shift and go to state 66
    assignation                    shift and go to state 67
    call_func                      shift and go to state 68
    return_func                    shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    decision_statement             shift and go to state 72
    repetition_statement           shift and go to state 73
    id                             shift and go to state 75
    while_statement                shift and go to state 81
    for_statement                  shift and go to state 82
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 198

    (72) while_statement -> WHILE L_P expression R_P do_statement .

    ID              reduce using rule 72 (while_statement -> WHILE L_P expression R_P do_statement .)
    RETURN          reduce using rule 72 (while_statement -> WHILE L_P expression R_P do_statement .)
    READ            reduce using rule 72 (while_statement -> WHILE L_P expression R_P do_statement .)
    PRINT           reduce using rule 72 (while_statement -> WHILE L_P expression R_P do_statement .)
    IF              reduce using rule 72 (while_statement -> WHILE L_P expression R_P do_statement .)
    WHILE           reduce using rule 72 (while_statement -> WHILE L_P expression R_P do_statement .)
    FOR             reduce using rule 72 (while_statement -> WHILE L_P expression R_P do_statement .)
    L_P             reduce using rule 72 (while_statement -> WHILE L_P expression R_P do_statement .)
    CTE_I           reduce using rule 72 (while_statement -> WHILE L_P expression R_P do_statement .)
    CTE_F           reduce using rule 72 (while_statement -> WHILE L_P expression R_P do_statement .)
    CTE_CHAR        reduce using rule 72 (while_statement -> WHILE L_P expression R_P do_statement .)
    R_B             reduce using rule 72 (while_statement -> WHILE L_P expression R_P do_statement .)


state 199

    (73) do_statement -> DO . L_B statements R_B

    L_B             shift and go to state 205


state 200

    (71) for_statement -> FOR id EQUAL expression TO . expression do_statement
    (74) expression -> . texp op1
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (22) id -> . ID id1
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    L_P             shift and go to state 63
    ID              shift and go to state 100
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    id                             shift and go to state 99
    expression                     shift and go to state 206
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 201

    (25) id2 -> L_SB expression . R_SB

    R_SB            shift and go to state 207


state 202

    (58) read_args1 -> COMA expression read_args1 .

    R_P             reduce using rule 58 (read_args1 -> COMA expression read_args1 .)


state 203

    (62) write_args1 -> COMA write_args2 write_args1 .

    R_P             reduce using rule 62 (write_args1 -> COMA write_args2 write_args1 .)


state 204

    (66) decision_statement -> IF L_P expression R_P L_B statements . R_B decision_statement1

    R_B             shift and go to state 208


state 205

    (73) do_statement -> DO L_B . statements R_B
    (37) statements -> . statement statements
    (38) statements -> . empty
    (39) statement -> . assignation
    (40) statement -> . call_func
    (41) statement -> . return_func
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . decision_statement
    (45) statement -> . repetition_statement
    (46) statement -> . expression
    (107) empty -> .
    (47) assignation -> . id EQUAL expression SEMICOLON
    (53) call_func -> . ID L_P args R_P SEMICOLON
    (55) return_func -> . RETURN L_P expression R_P SEMICOLON
    (56) read -> . READ L_P read_args R_P SEMICOLON
    (60) write -> . PRINT L_P write_args R_P SEMICOLON
    (66) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (69) repetition_statement -> . while_statement
    (70) repetition_statement -> . for_statement
    (74) expression -> . texp op1
    (22) id -> . ID id1
    (72) while_statement -> . WHILE L_P expression R_P do_statement
    (71) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    R_B             reduce using rule 107 (empty -> .)
    ID              shift and go to state 76
    RETURN          shift and go to state 77
    READ            shift and go to state 78
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 84
    FOR             shift and go to state 85
    L_P             shift and go to state 63
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    statements                     shift and go to state 209
    statement                      shift and go to state 65
    empty                          shift and go to state 66
    assignation                    shift and go to state 67
    call_func                      shift and go to state 68
    return_func                    shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    decision_statement             shift and go to state 72
    repetition_statement           shift and go to state 73
    expression                     shift and go to state 74
    id                             shift and go to state 75
    while_statement                shift and go to state 81
    for_statement                  shift and go to state 82
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 206

    (71) for_statement -> FOR id EQUAL expression TO expression . do_statement
    (73) do_statement -> . DO L_B statements R_B

    DO              shift and go to state 199

    do_statement                   shift and go to state 210

state 207

    (25) id2 -> L_SB expression R_SB .

    EQUAL           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    MULT            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    DIV             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    MOD             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    PLUS            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    MINUS           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    LESSTHAN        reduce using rule 25 (id2 -> L_SB expression R_SB .)
    LESSTHANEQ      reduce using rule 25 (id2 -> L_SB expression R_SB .)
    GREATERTHAN     reduce using rule 25 (id2 -> L_SB expression R_SB .)
    GREATERTHANEQ   reduce using rule 25 (id2 -> L_SB expression R_SB .)
    EQ              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    DIFERENT        reduce using rule 25 (id2 -> L_SB expression R_SB .)
    AND             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    OR              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    ID              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    RETURN          reduce using rule 25 (id2 -> L_SB expression R_SB .)
    READ            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    PRINT           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    IF              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    WHILE           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    FOR             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    L_P             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    CTE_I           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    CTE_F           reduce using rule 25 (id2 -> L_SB expression R_SB .)
    CTE_CHAR        reduce using rule 25 (id2 -> L_SB expression R_SB .)
    R_B             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    R_P             reduce using rule 25 (id2 -> L_SB expression R_SB .)
    SEMICOLON       reduce using rule 25 (id2 -> L_SB expression R_SB .)
    COMA            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    R_SB            reduce using rule 25 (id2 -> L_SB expression R_SB .)
    TO              reduce using rule 25 (id2 -> L_SB expression R_SB .)
    DO              reduce using rule 25 (id2 -> L_SB expression R_SB .)


state 208

    (66) decision_statement -> IF L_P expression R_P L_B statements R_B . decision_statement1
    (67) decision_statement1 -> . ELSE L_B statements R_B
    (68) decision_statement1 -> . empty
    (107) empty -> .

    ELSE            shift and go to state 212
    ID              reduce using rule 107 (empty -> .)
    RETURN          reduce using rule 107 (empty -> .)
    READ            reduce using rule 107 (empty -> .)
    PRINT           reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    FOR             reduce using rule 107 (empty -> .)
    L_P             reduce using rule 107 (empty -> .)
    CTE_I           reduce using rule 107 (empty -> .)
    CTE_F           reduce using rule 107 (empty -> .)
    CTE_CHAR        reduce using rule 107 (empty -> .)
    R_B             reduce using rule 107 (empty -> .)

    decision_statement1            shift and go to state 211
    empty                          shift and go to state 213

state 209

    (73) do_statement -> DO L_B statements . R_B

    R_B             shift and go to state 214


state 210

    (71) for_statement -> FOR id EQUAL expression TO expression do_statement .

    ID              reduce using rule 71 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    RETURN          reduce using rule 71 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    READ            reduce using rule 71 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    PRINT           reduce using rule 71 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    IF              reduce using rule 71 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    WHILE           reduce using rule 71 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    FOR             reduce using rule 71 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    L_P             reduce using rule 71 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    CTE_I           reduce using rule 71 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    CTE_F           reduce using rule 71 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    CTE_CHAR        reduce using rule 71 (for_statement -> FOR id EQUAL expression TO expression do_statement .)
    R_B             reduce using rule 71 (for_statement -> FOR id EQUAL expression TO expression do_statement .)


state 211

    (66) decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .

    ID              reduce using rule 66 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    RETURN          reduce using rule 66 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    READ            reduce using rule 66 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    PRINT           reduce using rule 66 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    IF              reduce using rule 66 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    WHILE           reduce using rule 66 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    FOR             reduce using rule 66 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    L_P             reduce using rule 66 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    CTE_I           reduce using rule 66 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    CTE_F           reduce using rule 66 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    CTE_CHAR        reduce using rule 66 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)
    R_B             reduce using rule 66 (decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1 .)


state 212

    (67) decision_statement1 -> ELSE . L_B statements R_B

    L_B             shift and go to state 215


state 213

    (68) decision_statement1 -> empty .

    ID              reduce using rule 68 (decision_statement1 -> empty .)
    RETURN          reduce using rule 68 (decision_statement1 -> empty .)
    READ            reduce using rule 68 (decision_statement1 -> empty .)
    PRINT           reduce using rule 68 (decision_statement1 -> empty .)
    IF              reduce using rule 68 (decision_statement1 -> empty .)
    WHILE           reduce using rule 68 (decision_statement1 -> empty .)
    FOR             reduce using rule 68 (decision_statement1 -> empty .)
    L_P             reduce using rule 68 (decision_statement1 -> empty .)
    CTE_I           reduce using rule 68 (decision_statement1 -> empty .)
    CTE_F           reduce using rule 68 (decision_statement1 -> empty .)
    CTE_CHAR        reduce using rule 68 (decision_statement1 -> empty .)
    R_B             reduce using rule 68 (decision_statement1 -> empty .)


state 214

    (73) do_statement -> DO L_B statements R_B .

    ID              reduce using rule 73 (do_statement -> DO L_B statements R_B .)
    RETURN          reduce using rule 73 (do_statement -> DO L_B statements R_B .)
    READ            reduce using rule 73 (do_statement -> DO L_B statements R_B .)
    PRINT           reduce using rule 73 (do_statement -> DO L_B statements R_B .)
    IF              reduce using rule 73 (do_statement -> DO L_B statements R_B .)
    WHILE           reduce using rule 73 (do_statement -> DO L_B statements R_B .)
    FOR             reduce using rule 73 (do_statement -> DO L_B statements R_B .)
    L_P             reduce using rule 73 (do_statement -> DO L_B statements R_B .)
    CTE_I           reduce using rule 73 (do_statement -> DO L_B statements R_B .)
    CTE_F           reduce using rule 73 (do_statement -> DO L_B statements R_B .)
    CTE_CHAR        reduce using rule 73 (do_statement -> DO L_B statements R_B .)
    R_B             reduce using rule 73 (do_statement -> DO L_B statements R_B .)


state 215

    (67) decision_statement1 -> ELSE L_B . statements R_B
    (37) statements -> . statement statements
    (38) statements -> . empty
    (39) statement -> . assignation
    (40) statement -> . call_func
    (41) statement -> . return_func
    (42) statement -> . read
    (43) statement -> . write
    (44) statement -> . decision_statement
    (45) statement -> . repetition_statement
    (46) statement -> . expression
    (107) empty -> .
    (47) assignation -> . id EQUAL expression SEMICOLON
    (53) call_func -> . ID L_P args R_P SEMICOLON
    (55) return_func -> . RETURN L_P expression R_P SEMICOLON
    (56) read -> . READ L_P read_args R_P SEMICOLON
    (60) write -> . PRINT L_P write_args R_P SEMICOLON
    (66) decision_statement -> . IF L_P expression R_P L_B statements R_B decision_statement1
    (69) repetition_statement -> . while_statement
    (70) repetition_statement -> . for_statement
    (74) expression -> . texp op1
    (22) id -> . ID id1
    (72) while_statement -> . WHILE L_P expression R_P do_statement
    (71) for_statement -> . FOR id EQUAL expression TO expression do_statement
    (75) texp -> . gexp op2
    (76) gexp -> . mexp op3aux
    (77) mexp -> . term op4aux
    (78) term -> . fact op5aux
    (79) fact -> . id
    (80) fact -> . call_func_exp
    (81) fact -> . L_P expression R_P
    (82) fact -> . cte
    (54) call_func_exp -> . ID L_P args R_P
    (83) cte -> . CTE_I
    (84) cte -> . CTE_F
    (85) cte -> . CTE_CHAR

    R_B             reduce using rule 107 (empty -> .)
    ID              shift and go to state 76
    RETURN          shift and go to state 77
    READ            shift and go to state 78
    PRINT           shift and go to state 79
    IF              shift and go to state 80
    WHILE           shift and go to state 84
    FOR             shift and go to state 85
    L_P             shift and go to state 63
    CTE_I           shift and go to state 92
    CTE_F           shift and go to state 93
    CTE_CHAR        shift and go to state 94

    statements                     shift and go to state 216
    statement                      shift and go to state 65
    empty                          shift and go to state 66
    assignation                    shift and go to state 67
    call_func                      shift and go to state 68
    return_func                    shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    decision_statement             shift and go to state 72
    repetition_statement           shift and go to state 73
    expression                     shift and go to state 74
    id                             shift and go to state 75
    while_statement                shift and go to state 81
    for_statement                  shift and go to state 82
    texp                           shift and go to state 83
    gexp                           shift and go to state 86
    mexp                           shift and go to state 87
    term                           shift and go to state 88
    fact                           shift and go to state 89
    call_func_exp                  shift and go to state 90
    cte                            shift and go to state 91

state 216

    (67) decision_statement1 -> ELSE L_B statements . R_B

    R_B             shift and go to state 217


state 217

    (67) decision_statement1 -> ELSE L_B statements R_B .

    ID              reduce using rule 67 (decision_statement1 -> ELSE L_B statements R_B .)
    RETURN          reduce using rule 67 (decision_statement1 -> ELSE L_B statements R_B .)
    READ            reduce using rule 67 (decision_statement1 -> ELSE L_B statements R_B .)
    PRINT           reduce using rule 67 (decision_statement1 -> ELSE L_B statements R_B .)
    IF              reduce using rule 67 (decision_statement1 -> ELSE L_B statements R_B .)
    WHILE           reduce using rule 67 (decision_statement1 -> ELSE L_B statements R_B .)
    FOR             reduce using rule 67 (decision_statement1 -> ELSE L_B statements R_B .)
    L_P             reduce using rule 67 (decision_statement1 -> ELSE L_B statements R_B .)
    CTE_I           reduce using rule 67 (decision_statement1 -> ELSE L_B statements R_B .)
    CTE_F           reduce using rule 67 (decision_statement1 -> ELSE L_B statements R_B .)
    CTE_CHAR        reduce using rule 67 (decision_statement1 -> ELSE L_B statements R_B .)
    R_B             reduce using rule 67 (decision_statement1 -> ELSE L_B statements R_B .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for L_P in state 76 resolved as shift
WARNING: shift/reduce conflict for L_P in state 100 resolved as shift
