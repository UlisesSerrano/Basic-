Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID main_quad SEMICOLON g_var funcs main
Rule 2     main_quad -> <empty>
Rule 3     main -> MAIN L_P params R_P var_declaration L_B main_start statements R_B
Rule 4     main_start -> <empty>
Rule 5     type -> INT
Rule 6     type -> FLOAT
Rule 7     type -> CHAR
Rule 8     g_var -> var_declaration
Rule 9     funcs -> function funcs
Rule 10    funcs -> empty
Rule 11    var_declaration -> VAR var1
Rule 12    var_declaration -> empty
Rule 13    var1 -> var_type dec_id var2 SEMICOLON var4
Rule 14    var2 -> COMA dec_id var3
Rule 15    var2 -> empty
Rule 16    var3 -> var2
Rule 17    var4 -> var1
Rule 18    var4 -> empty
Rule 19    dec_id -> ID add_id dec_id1
Rule 20    dec_id1 -> L_SB CTE_I set_array R_SB dec_id2
Rule 21    dec_id1 -> empty
Rule 22    dec_id2 -> L_SB CTE_I set_array_2 R_SB
Rule 23    dec_id2 -> empty
Rule 24    add_id -> <empty>
Rule 25    set_array -> <empty>
Rule 26    set_array_2 -> <empty>
Rule 27    id -> ID set_id id_quad id1
Rule 28    set_id -> <empty>
Rule 29    id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base
Rule 30    id1 -> empty
Rule 31    id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB
Rule 32    id2 -> empty
Rule 33    verify_dim -> <empty>
Rule 34    verify_quad_1 -> <empty>
Rule 35    verify_quad_2 -> <empty>
Rule 36    add_base -> <empty>
Rule 37    var_type -> type
Rule 38    function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
Rule 39    register_func -> <empty>
Rule 40    add_params -> <empty>
Rule 41    start_func -> <empty>
Rule 42    func_type -> VOID
Rule 43    func_type -> type
Rule 44    params -> var_type param_type dec_id params1
Rule 45    params -> empty
Rule 46    param_type -> <empty>
Rule 47    params1 -> COMA params
Rule 48    params1 -> empty
Rule 49    statements -> statement statements
Rule 50    statements -> empty
Rule 51    statement -> assignation
Rule 52    statement -> call_func
Rule 53    statement -> return_func
Rule 54    statement -> read
Rule 55    statement -> write
Rule 56    statement -> decision_statement
Rule 57    statement -> repetition_statement
Rule 58    statement -> expression
Rule 59    assignation -> id EQUAL expression SEMICOLON
Rule 60    args -> args1
Rule 61    args -> empty
Rule 62    args1 -> add_fake expression param_check remove_fake args2
Rule 63    param_check -> <empty>
Rule 64    args2 -> COMA next_arg args1
Rule 65    args2 -> empty
Rule 66    next_arg -> <empty>
Rule 67    call_func -> AMP ID call_func_era L_P args R_P SEMICOLON
Rule 68    call_func_exp -> AMP ID call_func_era L_P args R_P
Rule 69    call_func_era -> <empty>
Rule 70    return_func -> RETURN L_P expression R_P SEMICOLON
Rule 71    read -> READ L_P read_args R_P SEMICOLON
Rule 72    read_args -> add_fake expression remove_fake read_args1
Rule 73    read_args1 -> COMA add_fake expression remove_fake read_args1
Rule 74    read_args1 -> empty
Rule 75    write -> PRINT L_P write_args R_P SEMICOLON
Rule 76    write_args -> write_args2 write_args1
Rule 77    write_args1 -> COMA write_args2 write_args1
Rule 78    write_args1 -> empty
Rule 79    write_args2 -> add_fake expression remove_fake
Rule 80    write_args2 -> CTE_STRING add_cte_string
Rule 81    decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1
Rule 82    decision_statement1 -> ELSE else_jump L_B statements R_B
Rule 83    decision_statement1 -> empty
Rule 84    exp_type -> <empty>
Rule 85    else_jump -> <empty>
Rule 86    repetition_statement -> while_statement
Rule 87    repetition_statement -> for_statement
Rule 88    for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement
Rule 89    for_id -> <empty>
Rule 90    for_id_quad -> <empty>
Rule 91    breadcrumb -> <empty>
Rule 92    while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement
Rule 93    do_statement -> DO L_B statements R_B
Rule 94    expression -> texp generate_quad_1 op1
Rule 95    texp -> gexp generate_quad_2 op2
Rule 96    gexp -> mexp generate_quad_3 op3aux
Rule 97    mexp -> term generate_quad_4 op4aux
Rule 98    term -> fact generate_quad_5 op5aux
Rule 99    generate_quad_1 -> <empty>
Rule 100   generate_quad_2 -> <empty>
Rule 101   generate_quad_3 -> <empty>
Rule 102   generate_quad_4 -> <empty>
Rule 103   generate_quad_5 -> <empty>
Rule 104   fact -> call_func_exp
Rule 105   fact -> id
Rule 106   fact -> L_P add_fake expression R_P remove_fake
Rule 107   fact -> cte
Rule 108   add_fake -> <empty>
Rule 109   remove_fake -> <empty>
Rule 110   id_quad -> <empty>
Rule 111   cte -> CTE_CHAR add_cte_char
Rule 112   cte -> CTE_F add_cte_float
Rule 113   cte -> CTE_I add_cte_int
Rule 114   cte -> CTE_NEG_I add_cte_int
Rule 115   add_cte_int -> <empty>
Rule 116   add_cte_float -> <empty>
Rule 117   add_cte_char -> <empty>
Rule 118   add_cte_string -> <empty>
Rule 119   add_operator -> <empty>
Rule 120   op1 -> OR add_operator expression
Rule 121   op1 -> empty
Rule 122   op2 -> AND add_operator texp
Rule 123   op2 -> empty
Rule 124   op3 -> LESSTHAN
Rule 125   op3 -> LESSTHANEQ
Rule 126   op3 -> GREATERTHAN
Rule 127   op3 -> GREATERTHANEQ
Rule 128   op3 -> EQ
Rule 129   op3 -> DIFERENT
Rule 130   op3aux -> op3 gexp
Rule 131   op3aux -> empty
Rule 132   op4 -> PLUS
Rule 133   op4 -> MINUS
Rule 134   op4aux -> op4 mexp
Rule 135   op4aux -> empty
Rule 136   op5 -> MULT
Rule 137   op5 -> DIV
Rule 138   op5 -> MOD
Rule 139   op5aux -> op5 term
Rule 140   op5aux -> empty
Rule 141   empty -> <empty>

Terminals, with rules where they appear

AMP                  : 67 68
AND                  : 122
CHAR                 : 7
COMA                 : 14 47 64 73 77
CTE_CHAR             : 111
CTE_F                : 112
CTE_I                : 20 22 113
CTE_NEG_I            : 114
CTE_STRING           : 80
DIFERENT             : 129
DIV                  : 137
DO                   : 93
ELSE                 : 82
EQ                   : 128
EQUAL                : 59 88
FLOAT                : 6
FOR                  : 88
FUNC                 : 38
GREATERTHAN          : 126
GREATERTHANEQ        : 127
ID                   : 1 19 27 38 67 68
IF                   : 81
INT                  : 5
LESSTHAN             : 124
LESSTHANEQ           : 125
L_B                  : 3 38 81 82 93
L_P                  : 3 38 67 68 70 71 75 81 92 106
L_SB                 : 20 22 29 31
MAIN                 : 3
MINUS                : 133
MOD                  : 138
MULT                 : 136
OR                   : 120
PLUS                 : 132
PRINT                : 75
PROGRAM              : 1
READ                 : 71
RETURN               : 70
R_B                  : 3 38 81 82 93
R_P                  : 3 38 67 68 70 71 75 81 92 106
R_SB                 : 20 22 29 31
SEMICOLON            : 1 13 59 67 70 71 75
TO                   : 88
VAR                  : 11
VOID                 : 42
WHILE                : 92
error                : 

Nonterminals, with rules where they appear

add_base             : 29
add_cte_char         : 111
add_cte_float        : 112
add_cte_int          : 113 114
add_cte_string       : 80
add_fake             : 29 31 62 72 73 79 106
add_id               : 19
add_operator         : 120 122
add_params           : 38
args                 : 67 68
args1                : 60 64
args2                : 62
assignation          : 51
breadcrumb           : 88 92
call_func            : 52
call_func_era        : 67 68
call_func_exp        : 104
cte                  : 107
dec_id               : 13 14 44
dec_id1              : 19
dec_id2              : 20
decision_statement   : 56
decision_statement1  : 81
do_statement         : 88 92
else_jump            : 82
empty                : 10 12 15 18 21 23 30 32 45 48 50 61 65 74 78 83 121 123 131 135 140
exp_type             : 81 88 92
expression           : 29 31 58 59 62 70 72 73 79 81 88 88 92 106 120
fact                 : 98
for_id               : 88
for_id_quad          : 88
for_statement        : 87
func_type            : 38
funcs                : 1 9
function             : 9
g_var                : 1
generate_quad_1      : 94
generate_quad_2      : 95
generate_quad_3      : 96
generate_quad_4      : 97
generate_quad_5      : 98
gexp                 : 95 130
id                   : 59 88 105
id1                  : 27
id2                  : 29
id_quad              : 27
main                 : 1
main_quad            : 1
main_start           : 3
mexp                 : 96 134
next_arg             : 64
op1                  : 94
op2                  : 95
op3                  : 130
op3aux               : 96
op4                  : 134
op4aux               : 97
op5                  : 139
op5aux               : 98
param_check          : 62
param_type           : 44
params               : 3 38 47
params1              : 44
program              : 0
read                 : 54
read_args            : 71
read_args1           : 72 73
register_func        : 38
remove_fake          : 29 31 62 72 73 79 106
repetition_statement : 57
return_func          : 53
set_array            : 20
set_array_2          : 22
set_id               : 27
start_func           : 38
statement            : 49
statements           : 3 38 49 81 82 93
term                 : 97 139
texp                 : 94 122
type                 : 37 43
var1                 : 11 17
var2                 : 13 16
var3                 : 14
var4                 : 13
var_declaration      : 3 8 38
var_type             : 13 44
verify_dim           : 29
verify_quad_1        : 29
verify_quad_2        : 31
while_statement      : 86
write                : 55
write_args           : 75
write_args1          : 76 77
write_args2          : 76 77

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID main_quad SEMICOLON g_var funcs main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID main_quad SEMICOLON g_var funcs main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . main_quad SEMICOLON g_var funcs main
    (2) main_quad -> .

    SEMICOLON       reduce using rule 2 (main_quad -> .)

    main_quad                      shift and go to state 4

state 4

    (1) program -> PROGRAM ID main_quad . SEMICOLON g_var funcs main

    SEMICOLON       shift and go to state 5


state 5

    (1) program -> PROGRAM ID main_quad SEMICOLON . g_var funcs main
    (8) g_var -> . var_declaration
    (11) var_declaration -> . VAR var1
    (12) var_declaration -> . empty
    (141) empty -> .

    VAR             shift and go to state 8
    FUNC            reduce using rule 141 (empty -> .)
    MAIN            reduce using rule 141 (empty -> .)

    g_var                          shift and go to state 6
    var_declaration                shift and go to state 7
    empty                          shift and go to state 9

state 6

    (1) program -> PROGRAM ID main_quad SEMICOLON g_var . funcs main
    (9) funcs -> . function funcs
    (10) funcs -> . empty
    (38) function -> . FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
    (141) empty -> .

    FUNC            shift and go to state 13
    MAIN            reduce using rule 141 (empty -> .)

    funcs                          shift and go to state 10
    function                       shift and go to state 11
    empty                          shift and go to state 12

state 7

    (8) g_var -> var_declaration .

    FUNC            reduce using rule 8 (g_var -> var_declaration .)
    MAIN            reduce using rule 8 (g_var -> var_declaration .)


state 8

    (11) var_declaration -> VAR . var1
    (13) var1 -> . var_type dec_id var2 SEMICOLON var4
    (37) var_type -> . type
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    var1                           shift and go to state 14
    var_type                       shift and go to state 15
    type                           shift and go to state 16

state 9

    (12) var_declaration -> empty .

    FUNC            reduce using rule 12 (var_declaration -> empty .)
    MAIN            reduce using rule 12 (var_declaration -> empty .)
    L_B             reduce using rule 12 (var_declaration -> empty .)


state 10

    (1) program -> PROGRAM ID main_quad SEMICOLON g_var funcs . main
    (3) main -> . MAIN L_P params R_P var_declaration L_B main_start statements R_B

    MAIN            shift and go to state 21

    main                           shift and go to state 20

state 11

    (9) funcs -> function . funcs
    (9) funcs -> . function funcs
    (10) funcs -> . empty
    (38) function -> . FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
    (141) empty -> .

    FUNC            shift and go to state 13
    MAIN            reduce using rule 141 (empty -> .)

    function                       shift and go to state 11
    funcs                          shift and go to state 22
    empty                          shift and go to state 12

state 12

    (10) funcs -> empty .

    MAIN            reduce using rule 10 (funcs -> empty .)


state 13

    (38) function -> FUNC . func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
    (42) func_type -> . VOID
    (43) func_type -> . type
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    VOID            shift and go to state 24
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    func_type                      shift and go to state 23
    type                           shift and go to state 25

state 14

    (11) var_declaration -> VAR var1 .

    FUNC            reduce using rule 11 (var_declaration -> VAR var1 .)
    MAIN            reduce using rule 11 (var_declaration -> VAR var1 .)
    L_B             reduce using rule 11 (var_declaration -> VAR var1 .)


state 15

    (13) var1 -> var_type . dec_id var2 SEMICOLON var4
    (19) dec_id -> . ID add_id dec_id1

    ID              shift and go to state 27

    dec_id                         shift and go to state 26

state 16

    (37) var_type -> type .

    ID              reduce using rule 37 (var_type -> type .)


state 17

    (5) type -> INT .

    ID              reduce using rule 5 (type -> INT .)


state 18

    (6) type -> FLOAT .

    ID              reduce using rule 6 (type -> FLOAT .)


state 19

    (7) type -> CHAR .

    ID              reduce using rule 7 (type -> CHAR .)


state 20

    (1) program -> PROGRAM ID main_quad SEMICOLON g_var funcs main .

    $end            reduce using rule 1 (program -> PROGRAM ID main_quad SEMICOLON g_var funcs main .)


state 21

    (3) main -> MAIN . L_P params R_P var_declaration L_B main_start statements R_B

    L_P             shift and go to state 28


state 22

    (9) funcs -> function funcs .

    MAIN            reduce using rule 9 (funcs -> function funcs .)


state 23

    (38) function -> FUNC func_type . ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B

    ID              shift and go to state 29


state 24

    (42) func_type -> VOID .

    ID              reduce using rule 42 (func_type -> VOID .)


state 25

    (43) func_type -> type .

    ID              reduce using rule 43 (func_type -> type .)


state 26

    (13) var1 -> var_type dec_id . var2 SEMICOLON var4
    (14) var2 -> . COMA dec_id var3
    (15) var2 -> . empty
    (141) empty -> .

    COMA            shift and go to state 31
    SEMICOLON       reduce using rule 141 (empty -> .)

    var2                           shift and go to state 30
    empty                          shift and go to state 32

state 27

    (19) dec_id -> ID . add_id dec_id1
    (24) add_id -> .

    L_SB            reduce using rule 24 (add_id -> .)
    COMA            reduce using rule 24 (add_id -> .)
    SEMICOLON       reduce using rule 24 (add_id -> .)
    R_P             reduce using rule 24 (add_id -> .)

    add_id                         shift and go to state 33

state 28

    (3) main -> MAIN L_P . params R_P var_declaration L_B main_start statements R_B
    (44) params -> . var_type param_type dec_id params1
    (45) params -> . empty
    (37) var_type -> . type
    (141) empty -> .
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    R_P             reduce using rule 141 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    params                         shift and go to state 34
    var_type                       shift and go to state 35
    empty                          shift and go to state 36
    type                           shift and go to state 16

state 29

    (38) function -> FUNC func_type ID . register_func L_P params R_P add_params var_declaration start_func L_B statements R_B
    (39) register_func -> .

    L_P             reduce using rule 39 (register_func -> .)

    register_func                  shift and go to state 37

state 30

    (13) var1 -> var_type dec_id var2 . SEMICOLON var4

    SEMICOLON       shift and go to state 38


state 31

    (14) var2 -> COMA . dec_id var3
    (19) dec_id -> . ID add_id dec_id1

    ID              shift and go to state 27

    dec_id                         shift and go to state 39

state 32

    (15) var2 -> empty .

    SEMICOLON       reduce using rule 15 (var2 -> empty .)


state 33

    (19) dec_id -> ID add_id . dec_id1
    (20) dec_id1 -> . L_SB CTE_I set_array R_SB dec_id2
    (21) dec_id1 -> . empty
    (141) empty -> .

    L_SB            shift and go to state 41
    COMA            reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    R_P             reduce using rule 141 (empty -> .)

    dec_id1                        shift and go to state 40
    empty                          shift and go to state 42

state 34

    (3) main -> MAIN L_P params . R_P var_declaration L_B main_start statements R_B

    R_P             shift and go to state 43


state 35

    (44) params -> var_type . param_type dec_id params1
    (46) param_type -> .

    ID              reduce using rule 46 (param_type -> .)

    param_type                     shift and go to state 44

state 36

    (45) params -> empty .

    R_P             reduce using rule 45 (params -> empty .)


state 37

    (38) function -> FUNC func_type ID register_func . L_P params R_P add_params var_declaration start_func L_B statements R_B

    L_P             shift and go to state 45


state 38

    (13) var1 -> var_type dec_id var2 SEMICOLON . var4
    (17) var4 -> . var1
    (18) var4 -> . empty
    (13) var1 -> . var_type dec_id var2 SEMICOLON var4
    (141) empty -> .
    (37) var_type -> . type
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    FUNC            reduce using rule 141 (empty -> .)
    MAIN            reduce using rule 141 (empty -> .)
    L_B             reduce using rule 141 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    var_type                       shift and go to state 15
    var4                           shift and go to state 46
    var1                           shift and go to state 47
    empty                          shift and go to state 48
    type                           shift and go to state 16

state 39

    (14) var2 -> COMA dec_id . var3
    (16) var3 -> . var2
    (14) var2 -> . COMA dec_id var3
    (15) var2 -> . empty
    (141) empty -> .

    COMA            shift and go to state 31
    SEMICOLON       reduce using rule 141 (empty -> .)

    var3                           shift and go to state 49
    var2                           shift and go to state 50
    empty                          shift and go to state 32

state 40

    (19) dec_id -> ID add_id dec_id1 .

    COMA            reduce using rule 19 (dec_id -> ID add_id dec_id1 .)
    SEMICOLON       reduce using rule 19 (dec_id -> ID add_id dec_id1 .)
    R_P             reduce using rule 19 (dec_id -> ID add_id dec_id1 .)


state 41

    (20) dec_id1 -> L_SB . CTE_I set_array R_SB dec_id2

    CTE_I           shift and go to state 51


state 42

    (21) dec_id1 -> empty .

    COMA            reduce using rule 21 (dec_id1 -> empty .)
    SEMICOLON       reduce using rule 21 (dec_id1 -> empty .)
    R_P             reduce using rule 21 (dec_id1 -> empty .)


state 43

    (3) main -> MAIN L_P params R_P . var_declaration L_B main_start statements R_B
    (11) var_declaration -> . VAR var1
    (12) var_declaration -> . empty
    (141) empty -> .

    VAR             shift and go to state 8
    L_B             reduce using rule 141 (empty -> .)

    var_declaration                shift and go to state 52
    empty                          shift and go to state 9

state 44

    (44) params -> var_type param_type . dec_id params1
    (19) dec_id -> . ID add_id dec_id1

    ID              shift and go to state 27

    dec_id                         shift and go to state 53

state 45

    (38) function -> FUNC func_type ID register_func L_P . params R_P add_params var_declaration start_func L_B statements R_B
    (44) params -> . var_type param_type dec_id params1
    (45) params -> . empty
    (37) var_type -> . type
    (141) empty -> .
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    R_P             reduce using rule 141 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    params                         shift and go to state 54
    var_type                       shift and go to state 35
    empty                          shift and go to state 36
    type                           shift and go to state 16

state 46

    (13) var1 -> var_type dec_id var2 SEMICOLON var4 .

    FUNC            reduce using rule 13 (var1 -> var_type dec_id var2 SEMICOLON var4 .)
    MAIN            reduce using rule 13 (var1 -> var_type dec_id var2 SEMICOLON var4 .)
    L_B             reduce using rule 13 (var1 -> var_type dec_id var2 SEMICOLON var4 .)


state 47

    (17) var4 -> var1 .

    FUNC            reduce using rule 17 (var4 -> var1 .)
    MAIN            reduce using rule 17 (var4 -> var1 .)
    L_B             reduce using rule 17 (var4 -> var1 .)


state 48

    (18) var4 -> empty .

    FUNC            reduce using rule 18 (var4 -> empty .)
    MAIN            reduce using rule 18 (var4 -> empty .)
    L_B             reduce using rule 18 (var4 -> empty .)


state 49

    (14) var2 -> COMA dec_id var3 .

    SEMICOLON       reduce using rule 14 (var2 -> COMA dec_id var3 .)


state 50

    (16) var3 -> var2 .

    SEMICOLON       reduce using rule 16 (var3 -> var2 .)


state 51

    (20) dec_id1 -> L_SB CTE_I . set_array R_SB dec_id2
    (25) set_array -> .

    R_SB            reduce using rule 25 (set_array -> .)

    set_array                      shift and go to state 55

state 52

    (3) main -> MAIN L_P params R_P var_declaration . L_B main_start statements R_B

    L_B             shift and go to state 56


state 53

    (44) params -> var_type param_type dec_id . params1
    (47) params1 -> . COMA params
    (48) params1 -> . empty
    (141) empty -> .

    COMA            shift and go to state 58
    R_P             reduce using rule 141 (empty -> .)

    params1                        shift and go to state 57
    empty                          shift and go to state 59

state 54

    (38) function -> FUNC func_type ID register_func L_P params . R_P add_params var_declaration start_func L_B statements R_B

    R_P             shift and go to state 60


state 55

    (20) dec_id1 -> L_SB CTE_I set_array . R_SB dec_id2

    R_SB            shift and go to state 61


state 56

    (3) main -> MAIN L_P params R_P var_declaration L_B . main_start statements R_B
    (4) main_start -> .

    AMP             reduce using rule 4 (main_start -> .)
    RETURN          reduce using rule 4 (main_start -> .)
    READ            reduce using rule 4 (main_start -> .)
    PRINT           reduce using rule 4 (main_start -> .)
    IF              reduce using rule 4 (main_start -> .)
    ID              reduce using rule 4 (main_start -> .)
    WHILE           reduce using rule 4 (main_start -> .)
    FOR             reduce using rule 4 (main_start -> .)
    L_P             reduce using rule 4 (main_start -> .)
    CTE_CHAR        reduce using rule 4 (main_start -> .)
    CTE_F           reduce using rule 4 (main_start -> .)
    CTE_I           reduce using rule 4 (main_start -> .)
    CTE_NEG_I       reduce using rule 4 (main_start -> .)
    R_B             reduce using rule 4 (main_start -> .)

    main_start                     shift and go to state 62

state 57

    (44) params -> var_type param_type dec_id params1 .

    R_P             reduce using rule 44 (params -> var_type param_type dec_id params1 .)


state 58

    (47) params1 -> COMA . params
    (44) params -> . var_type param_type dec_id params1
    (45) params -> . empty
    (37) var_type -> . type
    (141) empty -> .
    (5) type -> . INT
    (6) type -> . FLOAT
    (7) type -> . CHAR

    R_P             reduce using rule 141 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19

    params                         shift and go to state 63
    var_type                       shift and go to state 35
    empty                          shift and go to state 36
    type                           shift and go to state 16

state 59

    (48) params1 -> empty .

    R_P             reduce using rule 48 (params1 -> empty .)


state 60

    (38) function -> FUNC func_type ID register_func L_P params R_P . add_params var_declaration start_func L_B statements R_B
    (40) add_params -> .

    VAR             reduce using rule 40 (add_params -> .)
    L_B             reduce using rule 40 (add_params -> .)

    add_params                     shift and go to state 64

state 61

    (20) dec_id1 -> L_SB CTE_I set_array R_SB . dec_id2
    (22) dec_id2 -> . L_SB CTE_I set_array_2 R_SB
    (23) dec_id2 -> . empty
    (141) empty -> .

    L_SB            shift and go to state 65
    COMA            reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    R_P             reduce using rule 141 (empty -> .)

    dec_id2                        shift and go to state 66
    empty                          shift and go to state 67

state 62

    (3) main -> MAIN L_P params R_P var_declaration L_B main_start . statements R_B
    (49) statements -> . statement statements
    (50) statements -> . empty
    (51) statement -> . assignation
    (52) statement -> . call_func
    (53) statement -> . return_func
    (54) statement -> . read
    (55) statement -> . write
    (56) statement -> . decision_statement
    (57) statement -> . repetition_statement
    (58) statement -> . expression
    (141) empty -> .
    (59) assignation -> . id EQUAL expression SEMICOLON
    (67) call_func -> . AMP ID call_func_era L_P args R_P SEMICOLON
    (70) return_func -> . RETURN L_P expression R_P SEMICOLON
    (71) read -> . READ L_P read_args R_P SEMICOLON
    (75) write -> . PRINT L_P write_args R_P SEMICOLON
    (81) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (86) repetition_statement -> . while_statement
    (87) repetition_statement -> . for_statement
    (94) expression -> . texp generate_quad_1 op1
    (27) id -> . ID set_id id_quad id1
    (92) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (88) for_statement -> . FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    R_B             reduce using rule 141 (empty -> .)
    AMP             shift and go to state 81
    RETURN          shift and go to state 83
    READ            shift and go to state 84
    PRINT           shift and go to state 85
    IF              shift and go to state 86
    ID              shift and go to state 82
    WHILE           shift and go to state 90
    FOR             shift and go to state 91
    L_P             shift and go to state 68
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    statements                     shift and go to state 69
    statement                      shift and go to state 70
    empty                          shift and go to state 71
    assignation                    shift and go to state 72
    call_func                      shift and go to state 73
    return_func                    shift and go to state 74
    read                           shift and go to state 75
    write                          shift and go to state 76
    decision_statement             shift and go to state 77
    repetition_statement           shift and go to state 78
    expression                     shift and go to state 79
    id                             shift and go to state 80
    while_statement                shift and go to state 87
    for_statement                  shift and go to state 88
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    cte                            shift and go to state 97

state 63

    (47) params1 -> COMA params .

    R_P             reduce using rule 47 (params1 -> COMA params .)


state 64

    (38) function -> FUNC func_type ID register_func L_P params R_P add_params . var_declaration start_func L_B statements R_B
    (11) var_declaration -> . VAR var1
    (12) var_declaration -> . empty
    (141) empty -> .

    VAR             shift and go to state 8
    L_B             reduce using rule 141 (empty -> .)

    var_declaration                shift and go to state 102
    empty                          shift and go to state 9

state 65

    (22) dec_id2 -> L_SB . CTE_I set_array_2 R_SB

    CTE_I           shift and go to state 103


state 66

    (20) dec_id1 -> L_SB CTE_I set_array R_SB dec_id2 .

    COMA            reduce using rule 20 (dec_id1 -> L_SB CTE_I set_array R_SB dec_id2 .)
    SEMICOLON       reduce using rule 20 (dec_id1 -> L_SB CTE_I set_array R_SB dec_id2 .)
    R_P             reduce using rule 20 (dec_id1 -> L_SB CTE_I set_array R_SB dec_id2 .)


state 67

    (23) dec_id2 -> empty .

    COMA            reduce using rule 23 (dec_id2 -> empty .)
    SEMICOLON       reduce using rule 23 (dec_id2 -> empty .)
    R_P             reduce using rule 23 (dec_id2 -> empty .)


state 68

    (106) fact -> L_P . add_fake expression R_P remove_fake
    (108) add_fake -> .

    L_P             reduce using rule 108 (add_fake -> .)
    AMP             reduce using rule 108 (add_fake -> .)
    ID              reduce using rule 108 (add_fake -> .)
    CTE_CHAR        reduce using rule 108 (add_fake -> .)
    CTE_F           reduce using rule 108 (add_fake -> .)
    CTE_I           reduce using rule 108 (add_fake -> .)
    CTE_NEG_I       reduce using rule 108 (add_fake -> .)

    add_fake                       shift and go to state 104

state 69

    (3) main -> MAIN L_P params R_P var_declaration L_B main_start statements . R_B

    R_B             shift and go to state 105


state 70

    (49) statements -> statement . statements
    (49) statements -> . statement statements
    (50) statements -> . empty
    (51) statement -> . assignation
    (52) statement -> . call_func
    (53) statement -> . return_func
    (54) statement -> . read
    (55) statement -> . write
    (56) statement -> . decision_statement
    (57) statement -> . repetition_statement
    (58) statement -> . expression
    (141) empty -> .
    (59) assignation -> . id EQUAL expression SEMICOLON
    (67) call_func -> . AMP ID call_func_era L_P args R_P SEMICOLON
    (70) return_func -> . RETURN L_P expression R_P SEMICOLON
    (71) read -> . READ L_P read_args R_P SEMICOLON
    (75) write -> . PRINT L_P write_args R_P SEMICOLON
    (81) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (86) repetition_statement -> . while_statement
    (87) repetition_statement -> . for_statement
    (94) expression -> . texp generate_quad_1 op1
    (27) id -> . ID set_id id_quad id1
    (92) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (88) for_statement -> . FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    R_B             reduce using rule 141 (empty -> .)
    AMP             shift and go to state 81
    RETURN          shift and go to state 83
    READ            shift and go to state 84
    PRINT           shift and go to state 85
    IF              shift and go to state 86
    ID              shift and go to state 82
    WHILE           shift and go to state 90
    FOR             shift and go to state 91
    L_P             shift and go to state 68
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    statement                      shift and go to state 70
    statements                     shift and go to state 106
    empty                          shift and go to state 71
    assignation                    shift and go to state 72
    call_func                      shift and go to state 73
    return_func                    shift and go to state 74
    read                           shift and go to state 75
    write                          shift and go to state 76
    decision_statement             shift and go to state 77
    repetition_statement           shift and go to state 78
    expression                     shift and go to state 79
    id                             shift and go to state 80
    while_statement                shift and go to state 87
    for_statement                  shift and go to state 88
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    cte                            shift and go to state 97

state 71

    (50) statements -> empty .

    R_B             reduce using rule 50 (statements -> empty .)


state 72

    (51) statement -> assignation .

    AMP             reduce using rule 51 (statement -> assignation .)
    RETURN          reduce using rule 51 (statement -> assignation .)
    READ            reduce using rule 51 (statement -> assignation .)
    PRINT           reduce using rule 51 (statement -> assignation .)
    IF              reduce using rule 51 (statement -> assignation .)
    ID              reduce using rule 51 (statement -> assignation .)
    WHILE           reduce using rule 51 (statement -> assignation .)
    FOR             reduce using rule 51 (statement -> assignation .)
    L_P             reduce using rule 51 (statement -> assignation .)
    CTE_CHAR        reduce using rule 51 (statement -> assignation .)
    CTE_F           reduce using rule 51 (statement -> assignation .)
    CTE_I           reduce using rule 51 (statement -> assignation .)
    CTE_NEG_I       reduce using rule 51 (statement -> assignation .)
    R_B             reduce using rule 51 (statement -> assignation .)


state 73

    (52) statement -> call_func .

    AMP             reduce using rule 52 (statement -> call_func .)
    RETURN          reduce using rule 52 (statement -> call_func .)
    READ            reduce using rule 52 (statement -> call_func .)
    PRINT           reduce using rule 52 (statement -> call_func .)
    IF              reduce using rule 52 (statement -> call_func .)
    ID              reduce using rule 52 (statement -> call_func .)
    WHILE           reduce using rule 52 (statement -> call_func .)
    FOR             reduce using rule 52 (statement -> call_func .)
    L_P             reduce using rule 52 (statement -> call_func .)
    CTE_CHAR        reduce using rule 52 (statement -> call_func .)
    CTE_F           reduce using rule 52 (statement -> call_func .)
    CTE_I           reduce using rule 52 (statement -> call_func .)
    CTE_NEG_I       reduce using rule 52 (statement -> call_func .)
    R_B             reduce using rule 52 (statement -> call_func .)


state 74

    (53) statement -> return_func .

    AMP             reduce using rule 53 (statement -> return_func .)
    RETURN          reduce using rule 53 (statement -> return_func .)
    READ            reduce using rule 53 (statement -> return_func .)
    PRINT           reduce using rule 53 (statement -> return_func .)
    IF              reduce using rule 53 (statement -> return_func .)
    ID              reduce using rule 53 (statement -> return_func .)
    WHILE           reduce using rule 53 (statement -> return_func .)
    FOR             reduce using rule 53 (statement -> return_func .)
    L_P             reduce using rule 53 (statement -> return_func .)
    CTE_CHAR        reduce using rule 53 (statement -> return_func .)
    CTE_F           reduce using rule 53 (statement -> return_func .)
    CTE_I           reduce using rule 53 (statement -> return_func .)
    CTE_NEG_I       reduce using rule 53 (statement -> return_func .)
    R_B             reduce using rule 53 (statement -> return_func .)


state 75

    (54) statement -> read .

    AMP             reduce using rule 54 (statement -> read .)
    RETURN          reduce using rule 54 (statement -> read .)
    READ            reduce using rule 54 (statement -> read .)
    PRINT           reduce using rule 54 (statement -> read .)
    IF              reduce using rule 54 (statement -> read .)
    ID              reduce using rule 54 (statement -> read .)
    WHILE           reduce using rule 54 (statement -> read .)
    FOR             reduce using rule 54 (statement -> read .)
    L_P             reduce using rule 54 (statement -> read .)
    CTE_CHAR        reduce using rule 54 (statement -> read .)
    CTE_F           reduce using rule 54 (statement -> read .)
    CTE_I           reduce using rule 54 (statement -> read .)
    CTE_NEG_I       reduce using rule 54 (statement -> read .)
    R_B             reduce using rule 54 (statement -> read .)


state 76

    (55) statement -> write .

    AMP             reduce using rule 55 (statement -> write .)
    RETURN          reduce using rule 55 (statement -> write .)
    READ            reduce using rule 55 (statement -> write .)
    PRINT           reduce using rule 55 (statement -> write .)
    IF              reduce using rule 55 (statement -> write .)
    ID              reduce using rule 55 (statement -> write .)
    WHILE           reduce using rule 55 (statement -> write .)
    FOR             reduce using rule 55 (statement -> write .)
    L_P             reduce using rule 55 (statement -> write .)
    CTE_CHAR        reduce using rule 55 (statement -> write .)
    CTE_F           reduce using rule 55 (statement -> write .)
    CTE_I           reduce using rule 55 (statement -> write .)
    CTE_NEG_I       reduce using rule 55 (statement -> write .)
    R_B             reduce using rule 55 (statement -> write .)


state 77

    (56) statement -> decision_statement .

    AMP             reduce using rule 56 (statement -> decision_statement .)
    RETURN          reduce using rule 56 (statement -> decision_statement .)
    READ            reduce using rule 56 (statement -> decision_statement .)
    PRINT           reduce using rule 56 (statement -> decision_statement .)
    IF              reduce using rule 56 (statement -> decision_statement .)
    ID              reduce using rule 56 (statement -> decision_statement .)
    WHILE           reduce using rule 56 (statement -> decision_statement .)
    FOR             reduce using rule 56 (statement -> decision_statement .)
    L_P             reduce using rule 56 (statement -> decision_statement .)
    CTE_CHAR        reduce using rule 56 (statement -> decision_statement .)
    CTE_F           reduce using rule 56 (statement -> decision_statement .)
    CTE_I           reduce using rule 56 (statement -> decision_statement .)
    CTE_NEG_I       reduce using rule 56 (statement -> decision_statement .)
    R_B             reduce using rule 56 (statement -> decision_statement .)


state 78

    (57) statement -> repetition_statement .

    AMP             reduce using rule 57 (statement -> repetition_statement .)
    RETURN          reduce using rule 57 (statement -> repetition_statement .)
    READ            reduce using rule 57 (statement -> repetition_statement .)
    PRINT           reduce using rule 57 (statement -> repetition_statement .)
    IF              reduce using rule 57 (statement -> repetition_statement .)
    ID              reduce using rule 57 (statement -> repetition_statement .)
    WHILE           reduce using rule 57 (statement -> repetition_statement .)
    FOR             reduce using rule 57 (statement -> repetition_statement .)
    L_P             reduce using rule 57 (statement -> repetition_statement .)
    CTE_CHAR        reduce using rule 57 (statement -> repetition_statement .)
    CTE_F           reduce using rule 57 (statement -> repetition_statement .)
    CTE_I           reduce using rule 57 (statement -> repetition_statement .)
    CTE_NEG_I       reduce using rule 57 (statement -> repetition_statement .)
    R_B             reduce using rule 57 (statement -> repetition_statement .)


state 79

    (58) statement -> expression .

    AMP             reduce using rule 58 (statement -> expression .)
    RETURN          reduce using rule 58 (statement -> expression .)
    READ            reduce using rule 58 (statement -> expression .)
    PRINT           reduce using rule 58 (statement -> expression .)
    IF              reduce using rule 58 (statement -> expression .)
    ID              reduce using rule 58 (statement -> expression .)
    WHILE           reduce using rule 58 (statement -> expression .)
    FOR             reduce using rule 58 (statement -> expression .)
    L_P             reduce using rule 58 (statement -> expression .)
    CTE_CHAR        reduce using rule 58 (statement -> expression .)
    CTE_F           reduce using rule 58 (statement -> expression .)
    CTE_I           reduce using rule 58 (statement -> expression .)
    CTE_NEG_I       reduce using rule 58 (statement -> expression .)
    R_B             reduce using rule 58 (statement -> expression .)


state 80

    (59) assignation -> id . EQUAL expression SEMICOLON
    (105) fact -> id .

    EQUAL           shift and go to state 107
    MULT            reduce using rule 105 (fact -> id .)
    DIV             reduce using rule 105 (fact -> id .)
    MOD             reduce using rule 105 (fact -> id .)
    PLUS            reduce using rule 105 (fact -> id .)
    MINUS           reduce using rule 105 (fact -> id .)
    LESSTHAN        reduce using rule 105 (fact -> id .)
    LESSTHANEQ      reduce using rule 105 (fact -> id .)
    GREATERTHAN     reduce using rule 105 (fact -> id .)
    GREATERTHANEQ   reduce using rule 105 (fact -> id .)
    EQ              reduce using rule 105 (fact -> id .)
    DIFERENT        reduce using rule 105 (fact -> id .)
    AND             reduce using rule 105 (fact -> id .)
    OR              reduce using rule 105 (fact -> id .)
    AMP             reduce using rule 105 (fact -> id .)
    RETURN          reduce using rule 105 (fact -> id .)
    READ            reduce using rule 105 (fact -> id .)
    PRINT           reduce using rule 105 (fact -> id .)
    IF              reduce using rule 105 (fact -> id .)
    ID              reduce using rule 105 (fact -> id .)
    WHILE           reduce using rule 105 (fact -> id .)
    FOR             reduce using rule 105 (fact -> id .)
    L_P             reduce using rule 105 (fact -> id .)
    CTE_CHAR        reduce using rule 105 (fact -> id .)
    CTE_F           reduce using rule 105 (fact -> id .)
    CTE_I           reduce using rule 105 (fact -> id .)
    CTE_NEG_I       reduce using rule 105 (fact -> id .)
    R_B             reduce using rule 105 (fact -> id .)


state 81

    (67) call_func -> AMP . ID call_func_era L_P args R_P SEMICOLON
    (68) call_func_exp -> AMP . ID call_func_era L_P args R_P

    ID              shift and go to state 108


state 82

    (27) id -> ID . set_id id_quad id1
    (28) set_id -> .

    L_SB            reduce using rule 28 (set_id -> .)
    EQUAL           reduce using rule 28 (set_id -> .)
    MULT            reduce using rule 28 (set_id -> .)
    DIV             reduce using rule 28 (set_id -> .)
    MOD             reduce using rule 28 (set_id -> .)
    PLUS            reduce using rule 28 (set_id -> .)
    MINUS           reduce using rule 28 (set_id -> .)
    LESSTHAN        reduce using rule 28 (set_id -> .)
    LESSTHANEQ      reduce using rule 28 (set_id -> .)
    GREATERTHAN     reduce using rule 28 (set_id -> .)
    GREATERTHANEQ   reduce using rule 28 (set_id -> .)
    EQ              reduce using rule 28 (set_id -> .)
    DIFERENT        reduce using rule 28 (set_id -> .)
    AND             reduce using rule 28 (set_id -> .)
    OR              reduce using rule 28 (set_id -> .)
    AMP             reduce using rule 28 (set_id -> .)
    RETURN          reduce using rule 28 (set_id -> .)
    READ            reduce using rule 28 (set_id -> .)
    PRINT           reduce using rule 28 (set_id -> .)
    IF              reduce using rule 28 (set_id -> .)
    ID              reduce using rule 28 (set_id -> .)
    WHILE           reduce using rule 28 (set_id -> .)
    FOR             reduce using rule 28 (set_id -> .)
    L_P             reduce using rule 28 (set_id -> .)
    CTE_CHAR        reduce using rule 28 (set_id -> .)
    CTE_F           reduce using rule 28 (set_id -> .)
    CTE_I           reduce using rule 28 (set_id -> .)
    CTE_NEG_I       reduce using rule 28 (set_id -> .)
    R_B             reduce using rule 28 (set_id -> .)
    R_P             reduce using rule 28 (set_id -> .)
    SEMICOLON       reduce using rule 28 (set_id -> .)
    COMA            reduce using rule 28 (set_id -> .)
    TO              reduce using rule 28 (set_id -> .)
    R_SB            reduce using rule 28 (set_id -> .)
    DO              reduce using rule 28 (set_id -> .)

    set_id                         shift and go to state 109

state 83

    (70) return_func -> RETURN . L_P expression R_P SEMICOLON

    L_P             shift and go to state 110


state 84

    (71) read -> READ . L_P read_args R_P SEMICOLON

    L_P             shift and go to state 111


state 85

    (75) write -> PRINT . L_P write_args R_P SEMICOLON

    L_P             shift and go to state 112


state 86

    (81) decision_statement -> IF . L_P expression R_P exp_type L_B statements R_B decision_statement1

    L_P             shift and go to state 113


state 87

    (86) repetition_statement -> while_statement .

    AMP             reduce using rule 86 (repetition_statement -> while_statement .)
    RETURN          reduce using rule 86 (repetition_statement -> while_statement .)
    READ            reduce using rule 86 (repetition_statement -> while_statement .)
    PRINT           reduce using rule 86 (repetition_statement -> while_statement .)
    IF              reduce using rule 86 (repetition_statement -> while_statement .)
    ID              reduce using rule 86 (repetition_statement -> while_statement .)
    WHILE           reduce using rule 86 (repetition_statement -> while_statement .)
    FOR             reduce using rule 86 (repetition_statement -> while_statement .)
    L_P             reduce using rule 86 (repetition_statement -> while_statement .)
    CTE_CHAR        reduce using rule 86 (repetition_statement -> while_statement .)
    CTE_F           reduce using rule 86 (repetition_statement -> while_statement .)
    CTE_I           reduce using rule 86 (repetition_statement -> while_statement .)
    CTE_NEG_I       reduce using rule 86 (repetition_statement -> while_statement .)
    R_B             reduce using rule 86 (repetition_statement -> while_statement .)


state 88

    (87) repetition_statement -> for_statement .

    AMP             reduce using rule 87 (repetition_statement -> for_statement .)
    RETURN          reduce using rule 87 (repetition_statement -> for_statement .)
    READ            reduce using rule 87 (repetition_statement -> for_statement .)
    PRINT           reduce using rule 87 (repetition_statement -> for_statement .)
    IF              reduce using rule 87 (repetition_statement -> for_statement .)
    ID              reduce using rule 87 (repetition_statement -> for_statement .)
    WHILE           reduce using rule 87 (repetition_statement -> for_statement .)
    FOR             reduce using rule 87 (repetition_statement -> for_statement .)
    L_P             reduce using rule 87 (repetition_statement -> for_statement .)
    CTE_CHAR        reduce using rule 87 (repetition_statement -> for_statement .)
    CTE_F           reduce using rule 87 (repetition_statement -> for_statement .)
    CTE_I           reduce using rule 87 (repetition_statement -> for_statement .)
    CTE_NEG_I       reduce using rule 87 (repetition_statement -> for_statement .)
    R_B             reduce using rule 87 (repetition_statement -> for_statement .)


state 89

    (94) expression -> texp . generate_quad_1 op1
    (99) generate_quad_1 -> .

    OR              reduce using rule 99 (generate_quad_1 -> .)
    AMP             reduce using rule 99 (generate_quad_1 -> .)
    RETURN          reduce using rule 99 (generate_quad_1 -> .)
    READ            reduce using rule 99 (generate_quad_1 -> .)
    PRINT           reduce using rule 99 (generate_quad_1 -> .)
    IF              reduce using rule 99 (generate_quad_1 -> .)
    ID              reduce using rule 99 (generate_quad_1 -> .)
    WHILE           reduce using rule 99 (generate_quad_1 -> .)
    FOR             reduce using rule 99 (generate_quad_1 -> .)
    L_P             reduce using rule 99 (generate_quad_1 -> .)
    CTE_CHAR        reduce using rule 99 (generate_quad_1 -> .)
    CTE_F           reduce using rule 99 (generate_quad_1 -> .)
    CTE_I           reduce using rule 99 (generate_quad_1 -> .)
    CTE_NEG_I       reduce using rule 99 (generate_quad_1 -> .)
    R_B             reduce using rule 99 (generate_quad_1 -> .)
    R_P             reduce using rule 99 (generate_quad_1 -> .)
    SEMICOLON       reduce using rule 99 (generate_quad_1 -> .)
    COMA            reduce using rule 99 (generate_quad_1 -> .)
    TO              reduce using rule 99 (generate_quad_1 -> .)
    R_SB            reduce using rule 99 (generate_quad_1 -> .)
    DO              reduce using rule 99 (generate_quad_1 -> .)

    generate_quad_1                shift and go to state 114

state 90

    (92) while_statement -> WHILE . L_P breadcrumb expression R_P exp_type do_statement

    L_P             shift and go to state 115


state 91

    (88) for_statement -> FOR . id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement
    (27) id -> . ID set_id id_quad id1

    ID              shift and go to state 82

    id                             shift and go to state 116

state 92

    (95) texp -> gexp . generate_quad_2 op2
    (100) generate_quad_2 -> .

    AND             reduce using rule 100 (generate_quad_2 -> .)
    OR              reduce using rule 100 (generate_quad_2 -> .)
    AMP             reduce using rule 100 (generate_quad_2 -> .)
    RETURN          reduce using rule 100 (generate_quad_2 -> .)
    READ            reduce using rule 100 (generate_quad_2 -> .)
    PRINT           reduce using rule 100 (generate_quad_2 -> .)
    IF              reduce using rule 100 (generate_quad_2 -> .)
    ID              reduce using rule 100 (generate_quad_2 -> .)
    WHILE           reduce using rule 100 (generate_quad_2 -> .)
    FOR             reduce using rule 100 (generate_quad_2 -> .)
    L_P             reduce using rule 100 (generate_quad_2 -> .)
    CTE_CHAR        reduce using rule 100 (generate_quad_2 -> .)
    CTE_F           reduce using rule 100 (generate_quad_2 -> .)
    CTE_I           reduce using rule 100 (generate_quad_2 -> .)
    CTE_NEG_I       reduce using rule 100 (generate_quad_2 -> .)
    R_B             reduce using rule 100 (generate_quad_2 -> .)
    R_P             reduce using rule 100 (generate_quad_2 -> .)
    SEMICOLON       reduce using rule 100 (generate_quad_2 -> .)
    COMA            reduce using rule 100 (generate_quad_2 -> .)
    TO              reduce using rule 100 (generate_quad_2 -> .)
    R_SB            reduce using rule 100 (generate_quad_2 -> .)
    DO              reduce using rule 100 (generate_quad_2 -> .)

    generate_quad_2                shift and go to state 117

state 93

    (96) gexp -> mexp . generate_quad_3 op3aux
    (101) generate_quad_3 -> .

    LESSTHAN        reduce using rule 101 (generate_quad_3 -> .)
    LESSTHANEQ      reduce using rule 101 (generate_quad_3 -> .)
    GREATERTHAN     reduce using rule 101 (generate_quad_3 -> .)
    GREATERTHANEQ   reduce using rule 101 (generate_quad_3 -> .)
    EQ              reduce using rule 101 (generate_quad_3 -> .)
    DIFERENT        reduce using rule 101 (generate_quad_3 -> .)
    AND             reduce using rule 101 (generate_quad_3 -> .)
    OR              reduce using rule 101 (generate_quad_3 -> .)
    AMP             reduce using rule 101 (generate_quad_3 -> .)
    RETURN          reduce using rule 101 (generate_quad_3 -> .)
    READ            reduce using rule 101 (generate_quad_3 -> .)
    PRINT           reduce using rule 101 (generate_quad_3 -> .)
    IF              reduce using rule 101 (generate_quad_3 -> .)
    ID              reduce using rule 101 (generate_quad_3 -> .)
    WHILE           reduce using rule 101 (generate_quad_3 -> .)
    FOR             reduce using rule 101 (generate_quad_3 -> .)
    L_P             reduce using rule 101 (generate_quad_3 -> .)
    CTE_CHAR        reduce using rule 101 (generate_quad_3 -> .)
    CTE_F           reduce using rule 101 (generate_quad_3 -> .)
    CTE_I           reduce using rule 101 (generate_quad_3 -> .)
    CTE_NEG_I       reduce using rule 101 (generate_quad_3 -> .)
    R_B             reduce using rule 101 (generate_quad_3 -> .)
    R_P             reduce using rule 101 (generate_quad_3 -> .)
    SEMICOLON       reduce using rule 101 (generate_quad_3 -> .)
    COMA            reduce using rule 101 (generate_quad_3 -> .)
    TO              reduce using rule 101 (generate_quad_3 -> .)
    R_SB            reduce using rule 101 (generate_quad_3 -> .)
    DO              reduce using rule 101 (generate_quad_3 -> .)

    generate_quad_3                shift and go to state 118

state 94

    (97) mexp -> term . generate_quad_4 op4aux
    (102) generate_quad_4 -> .

    PLUS            reduce using rule 102 (generate_quad_4 -> .)
    MINUS           reduce using rule 102 (generate_quad_4 -> .)
    LESSTHAN        reduce using rule 102 (generate_quad_4 -> .)
    LESSTHANEQ      reduce using rule 102 (generate_quad_4 -> .)
    GREATERTHAN     reduce using rule 102 (generate_quad_4 -> .)
    GREATERTHANEQ   reduce using rule 102 (generate_quad_4 -> .)
    EQ              reduce using rule 102 (generate_quad_4 -> .)
    DIFERENT        reduce using rule 102 (generate_quad_4 -> .)
    AND             reduce using rule 102 (generate_quad_4 -> .)
    OR              reduce using rule 102 (generate_quad_4 -> .)
    AMP             reduce using rule 102 (generate_quad_4 -> .)
    RETURN          reduce using rule 102 (generate_quad_4 -> .)
    READ            reduce using rule 102 (generate_quad_4 -> .)
    PRINT           reduce using rule 102 (generate_quad_4 -> .)
    IF              reduce using rule 102 (generate_quad_4 -> .)
    ID              reduce using rule 102 (generate_quad_4 -> .)
    WHILE           reduce using rule 102 (generate_quad_4 -> .)
    FOR             reduce using rule 102 (generate_quad_4 -> .)
    L_P             reduce using rule 102 (generate_quad_4 -> .)
    CTE_CHAR        reduce using rule 102 (generate_quad_4 -> .)
    CTE_F           reduce using rule 102 (generate_quad_4 -> .)
    CTE_I           reduce using rule 102 (generate_quad_4 -> .)
    CTE_NEG_I       reduce using rule 102 (generate_quad_4 -> .)
    R_B             reduce using rule 102 (generate_quad_4 -> .)
    R_P             reduce using rule 102 (generate_quad_4 -> .)
    SEMICOLON       reduce using rule 102 (generate_quad_4 -> .)
    COMA            reduce using rule 102 (generate_quad_4 -> .)
    TO              reduce using rule 102 (generate_quad_4 -> .)
    R_SB            reduce using rule 102 (generate_quad_4 -> .)
    DO              reduce using rule 102 (generate_quad_4 -> .)

    generate_quad_4                shift and go to state 119

state 95

    (98) term -> fact . generate_quad_5 op5aux
    (103) generate_quad_5 -> .

    MULT            reduce using rule 103 (generate_quad_5 -> .)
    DIV             reduce using rule 103 (generate_quad_5 -> .)
    MOD             reduce using rule 103 (generate_quad_5 -> .)
    PLUS            reduce using rule 103 (generate_quad_5 -> .)
    MINUS           reduce using rule 103 (generate_quad_5 -> .)
    LESSTHAN        reduce using rule 103 (generate_quad_5 -> .)
    LESSTHANEQ      reduce using rule 103 (generate_quad_5 -> .)
    GREATERTHAN     reduce using rule 103 (generate_quad_5 -> .)
    GREATERTHANEQ   reduce using rule 103 (generate_quad_5 -> .)
    EQ              reduce using rule 103 (generate_quad_5 -> .)
    DIFERENT        reduce using rule 103 (generate_quad_5 -> .)
    AND             reduce using rule 103 (generate_quad_5 -> .)
    OR              reduce using rule 103 (generate_quad_5 -> .)
    AMP             reduce using rule 103 (generate_quad_5 -> .)
    RETURN          reduce using rule 103 (generate_quad_5 -> .)
    READ            reduce using rule 103 (generate_quad_5 -> .)
    PRINT           reduce using rule 103 (generate_quad_5 -> .)
    IF              reduce using rule 103 (generate_quad_5 -> .)
    ID              reduce using rule 103 (generate_quad_5 -> .)
    WHILE           reduce using rule 103 (generate_quad_5 -> .)
    FOR             reduce using rule 103 (generate_quad_5 -> .)
    L_P             reduce using rule 103 (generate_quad_5 -> .)
    CTE_CHAR        reduce using rule 103 (generate_quad_5 -> .)
    CTE_F           reduce using rule 103 (generate_quad_5 -> .)
    CTE_I           reduce using rule 103 (generate_quad_5 -> .)
    CTE_NEG_I       reduce using rule 103 (generate_quad_5 -> .)
    R_B             reduce using rule 103 (generate_quad_5 -> .)
    R_P             reduce using rule 103 (generate_quad_5 -> .)
    SEMICOLON       reduce using rule 103 (generate_quad_5 -> .)
    COMA            reduce using rule 103 (generate_quad_5 -> .)
    TO              reduce using rule 103 (generate_quad_5 -> .)
    R_SB            reduce using rule 103 (generate_quad_5 -> .)
    DO              reduce using rule 103 (generate_quad_5 -> .)

    generate_quad_5                shift and go to state 120

state 96

    (104) fact -> call_func_exp .

    MULT            reduce using rule 104 (fact -> call_func_exp .)
    DIV             reduce using rule 104 (fact -> call_func_exp .)
    MOD             reduce using rule 104 (fact -> call_func_exp .)
    PLUS            reduce using rule 104 (fact -> call_func_exp .)
    MINUS           reduce using rule 104 (fact -> call_func_exp .)
    LESSTHAN        reduce using rule 104 (fact -> call_func_exp .)
    LESSTHANEQ      reduce using rule 104 (fact -> call_func_exp .)
    GREATERTHAN     reduce using rule 104 (fact -> call_func_exp .)
    GREATERTHANEQ   reduce using rule 104 (fact -> call_func_exp .)
    EQ              reduce using rule 104 (fact -> call_func_exp .)
    DIFERENT        reduce using rule 104 (fact -> call_func_exp .)
    AND             reduce using rule 104 (fact -> call_func_exp .)
    OR              reduce using rule 104 (fact -> call_func_exp .)
    AMP             reduce using rule 104 (fact -> call_func_exp .)
    RETURN          reduce using rule 104 (fact -> call_func_exp .)
    READ            reduce using rule 104 (fact -> call_func_exp .)
    PRINT           reduce using rule 104 (fact -> call_func_exp .)
    IF              reduce using rule 104 (fact -> call_func_exp .)
    ID              reduce using rule 104 (fact -> call_func_exp .)
    WHILE           reduce using rule 104 (fact -> call_func_exp .)
    FOR             reduce using rule 104 (fact -> call_func_exp .)
    L_P             reduce using rule 104 (fact -> call_func_exp .)
    CTE_CHAR        reduce using rule 104 (fact -> call_func_exp .)
    CTE_F           reduce using rule 104 (fact -> call_func_exp .)
    CTE_I           reduce using rule 104 (fact -> call_func_exp .)
    CTE_NEG_I       reduce using rule 104 (fact -> call_func_exp .)
    R_B             reduce using rule 104 (fact -> call_func_exp .)
    R_P             reduce using rule 104 (fact -> call_func_exp .)
    SEMICOLON       reduce using rule 104 (fact -> call_func_exp .)
    COMA            reduce using rule 104 (fact -> call_func_exp .)
    TO              reduce using rule 104 (fact -> call_func_exp .)
    R_SB            reduce using rule 104 (fact -> call_func_exp .)
    DO              reduce using rule 104 (fact -> call_func_exp .)


state 97

    (107) fact -> cte .

    MULT            reduce using rule 107 (fact -> cte .)
    DIV             reduce using rule 107 (fact -> cte .)
    MOD             reduce using rule 107 (fact -> cte .)
    PLUS            reduce using rule 107 (fact -> cte .)
    MINUS           reduce using rule 107 (fact -> cte .)
    LESSTHAN        reduce using rule 107 (fact -> cte .)
    LESSTHANEQ      reduce using rule 107 (fact -> cte .)
    GREATERTHAN     reduce using rule 107 (fact -> cte .)
    GREATERTHANEQ   reduce using rule 107 (fact -> cte .)
    EQ              reduce using rule 107 (fact -> cte .)
    DIFERENT        reduce using rule 107 (fact -> cte .)
    AND             reduce using rule 107 (fact -> cte .)
    OR              reduce using rule 107 (fact -> cte .)
    AMP             reduce using rule 107 (fact -> cte .)
    RETURN          reduce using rule 107 (fact -> cte .)
    READ            reduce using rule 107 (fact -> cte .)
    PRINT           reduce using rule 107 (fact -> cte .)
    IF              reduce using rule 107 (fact -> cte .)
    ID              reduce using rule 107 (fact -> cte .)
    WHILE           reduce using rule 107 (fact -> cte .)
    FOR             reduce using rule 107 (fact -> cte .)
    L_P             reduce using rule 107 (fact -> cte .)
    CTE_CHAR        reduce using rule 107 (fact -> cte .)
    CTE_F           reduce using rule 107 (fact -> cte .)
    CTE_I           reduce using rule 107 (fact -> cte .)
    CTE_NEG_I       reduce using rule 107 (fact -> cte .)
    R_B             reduce using rule 107 (fact -> cte .)
    R_P             reduce using rule 107 (fact -> cte .)
    SEMICOLON       reduce using rule 107 (fact -> cte .)
    COMA            reduce using rule 107 (fact -> cte .)
    TO              reduce using rule 107 (fact -> cte .)
    R_SB            reduce using rule 107 (fact -> cte .)
    DO              reduce using rule 107 (fact -> cte .)


state 98

    (111) cte -> CTE_CHAR . add_cte_char
    (117) add_cte_char -> .

    MULT            reduce using rule 117 (add_cte_char -> .)
    DIV             reduce using rule 117 (add_cte_char -> .)
    MOD             reduce using rule 117 (add_cte_char -> .)
    PLUS            reduce using rule 117 (add_cte_char -> .)
    MINUS           reduce using rule 117 (add_cte_char -> .)
    LESSTHAN        reduce using rule 117 (add_cte_char -> .)
    LESSTHANEQ      reduce using rule 117 (add_cte_char -> .)
    GREATERTHAN     reduce using rule 117 (add_cte_char -> .)
    GREATERTHANEQ   reduce using rule 117 (add_cte_char -> .)
    EQ              reduce using rule 117 (add_cte_char -> .)
    DIFERENT        reduce using rule 117 (add_cte_char -> .)
    AND             reduce using rule 117 (add_cte_char -> .)
    OR              reduce using rule 117 (add_cte_char -> .)
    AMP             reduce using rule 117 (add_cte_char -> .)
    RETURN          reduce using rule 117 (add_cte_char -> .)
    READ            reduce using rule 117 (add_cte_char -> .)
    PRINT           reduce using rule 117 (add_cte_char -> .)
    IF              reduce using rule 117 (add_cte_char -> .)
    ID              reduce using rule 117 (add_cte_char -> .)
    WHILE           reduce using rule 117 (add_cte_char -> .)
    FOR             reduce using rule 117 (add_cte_char -> .)
    L_P             reduce using rule 117 (add_cte_char -> .)
    CTE_CHAR        reduce using rule 117 (add_cte_char -> .)
    CTE_F           reduce using rule 117 (add_cte_char -> .)
    CTE_I           reduce using rule 117 (add_cte_char -> .)
    CTE_NEG_I       reduce using rule 117 (add_cte_char -> .)
    R_B             reduce using rule 117 (add_cte_char -> .)
    R_P             reduce using rule 117 (add_cte_char -> .)
    SEMICOLON       reduce using rule 117 (add_cte_char -> .)
    COMA            reduce using rule 117 (add_cte_char -> .)
    TO              reduce using rule 117 (add_cte_char -> .)
    R_SB            reduce using rule 117 (add_cte_char -> .)
    DO              reduce using rule 117 (add_cte_char -> .)

    add_cte_char                   shift and go to state 121

state 99

    (112) cte -> CTE_F . add_cte_float
    (116) add_cte_float -> .

    MULT            reduce using rule 116 (add_cte_float -> .)
    DIV             reduce using rule 116 (add_cte_float -> .)
    MOD             reduce using rule 116 (add_cte_float -> .)
    PLUS            reduce using rule 116 (add_cte_float -> .)
    MINUS           reduce using rule 116 (add_cte_float -> .)
    LESSTHAN        reduce using rule 116 (add_cte_float -> .)
    LESSTHANEQ      reduce using rule 116 (add_cte_float -> .)
    GREATERTHAN     reduce using rule 116 (add_cte_float -> .)
    GREATERTHANEQ   reduce using rule 116 (add_cte_float -> .)
    EQ              reduce using rule 116 (add_cte_float -> .)
    DIFERENT        reduce using rule 116 (add_cte_float -> .)
    AND             reduce using rule 116 (add_cte_float -> .)
    OR              reduce using rule 116 (add_cte_float -> .)
    AMP             reduce using rule 116 (add_cte_float -> .)
    RETURN          reduce using rule 116 (add_cte_float -> .)
    READ            reduce using rule 116 (add_cte_float -> .)
    PRINT           reduce using rule 116 (add_cte_float -> .)
    IF              reduce using rule 116 (add_cte_float -> .)
    ID              reduce using rule 116 (add_cte_float -> .)
    WHILE           reduce using rule 116 (add_cte_float -> .)
    FOR             reduce using rule 116 (add_cte_float -> .)
    L_P             reduce using rule 116 (add_cte_float -> .)
    CTE_CHAR        reduce using rule 116 (add_cte_float -> .)
    CTE_F           reduce using rule 116 (add_cte_float -> .)
    CTE_I           reduce using rule 116 (add_cte_float -> .)
    CTE_NEG_I       reduce using rule 116 (add_cte_float -> .)
    R_B             reduce using rule 116 (add_cte_float -> .)
    R_P             reduce using rule 116 (add_cte_float -> .)
    SEMICOLON       reduce using rule 116 (add_cte_float -> .)
    COMA            reduce using rule 116 (add_cte_float -> .)
    TO              reduce using rule 116 (add_cte_float -> .)
    R_SB            reduce using rule 116 (add_cte_float -> .)
    DO              reduce using rule 116 (add_cte_float -> .)

    add_cte_float                  shift and go to state 122

state 100

    (113) cte -> CTE_I . add_cte_int
    (115) add_cte_int -> .

    MULT            reduce using rule 115 (add_cte_int -> .)
    DIV             reduce using rule 115 (add_cte_int -> .)
    MOD             reduce using rule 115 (add_cte_int -> .)
    PLUS            reduce using rule 115 (add_cte_int -> .)
    MINUS           reduce using rule 115 (add_cte_int -> .)
    LESSTHAN        reduce using rule 115 (add_cte_int -> .)
    LESSTHANEQ      reduce using rule 115 (add_cte_int -> .)
    GREATERTHAN     reduce using rule 115 (add_cte_int -> .)
    GREATERTHANEQ   reduce using rule 115 (add_cte_int -> .)
    EQ              reduce using rule 115 (add_cte_int -> .)
    DIFERENT        reduce using rule 115 (add_cte_int -> .)
    AND             reduce using rule 115 (add_cte_int -> .)
    OR              reduce using rule 115 (add_cte_int -> .)
    AMP             reduce using rule 115 (add_cte_int -> .)
    RETURN          reduce using rule 115 (add_cte_int -> .)
    READ            reduce using rule 115 (add_cte_int -> .)
    PRINT           reduce using rule 115 (add_cte_int -> .)
    IF              reduce using rule 115 (add_cte_int -> .)
    ID              reduce using rule 115 (add_cte_int -> .)
    WHILE           reduce using rule 115 (add_cte_int -> .)
    FOR             reduce using rule 115 (add_cte_int -> .)
    L_P             reduce using rule 115 (add_cte_int -> .)
    CTE_CHAR        reduce using rule 115 (add_cte_int -> .)
    CTE_F           reduce using rule 115 (add_cte_int -> .)
    CTE_I           reduce using rule 115 (add_cte_int -> .)
    CTE_NEG_I       reduce using rule 115 (add_cte_int -> .)
    R_B             reduce using rule 115 (add_cte_int -> .)
    R_P             reduce using rule 115 (add_cte_int -> .)
    SEMICOLON       reduce using rule 115 (add_cte_int -> .)
    COMA            reduce using rule 115 (add_cte_int -> .)
    TO              reduce using rule 115 (add_cte_int -> .)
    R_SB            reduce using rule 115 (add_cte_int -> .)
    DO              reduce using rule 115 (add_cte_int -> .)

    add_cte_int                    shift and go to state 123

state 101

    (114) cte -> CTE_NEG_I . add_cte_int
    (115) add_cte_int -> .

    MULT            reduce using rule 115 (add_cte_int -> .)
    DIV             reduce using rule 115 (add_cte_int -> .)
    MOD             reduce using rule 115 (add_cte_int -> .)
    PLUS            reduce using rule 115 (add_cte_int -> .)
    MINUS           reduce using rule 115 (add_cte_int -> .)
    LESSTHAN        reduce using rule 115 (add_cte_int -> .)
    LESSTHANEQ      reduce using rule 115 (add_cte_int -> .)
    GREATERTHAN     reduce using rule 115 (add_cte_int -> .)
    GREATERTHANEQ   reduce using rule 115 (add_cte_int -> .)
    EQ              reduce using rule 115 (add_cte_int -> .)
    DIFERENT        reduce using rule 115 (add_cte_int -> .)
    AND             reduce using rule 115 (add_cte_int -> .)
    OR              reduce using rule 115 (add_cte_int -> .)
    AMP             reduce using rule 115 (add_cte_int -> .)
    RETURN          reduce using rule 115 (add_cte_int -> .)
    READ            reduce using rule 115 (add_cte_int -> .)
    PRINT           reduce using rule 115 (add_cte_int -> .)
    IF              reduce using rule 115 (add_cte_int -> .)
    ID              reduce using rule 115 (add_cte_int -> .)
    WHILE           reduce using rule 115 (add_cte_int -> .)
    FOR             reduce using rule 115 (add_cte_int -> .)
    L_P             reduce using rule 115 (add_cte_int -> .)
    CTE_CHAR        reduce using rule 115 (add_cte_int -> .)
    CTE_F           reduce using rule 115 (add_cte_int -> .)
    CTE_I           reduce using rule 115 (add_cte_int -> .)
    CTE_NEG_I       reduce using rule 115 (add_cte_int -> .)
    R_B             reduce using rule 115 (add_cte_int -> .)
    R_P             reduce using rule 115 (add_cte_int -> .)
    SEMICOLON       reduce using rule 115 (add_cte_int -> .)
    COMA            reduce using rule 115 (add_cte_int -> .)
    TO              reduce using rule 115 (add_cte_int -> .)
    R_SB            reduce using rule 115 (add_cte_int -> .)
    DO              reduce using rule 115 (add_cte_int -> .)

    add_cte_int                    shift and go to state 124

state 102

    (38) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration . start_func L_B statements R_B
    (41) start_func -> .

    L_B             reduce using rule 41 (start_func -> .)

    start_func                     shift and go to state 125

state 103

    (22) dec_id2 -> L_SB CTE_I . set_array_2 R_SB
    (26) set_array_2 -> .

    R_SB            reduce using rule 26 (set_array_2 -> .)

    set_array_2                    shift and go to state 126

state 104

    (106) fact -> L_P add_fake . expression R_P remove_fake
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    expression                     shift and go to state 127
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 105

    (3) main -> MAIN L_P params R_P var_declaration L_B main_start statements R_B .

    $end            reduce using rule 3 (main -> MAIN L_P params R_P var_declaration L_B main_start statements R_B .)


state 106

    (49) statements -> statement statements .

    R_B             reduce using rule 49 (statements -> statement statements .)


state 107

    (59) assignation -> id EQUAL . expression SEMICOLON
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    id                             shift and go to state 128
    expression                     shift and go to state 130
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    cte                            shift and go to state 97

state 108

    (67) call_func -> AMP ID . call_func_era L_P args R_P SEMICOLON
    (68) call_func_exp -> AMP ID . call_func_era L_P args R_P
    (69) call_func_era -> .

    L_P             reduce using rule 69 (call_func_era -> .)

    call_func_era                  shift and go to state 131

state 109

    (27) id -> ID set_id . id_quad id1
    (110) id_quad -> .

    L_SB            reduce using rule 110 (id_quad -> .)
    EQUAL           reduce using rule 110 (id_quad -> .)
    MULT            reduce using rule 110 (id_quad -> .)
    DIV             reduce using rule 110 (id_quad -> .)
    MOD             reduce using rule 110 (id_quad -> .)
    PLUS            reduce using rule 110 (id_quad -> .)
    MINUS           reduce using rule 110 (id_quad -> .)
    LESSTHAN        reduce using rule 110 (id_quad -> .)
    LESSTHANEQ      reduce using rule 110 (id_quad -> .)
    GREATERTHAN     reduce using rule 110 (id_quad -> .)
    GREATERTHANEQ   reduce using rule 110 (id_quad -> .)
    EQ              reduce using rule 110 (id_quad -> .)
    DIFERENT        reduce using rule 110 (id_quad -> .)
    AND             reduce using rule 110 (id_quad -> .)
    OR              reduce using rule 110 (id_quad -> .)
    AMP             reduce using rule 110 (id_quad -> .)
    RETURN          reduce using rule 110 (id_quad -> .)
    READ            reduce using rule 110 (id_quad -> .)
    PRINT           reduce using rule 110 (id_quad -> .)
    IF              reduce using rule 110 (id_quad -> .)
    ID              reduce using rule 110 (id_quad -> .)
    WHILE           reduce using rule 110 (id_quad -> .)
    FOR             reduce using rule 110 (id_quad -> .)
    L_P             reduce using rule 110 (id_quad -> .)
    CTE_CHAR        reduce using rule 110 (id_quad -> .)
    CTE_F           reduce using rule 110 (id_quad -> .)
    CTE_I           reduce using rule 110 (id_quad -> .)
    CTE_NEG_I       reduce using rule 110 (id_quad -> .)
    R_B             reduce using rule 110 (id_quad -> .)
    R_P             reduce using rule 110 (id_quad -> .)
    SEMICOLON       reduce using rule 110 (id_quad -> .)
    COMA            reduce using rule 110 (id_quad -> .)
    TO              reduce using rule 110 (id_quad -> .)
    R_SB            reduce using rule 110 (id_quad -> .)
    DO              reduce using rule 110 (id_quad -> .)

    id_quad                        shift and go to state 132

state 110

    (70) return_func -> RETURN L_P . expression R_P SEMICOLON
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    expression                     shift and go to state 133
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 111

    (71) read -> READ L_P . read_args R_P SEMICOLON
    (72) read_args -> . add_fake expression remove_fake read_args1
    (108) add_fake -> .

    L_P             reduce using rule 108 (add_fake -> .)
    AMP             reduce using rule 108 (add_fake -> .)
    ID              reduce using rule 108 (add_fake -> .)
    CTE_CHAR        reduce using rule 108 (add_fake -> .)
    CTE_F           reduce using rule 108 (add_fake -> .)
    CTE_I           reduce using rule 108 (add_fake -> .)
    CTE_NEG_I       reduce using rule 108 (add_fake -> .)

    read_args                      shift and go to state 134
    add_fake                       shift and go to state 135

state 112

    (75) write -> PRINT L_P . write_args R_P SEMICOLON
    (76) write_args -> . write_args2 write_args1
    (79) write_args2 -> . add_fake expression remove_fake
    (80) write_args2 -> . CTE_STRING add_cte_string
    (108) add_fake -> .

    CTE_STRING      shift and go to state 139
    L_P             reduce using rule 108 (add_fake -> .)
    AMP             reduce using rule 108 (add_fake -> .)
    ID              reduce using rule 108 (add_fake -> .)
    CTE_CHAR        reduce using rule 108 (add_fake -> .)
    CTE_F           reduce using rule 108 (add_fake -> .)
    CTE_I           reduce using rule 108 (add_fake -> .)
    CTE_NEG_I       reduce using rule 108 (add_fake -> .)

    write_args                     shift and go to state 136
    write_args2                    shift and go to state 137
    add_fake                       shift and go to state 138

state 113

    (81) decision_statement -> IF L_P . expression R_P exp_type L_B statements R_B decision_statement1
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    expression                     shift and go to state 140
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 114

    (94) expression -> texp generate_quad_1 . op1
    (120) op1 -> . OR add_operator expression
    (121) op1 -> . empty
    (141) empty -> .

    OR              shift and go to state 142
    AMP             reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    PRINT           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    L_P             reduce using rule 141 (empty -> .)
    CTE_CHAR        reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_NEG_I       reduce using rule 141 (empty -> .)
    R_B             reduce using rule 141 (empty -> .)
    R_P             reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)
    R_SB            reduce using rule 141 (empty -> .)
    DO              reduce using rule 141 (empty -> .)

    op1                            shift and go to state 141
    empty                          shift and go to state 143

state 115

    (92) while_statement -> WHILE L_P . breadcrumb expression R_P exp_type do_statement
    (91) breadcrumb -> .

    L_P             reduce using rule 91 (breadcrumb -> .)
    AMP             reduce using rule 91 (breadcrumb -> .)
    ID              reduce using rule 91 (breadcrumb -> .)
    CTE_CHAR        reduce using rule 91 (breadcrumb -> .)
    CTE_F           reduce using rule 91 (breadcrumb -> .)
    CTE_I           reduce using rule 91 (breadcrumb -> .)
    CTE_NEG_I       reduce using rule 91 (breadcrumb -> .)

    breadcrumb                     shift and go to state 144

state 116

    (88) for_statement -> FOR id . for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement
    (89) for_id -> .

    EQUAL           reduce using rule 89 (for_id -> .)

    for_id                         shift and go to state 145

state 117

    (95) texp -> gexp generate_quad_2 . op2
    (122) op2 -> . AND add_operator texp
    (123) op2 -> . empty
    (141) empty -> .

    AND             shift and go to state 147
    OR              reduce using rule 141 (empty -> .)
    AMP             reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    PRINT           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    L_P             reduce using rule 141 (empty -> .)
    CTE_CHAR        reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_NEG_I       reduce using rule 141 (empty -> .)
    R_B             reduce using rule 141 (empty -> .)
    R_P             reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)
    R_SB            reduce using rule 141 (empty -> .)
    DO              reduce using rule 141 (empty -> .)

    op2                            shift and go to state 146
    empty                          shift and go to state 148

state 118

    (96) gexp -> mexp generate_quad_3 . op3aux
    (130) op3aux -> . op3 gexp
    (131) op3aux -> . empty
    (124) op3 -> . LESSTHAN
    (125) op3 -> . LESSTHANEQ
    (126) op3 -> . GREATERTHAN
    (127) op3 -> . GREATERTHANEQ
    (128) op3 -> . EQ
    (129) op3 -> . DIFERENT
    (141) empty -> .

    LESSTHAN        shift and go to state 152
    LESSTHANEQ      shift and go to state 153
    GREATERTHAN     shift and go to state 154
    GREATERTHANEQ   shift and go to state 155
    EQ              shift and go to state 156
    DIFERENT        shift and go to state 157
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    AMP             reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    PRINT           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    L_P             reduce using rule 141 (empty -> .)
    CTE_CHAR        reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_NEG_I       reduce using rule 141 (empty -> .)
    R_B             reduce using rule 141 (empty -> .)
    R_P             reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)
    R_SB            reduce using rule 141 (empty -> .)
    DO              reduce using rule 141 (empty -> .)

    op3aux                         shift and go to state 149
    op3                            shift and go to state 150
    empty                          shift and go to state 151

state 119

    (97) mexp -> term generate_quad_4 . op4aux
    (134) op4aux -> . op4 mexp
    (135) op4aux -> . empty
    (132) op4 -> . PLUS
    (133) op4 -> . MINUS
    (141) empty -> .

    PLUS            shift and go to state 161
    MINUS           shift and go to state 162
    LESSTHAN        reduce using rule 141 (empty -> .)
    LESSTHANEQ      reduce using rule 141 (empty -> .)
    GREATERTHAN     reduce using rule 141 (empty -> .)
    GREATERTHANEQ   reduce using rule 141 (empty -> .)
    EQ              reduce using rule 141 (empty -> .)
    DIFERENT        reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    AMP             reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    PRINT           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    L_P             reduce using rule 141 (empty -> .)
    CTE_CHAR        reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_NEG_I       reduce using rule 141 (empty -> .)
    R_B             reduce using rule 141 (empty -> .)
    R_P             reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)
    R_SB            reduce using rule 141 (empty -> .)
    DO              reduce using rule 141 (empty -> .)

    op4aux                         shift and go to state 158
    op4                            shift and go to state 159
    empty                          shift and go to state 160

state 120

    (98) term -> fact generate_quad_5 . op5aux
    (139) op5aux -> . op5 term
    (140) op5aux -> . empty
    (136) op5 -> . MULT
    (137) op5 -> . DIV
    (138) op5 -> . MOD
    (141) empty -> .

    MULT            shift and go to state 166
    DIV             shift and go to state 167
    MOD             shift and go to state 168
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LESSTHAN        reduce using rule 141 (empty -> .)
    LESSTHANEQ      reduce using rule 141 (empty -> .)
    GREATERTHAN     reduce using rule 141 (empty -> .)
    GREATERTHANEQ   reduce using rule 141 (empty -> .)
    EQ              reduce using rule 141 (empty -> .)
    DIFERENT        reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    AMP             reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    PRINT           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    L_P             reduce using rule 141 (empty -> .)
    CTE_CHAR        reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_NEG_I       reduce using rule 141 (empty -> .)
    R_B             reduce using rule 141 (empty -> .)
    R_P             reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)
    R_SB            reduce using rule 141 (empty -> .)
    DO              reduce using rule 141 (empty -> .)

    op5aux                         shift and go to state 163
    op5                            shift and go to state 164
    empty                          shift and go to state 165

state 121

    (111) cte -> CTE_CHAR add_cte_char .

    MULT            reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    DIV             reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    MOD             reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    PLUS            reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    MINUS           reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    LESSTHAN        reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    LESSTHANEQ      reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    GREATERTHAN     reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    GREATERTHANEQ   reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    EQ              reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    DIFERENT        reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    AND             reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    OR              reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    AMP             reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    RETURN          reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    READ            reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    PRINT           reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    IF              reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    ID              reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    WHILE           reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    FOR             reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    L_P             reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    CTE_CHAR        reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    CTE_F           reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    CTE_I           reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    CTE_NEG_I       reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    R_B             reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    R_P             reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    SEMICOLON       reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    COMA            reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    TO              reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    R_SB            reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)
    DO              reduce using rule 111 (cte -> CTE_CHAR add_cte_char .)


state 122

    (112) cte -> CTE_F add_cte_float .

    MULT            reduce using rule 112 (cte -> CTE_F add_cte_float .)
    DIV             reduce using rule 112 (cte -> CTE_F add_cte_float .)
    MOD             reduce using rule 112 (cte -> CTE_F add_cte_float .)
    PLUS            reduce using rule 112 (cte -> CTE_F add_cte_float .)
    MINUS           reduce using rule 112 (cte -> CTE_F add_cte_float .)
    LESSTHAN        reduce using rule 112 (cte -> CTE_F add_cte_float .)
    LESSTHANEQ      reduce using rule 112 (cte -> CTE_F add_cte_float .)
    GREATERTHAN     reduce using rule 112 (cte -> CTE_F add_cte_float .)
    GREATERTHANEQ   reduce using rule 112 (cte -> CTE_F add_cte_float .)
    EQ              reduce using rule 112 (cte -> CTE_F add_cte_float .)
    DIFERENT        reduce using rule 112 (cte -> CTE_F add_cte_float .)
    AND             reduce using rule 112 (cte -> CTE_F add_cte_float .)
    OR              reduce using rule 112 (cte -> CTE_F add_cte_float .)
    AMP             reduce using rule 112 (cte -> CTE_F add_cte_float .)
    RETURN          reduce using rule 112 (cte -> CTE_F add_cte_float .)
    READ            reduce using rule 112 (cte -> CTE_F add_cte_float .)
    PRINT           reduce using rule 112 (cte -> CTE_F add_cte_float .)
    IF              reduce using rule 112 (cte -> CTE_F add_cte_float .)
    ID              reduce using rule 112 (cte -> CTE_F add_cte_float .)
    WHILE           reduce using rule 112 (cte -> CTE_F add_cte_float .)
    FOR             reduce using rule 112 (cte -> CTE_F add_cte_float .)
    L_P             reduce using rule 112 (cte -> CTE_F add_cte_float .)
    CTE_CHAR        reduce using rule 112 (cte -> CTE_F add_cte_float .)
    CTE_F           reduce using rule 112 (cte -> CTE_F add_cte_float .)
    CTE_I           reduce using rule 112 (cte -> CTE_F add_cte_float .)
    CTE_NEG_I       reduce using rule 112 (cte -> CTE_F add_cte_float .)
    R_B             reduce using rule 112 (cte -> CTE_F add_cte_float .)
    R_P             reduce using rule 112 (cte -> CTE_F add_cte_float .)
    SEMICOLON       reduce using rule 112 (cte -> CTE_F add_cte_float .)
    COMA            reduce using rule 112 (cte -> CTE_F add_cte_float .)
    TO              reduce using rule 112 (cte -> CTE_F add_cte_float .)
    R_SB            reduce using rule 112 (cte -> CTE_F add_cte_float .)
    DO              reduce using rule 112 (cte -> CTE_F add_cte_float .)


state 123

    (113) cte -> CTE_I add_cte_int .

    MULT            reduce using rule 113 (cte -> CTE_I add_cte_int .)
    DIV             reduce using rule 113 (cte -> CTE_I add_cte_int .)
    MOD             reduce using rule 113 (cte -> CTE_I add_cte_int .)
    PLUS            reduce using rule 113 (cte -> CTE_I add_cte_int .)
    MINUS           reduce using rule 113 (cte -> CTE_I add_cte_int .)
    LESSTHAN        reduce using rule 113 (cte -> CTE_I add_cte_int .)
    LESSTHANEQ      reduce using rule 113 (cte -> CTE_I add_cte_int .)
    GREATERTHAN     reduce using rule 113 (cte -> CTE_I add_cte_int .)
    GREATERTHANEQ   reduce using rule 113 (cte -> CTE_I add_cte_int .)
    EQ              reduce using rule 113 (cte -> CTE_I add_cte_int .)
    DIFERENT        reduce using rule 113 (cte -> CTE_I add_cte_int .)
    AND             reduce using rule 113 (cte -> CTE_I add_cte_int .)
    OR              reduce using rule 113 (cte -> CTE_I add_cte_int .)
    AMP             reduce using rule 113 (cte -> CTE_I add_cte_int .)
    RETURN          reduce using rule 113 (cte -> CTE_I add_cte_int .)
    READ            reduce using rule 113 (cte -> CTE_I add_cte_int .)
    PRINT           reduce using rule 113 (cte -> CTE_I add_cte_int .)
    IF              reduce using rule 113 (cte -> CTE_I add_cte_int .)
    ID              reduce using rule 113 (cte -> CTE_I add_cte_int .)
    WHILE           reduce using rule 113 (cte -> CTE_I add_cte_int .)
    FOR             reduce using rule 113 (cte -> CTE_I add_cte_int .)
    L_P             reduce using rule 113 (cte -> CTE_I add_cte_int .)
    CTE_CHAR        reduce using rule 113 (cte -> CTE_I add_cte_int .)
    CTE_F           reduce using rule 113 (cte -> CTE_I add_cte_int .)
    CTE_I           reduce using rule 113 (cte -> CTE_I add_cte_int .)
    CTE_NEG_I       reduce using rule 113 (cte -> CTE_I add_cte_int .)
    R_B             reduce using rule 113 (cte -> CTE_I add_cte_int .)
    R_P             reduce using rule 113 (cte -> CTE_I add_cte_int .)
    SEMICOLON       reduce using rule 113 (cte -> CTE_I add_cte_int .)
    COMA            reduce using rule 113 (cte -> CTE_I add_cte_int .)
    TO              reduce using rule 113 (cte -> CTE_I add_cte_int .)
    R_SB            reduce using rule 113 (cte -> CTE_I add_cte_int .)
    DO              reduce using rule 113 (cte -> CTE_I add_cte_int .)


state 124

    (114) cte -> CTE_NEG_I add_cte_int .

    MULT            reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    DIV             reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    MOD             reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    PLUS            reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    MINUS           reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    LESSTHAN        reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    LESSTHANEQ      reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    GREATERTHAN     reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    GREATERTHANEQ   reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    EQ              reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    DIFERENT        reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    AND             reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    OR              reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    AMP             reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    RETURN          reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    READ            reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    PRINT           reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    IF              reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    ID              reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    WHILE           reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    FOR             reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    L_P             reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    CTE_CHAR        reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    CTE_F           reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    CTE_I           reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    CTE_NEG_I       reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    R_B             reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    R_P             reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    SEMICOLON       reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    COMA            reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    TO              reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    R_SB            reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)
    DO              reduce using rule 114 (cte -> CTE_NEG_I add_cte_int .)


state 125

    (38) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func . L_B statements R_B

    L_B             shift and go to state 169


state 126

    (22) dec_id2 -> L_SB CTE_I set_array_2 . R_SB

    R_SB            shift and go to state 170


state 127

    (106) fact -> L_P add_fake expression . R_P remove_fake

    R_P             shift and go to state 171


state 128

    (105) fact -> id .

    MULT            reduce using rule 105 (fact -> id .)
    DIV             reduce using rule 105 (fact -> id .)
    MOD             reduce using rule 105 (fact -> id .)
    PLUS            reduce using rule 105 (fact -> id .)
    MINUS           reduce using rule 105 (fact -> id .)
    LESSTHAN        reduce using rule 105 (fact -> id .)
    LESSTHANEQ      reduce using rule 105 (fact -> id .)
    GREATERTHAN     reduce using rule 105 (fact -> id .)
    GREATERTHANEQ   reduce using rule 105 (fact -> id .)
    EQ              reduce using rule 105 (fact -> id .)
    DIFERENT        reduce using rule 105 (fact -> id .)
    AND             reduce using rule 105 (fact -> id .)
    OR              reduce using rule 105 (fact -> id .)
    R_P             reduce using rule 105 (fact -> id .)
    SEMICOLON       reduce using rule 105 (fact -> id .)
    COMA            reduce using rule 105 (fact -> id .)
    AMP             reduce using rule 105 (fact -> id .)
    RETURN          reduce using rule 105 (fact -> id .)
    READ            reduce using rule 105 (fact -> id .)
    PRINT           reduce using rule 105 (fact -> id .)
    IF              reduce using rule 105 (fact -> id .)
    ID              reduce using rule 105 (fact -> id .)
    WHILE           reduce using rule 105 (fact -> id .)
    FOR             reduce using rule 105 (fact -> id .)
    L_P             reduce using rule 105 (fact -> id .)
    CTE_CHAR        reduce using rule 105 (fact -> id .)
    CTE_F           reduce using rule 105 (fact -> id .)
    CTE_I           reduce using rule 105 (fact -> id .)
    CTE_NEG_I       reduce using rule 105 (fact -> id .)
    R_B             reduce using rule 105 (fact -> id .)
    TO              reduce using rule 105 (fact -> id .)
    R_SB            reduce using rule 105 (fact -> id .)
    DO              reduce using rule 105 (fact -> id .)


state 129

    (68) call_func_exp -> AMP . ID call_func_era L_P args R_P

    ID              shift and go to state 172


state 130

    (59) assignation -> id EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 173


state 131

    (67) call_func -> AMP ID call_func_era . L_P args R_P SEMICOLON
    (68) call_func_exp -> AMP ID call_func_era . L_P args R_P

    L_P             shift and go to state 174


state 132

    (27) id -> ID set_id id_quad . id1
    (29) id1 -> . verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base
    (30) id1 -> . empty
    (33) verify_dim -> .
    (141) empty -> .

    L_SB            reduce using rule 33 (verify_dim -> .)
    EQUAL           reduce using rule 141 (empty -> .)
    MULT            reduce using rule 141 (empty -> .)
    DIV             reduce using rule 141 (empty -> .)
    MOD             reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LESSTHAN        reduce using rule 141 (empty -> .)
    LESSTHANEQ      reduce using rule 141 (empty -> .)
    GREATERTHAN     reduce using rule 141 (empty -> .)
    GREATERTHANEQ   reduce using rule 141 (empty -> .)
    EQ              reduce using rule 141 (empty -> .)
    DIFERENT        reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    AMP             reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    PRINT           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    L_P             reduce using rule 141 (empty -> .)
    CTE_CHAR        reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_NEG_I       reduce using rule 141 (empty -> .)
    R_B             reduce using rule 141 (empty -> .)
    R_P             reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)
    R_SB            reduce using rule 141 (empty -> .)
    DO              reduce using rule 141 (empty -> .)

    id1                            shift and go to state 175
    verify_dim                     shift and go to state 176
    empty                          shift and go to state 177

state 133

    (70) return_func -> RETURN L_P expression . R_P SEMICOLON

    R_P             shift and go to state 178


state 134

    (71) read -> READ L_P read_args . R_P SEMICOLON

    R_P             shift and go to state 179


state 135

    (72) read_args -> add_fake . expression remove_fake read_args1
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    expression                     shift and go to state 180
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 136

    (75) write -> PRINT L_P write_args . R_P SEMICOLON

    R_P             shift and go to state 181


state 137

    (76) write_args -> write_args2 . write_args1
    (77) write_args1 -> . COMA write_args2 write_args1
    (78) write_args1 -> . empty
    (141) empty -> .

    COMA            shift and go to state 183
    R_P             reduce using rule 141 (empty -> .)

    write_args1                    shift and go to state 182
    empty                          shift and go to state 184

state 138

    (79) write_args2 -> add_fake . expression remove_fake
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    expression                     shift and go to state 185
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 139

    (80) write_args2 -> CTE_STRING . add_cte_string
    (118) add_cte_string -> .

    COMA            reduce using rule 118 (add_cte_string -> .)
    R_P             reduce using rule 118 (add_cte_string -> .)

    add_cte_string                 shift and go to state 186

state 140

    (81) decision_statement -> IF L_P expression . R_P exp_type L_B statements R_B decision_statement1

    R_P             shift and go to state 187


state 141

    (94) expression -> texp generate_quad_1 op1 .

    AMP             reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    RETURN          reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    READ            reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    PRINT           reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    IF              reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    ID              reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    WHILE           reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    FOR             reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    L_P             reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    CTE_CHAR        reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    CTE_F           reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    CTE_I           reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    CTE_NEG_I       reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    R_B             reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    R_P             reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    SEMICOLON       reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    COMA            reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    TO              reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    R_SB            reduce using rule 94 (expression -> texp generate_quad_1 op1 .)
    DO              reduce using rule 94 (expression -> texp generate_quad_1 op1 .)


state 142

    (120) op1 -> OR . add_operator expression
    (119) add_operator -> .

    L_P             reduce using rule 119 (add_operator -> .)
    AMP             reduce using rule 119 (add_operator -> .)
    ID              reduce using rule 119 (add_operator -> .)
    CTE_CHAR        reduce using rule 119 (add_operator -> .)
    CTE_F           reduce using rule 119 (add_operator -> .)
    CTE_I           reduce using rule 119 (add_operator -> .)
    CTE_NEG_I       reduce using rule 119 (add_operator -> .)

    add_operator                   shift and go to state 188

state 143

    (121) op1 -> empty .

    AMP             reduce using rule 121 (op1 -> empty .)
    RETURN          reduce using rule 121 (op1 -> empty .)
    READ            reduce using rule 121 (op1 -> empty .)
    PRINT           reduce using rule 121 (op1 -> empty .)
    IF              reduce using rule 121 (op1 -> empty .)
    ID              reduce using rule 121 (op1 -> empty .)
    WHILE           reduce using rule 121 (op1 -> empty .)
    FOR             reduce using rule 121 (op1 -> empty .)
    L_P             reduce using rule 121 (op1 -> empty .)
    CTE_CHAR        reduce using rule 121 (op1 -> empty .)
    CTE_F           reduce using rule 121 (op1 -> empty .)
    CTE_I           reduce using rule 121 (op1 -> empty .)
    CTE_NEG_I       reduce using rule 121 (op1 -> empty .)
    R_B             reduce using rule 121 (op1 -> empty .)
    R_P             reduce using rule 121 (op1 -> empty .)
    SEMICOLON       reduce using rule 121 (op1 -> empty .)
    COMA            reduce using rule 121 (op1 -> empty .)
    TO              reduce using rule 121 (op1 -> empty .)
    R_SB            reduce using rule 121 (op1 -> empty .)
    DO              reduce using rule 121 (op1 -> empty .)


state 144

    (92) while_statement -> WHILE L_P breadcrumb . expression R_P exp_type do_statement
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    expression                     shift and go to state 189
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 145

    (88) for_statement -> FOR id for_id . EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement

    EQUAL           shift and go to state 190


state 146

    (95) texp -> gexp generate_quad_2 op2 .

    OR              reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    AMP             reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    RETURN          reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    READ            reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    PRINT           reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    IF              reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    ID              reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    WHILE           reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    FOR             reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    L_P             reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    CTE_CHAR        reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    CTE_F           reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    CTE_I           reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    CTE_NEG_I       reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    R_B             reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    R_P             reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    SEMICOLON       reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    COMA            reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    TO              reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    R_SB            reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)
    DO              reduce using rule 95 (texp -> gexp generate_quad_2 op2 .)


state 147

    (122) op2 -> AND . add_operator texp
    (119) add_operator -> .

    L_P             reduce using rule 119 (add_operator -> .)
    AMP             reduce using rule 119 (add_operator -> .)
    ID              reduce using rule 119 (add_operator -> .)
    CTE_CHAR        reduce using rule 119 (add_operator -> .)
    CTE_F           reduce using rule 119 (add_operator -> .)
    CTE_I           reduce using rule 119 (add_operator -> .)
    CTE_NEG_I       reduce using rule 119 (add_operator -> .)

    add_operator                   shift and go to state 191

state 148

    (123) op2 -> empty .

    OR              reduce using rule 123 (op2 -> empty .)
    AMP             reduce using rule 123 (op2 -> empty .)
    RETURN          reduce using rule 123 (op2 -> empty .)
    READ            reduce using rule 123 (op2 -> empty .)
    PRINT           reduce using rule 123 (op2 -> empty .)
    IF              reduce using rule 123 (op2 -> empty .)
    ID              reduce using rule 123 (op2 -> empty .)
    WHILE           reduce using rule 123 (op2 -> empty .)
    FOR             reduce using rule 123 (op2 -> empty .)
    L_P             reduce using rule 123 (op2 -> empty .)
    CTE_CHAR        reduce using rule 123 (op2 -> empty .)
    CTE_F           reduce using rule 123 (op2 -> empty .)
    CTE_I           reduce using rule 123 (op2 -> empty .)
    CTE_NEG_I       reduce using rule 123 (op2 -> empty .)
    R_B             reduce using rule 123 (op2 -> empty .)
    R_P             reduce using rule 123 (op2 -> empty .)
    SEMICOLON       reduce using rule 123 (op2 -> empty .)
    COMA            reduce using rule 123 (op2 -> empty .)
    TO              reduce using rule 123 (op2 -> empty .)
    R_SB            reduce using rule 123 (op2 -> empty .)
    DO              reduce using rule 123 (op2 -> empty .)


state 149

    (96) gexp -> mexp generate_quad_3 op3aux .

    AND             reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    OR              reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    AMP             reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    RETURN          reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    READ            reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    PRINT           reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    IF              reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    ID              reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    WHILE           reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    FOR             reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    L_P             reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    CTE_CHAR        reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    CTE_F           reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    CTE_I           reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    CTE_NEG_I       reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    R_B             reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    R_P             reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    SEMICOLON       reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    COMA            reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    TO              reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    R_SB            reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)
    DO              reduce using rule 96 (gexp -> mexp generate_quad_3 op3aux .)


state 150

    (130) op3aux -> op3 . gexp
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    gexp                           shift and go to state 192
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 151

    (131) op3aux -> empty .

    AND             reduce using rule 131 (op3aux -> empty .)
    OR              reduce using rule 131 (op3aux -> empty .)
    AMP             reduce using rule 131 (op3aux -> empty .)
    RETURN          reduce using rule 131 (op3aux -> empty .)
    READ            reduce using rule 131 (op3aux -> empty .)
    PRINT           reduce using rule 131 (op3aux -> empty .)
    IF              reduce using rule 131 (op3aux -> empty .)
    ID              reduce using rule 131 (op3aux -> empty .)
    WHILE           reduce using rule 131 (op3aux -> empty .)
    FOR             reduce using rule 131 (op3aux -> empty .)
    L_P             reduce using rule 131 (op3aux -> empty .)
    CTE_CHAR        reduce using rule 131 (op3aux -> empty .)
    CTE_F           reduce using rule 131 (op3aux -> empty .)
    CTE_I           reduce using rule 131 (op3aux -> empty .)
    CTE_NEG_I       reduce using rule 131 (op3aux -> empty .)
    R_B             reduce using rule 131 (op3aux -> empty .)
    R_P             reduce using rule 131 (op3aux -> empty .)
    SEMICOLON       reduce using rule 131 (op3aux -> empty .)
    COMA            reduce using rule 131 (op3aux -> empty .)
    TO              reduce using rule 131 (op3aux -> empty .)
    R_SB            reduce using rule 131 (op3aux -> empty .)
    DO              reduce using rule 131 (op3aux -> empty .)


state 152

    (124) op3 -> LESSTHAN .

    L_P             reduce using rule 124 (op3 -> LESSTHAN .)
    AMP             reduce using rule 124 (op3 -> LESSTHAN .)
    ID              reduce using rule 124 (op3 -> LESSTHAN .)
    CTE_CHAR        reduce using rule 124 (op3 -> LESSTHAN .)
    CTE_F           reduce using rule 124 (op3 -> LESSTHAN .)
    CTE_I           reduce using rule 124 (op3 -> LESSTHAN .)
    CTE_NEG_I       reduce using rule 124 (op3 -> LESSTHAN .)


state 153

    (125) op3 -> LESSTHANEQ .

    L_P             reduce using rule 125 (op3 -> LESSTHANEQ .)
    AMP             reduce using rule 125 (op3 -> LESSTHANEQ .)
    ID              reduce using rule 125 (op3 -> LESSTHANEQ .)
    CTE_CHAR        reduce using rule 125 (op3 -> LESSTHANEQ .)
    CTE_F           reduce using rule 125 (op3 -> LESSTHANEQ .)
    CTE_I           reduce using rule 125 (op3 -> LESSTHANEQ .)
    CTE_NEG_I       reduce using rule 125 (op3 -> LESSTHANEQ .)


state 154

    (126) op3 -> GREATERTHAN .

    L_P             reduce using rule 126 (op3 -> GREATERTHAN .)
    AMP             reduce using rule 126 (op3 -> GREATERTHAN .)
    ID              reduce using rule 126 (op3 -> GREATERTHAN .)
    CTE_CHAR        reduce using rule 126 (op3 -> GREATERTHAN .)
    CTE_F           reduce using rule 126 (op3 -> GREATERTHAN .)
    CTE_I           reduce using rule 126 (op3 -> GREATERTHAN .)
    CTE_NEG_I       reduce using rule 126 (op3 -> GREATERTHAN .)


state 155

    (127) op3 -> GREATERTHANEQ .

    L_P             reduce using rule 127 (op3 -> GREATERTHANEQ .)
    AMP             reduce using rule 127 (op3 -> GREATERTHANEQ .)
    ID              reduce using rule 127 (op3 -> GREATERTHANEQ .)
    CTE_CHAR        reduce using rule 127 (op3 -> GREATERTHANEQ .)
    CTE_F           reduce using rule 127 (op3 -> GREATERTHANEQ .)
    CTE_I           reduce using rule 127 (op3 -> GREATERTHANEQ .)
    CTE_NEG_I       reduce using rule 127 (op3 -> GREATERTHANEQ .)


state 156

    (128) op3 -> EQ .

    L_P             reduce using rule 128 (op3 -> EQ .)
    AMP             reduce using rule 128 (op3 -> EQ .)
    ID              reduce using rule 128 (op3 -> EQ .)
    CTE_CHAR        reduce using rule 128 (op3 -> EQ .)
    CTE_F           reduce using rule 128 (op3 -> EQ .)
    CTE_I           reduce using rule 128 (op3 -> EQ .)
    CTE_NEG_I       reduce using rule 128 (op3 -> EQ .)


state 157

    (129) op3 -> DIFERENT .

    L_P             reduce using rule 129 (op3 -> DIFERENT .)
    AMP             reduce using rule 129 (op3 -> DIFERENT .)
    ID              reduce using rule 129 (op3 -> DIFERENT .)
    CTE_CHAR        reduce using rule 129 (op3 -> DIFERENT .)
    CTE_F           reduce using rule 129 (op3 -> DIFERENT .)
    CTE_I           reduce using rule 129 (op3 -> DIFERENT .)
    CTE_NEG_I       reduce using rule 129 (op3 -> DIFERENT .)


state 158

    (97) mexp -> term generate_quad_4 op4aux .

    LESSTHAN        reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    LESSTHANEQ      reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    GREATERTHAN     reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    GREATERTHANEQ   reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    EQ              reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    DIFERENT        reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    AND             reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    OR              reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    AMP             reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    RETURN          reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    READ            reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    PRINT           reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    IF              reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    ID              reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    WHILE           reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    FOR             reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    L_P             reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    CTE_CHAR        reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    CTE_F           reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    CTE_I           reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    CTE_NEG_I       reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    R_B             reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    R_P             reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    SEMICOLON       reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    COMA            reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    TO              reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    R_SB            reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)
    DO              reduce using rule 97 (mexp -> term generate_quad_4 op4aux .)


state 159

    (134) op4aux -> op4 . mexp
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    mexp                           shift and go to state 193
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 160

    (135) op4aux -> empty .

    LESSTHAN        reduce using rule 135 (op4aux -> empty .)
    LESSTHANEQ      reduce using rule 135 (op4aux -> empty .)
    GREATERTHAN     reduce using rule 135 (op4aux -> empty .)
    GREATERTHANEQ   reduce using rule 135 (op4aux -> empty .)
    EQ              reduce using rule 135 (op4aux -> empty .)
    DIFERENT        reduce using rule 135 (op4aux -> empty .)
    AND             reduce using rule 135 (op4aux -> empty .)
    OR              reduce using rule 135 (op4aux -> empty .)
    AMP             reduce using rule 135 (op4aux -> empty .)
    RETURN          reduce using rule 135 (op4aux -> empty .)
    READ            reduce using rule 135 (op4aux -> empty .)
    PRINT           reduce using rule 135 (op4aux -> empty .)
    IF              reduce using rule 135 (op4aux -> empty .)
    ID              reduce using rule 135 (op4aux -> empty .)
    WHILE           reduce using rule 135 (op4aux -> empty .)
    FOR             reduce using rule 135 (op4aux -> empty .)
    L_P             reduce using rule 135 (op4aux -> empty .)
    CTE_CHAR        reduce using rule 135 (op4aux -> empty .)
    CTE_F           reduce using rule 135 (op4aux -> empty .)
    CTE_I           reduce using rule 135 (op4aux -> empty .)
    CTE_NEG_I       reduce using rule 135 (op4aux -> empty .)
    R_B             reduce using rule 135 (op4aux -> empty .)
    R_P             reduce using rule 135 (op4aux -> empty .)
    SEMICOLON       reduce using rule 135 (op4aux -> empty .)
    COMA            reduce using rule 135 (op4aux -> empty .)
    TO              reduce using rule 135 (op4aux -> empty .)
    R_SB            reduce using rule 135 (op4aux -> empty .)
    DO              reduce using rule 135 (op4aux -> empty .)


state 161

    (132) op4 -> PLUS .

    L_P             reduce using rule 132 (op4 -> PLUS .)
    AMP             reduce using rule 132 (op4 -> PLUS .)
    ID              reduce using rule 132 (op4 -> PLUS .)
    CTE_CHAR        reduce using rule 132 (op4 -> PLUS .)
    CTE_F           reduce using rule 132 (op4 -> PLUS .)
    CTE_I           reduce using rule 132 (op4 -> PLUS .)
    CTE_NEG_I       reduce using rule 132 (op4 -> PLUS .)


state 162

    (133) op4 -> MINUS .

    L_P             reduce using rule 133 (op4 -> MINUS .)
    AMP             reduce using rule 133 (op4 -> MINUS .)
    ID              reduce using rule 133 (op4 -> MINUS .)
    CTE_CHAR        reduce using rule 133 (op4 -> MINUS .)
    CTE_F           reduce using rule 133 (op4 -> MINUS .)
    CTE_I           reduce using rule 133 (op4 -> MINUS .)
    CTE_NEG_I       reduce using rule 133 (op4 -> MINUS .)


state 163

    (98) term -> fact generate_quad_5 op5aux .

    PLUS            reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    MINUS           reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    LESSTHAN        reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    LESSTHANEQ      reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    GREATERTHAN     reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    GREATERTHANEQ   reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    EQ              reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    DIFERENT        reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    AND             reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    OR              reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    AMP             reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    RETURN          reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    READ            reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    PRINT           reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    IF              reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    ID              reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    WHILE           reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    FOR             reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    L_P             reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    CTE_CHAR        reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    CTE_F           reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    CTE_I           reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    CTE_NEG_I       reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    R_B             reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    R_P             reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    SEMICOLON       reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    COMA            reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    TO              reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    R_SB            reduce using rule 98 (term -> fact generate_quad_5 op5aux .)
    DO              reduce using rule 98 (term -> fact generate_quad_5 op5aux .)


state 164

    (139) op5aux -> op5 . term
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    term                           shift and go to state 194
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 165

    (140) op5aux -> empty .

    PLUS            reduce using rule 140 (op5aux -> empty .)
    MINUS           reduce using rule 140 (op5aux -> empty .)
    LESSTHAN        reduce using rule 140 (op5aux -> empty .)
    LESSTHANEQ      reduce using rule 140 (op5aux -> empty .)
    GREATERTHAN     reduce using rule 140 (op5aux -> empty .)
    GREATERTHANEQ   reduce using rule 140 (op5aux -> empty .)
    EQ              reduce using rule 140 (op5aux -> empty .)
    DIFERENT        reduce using rule 140 (op5aux -> empty .)
    AND             reduce using rule 140 (op5aux -> empty .)
    OR              reduce using rule 140 (op5aux -> empty .)
    AMP             reduce using rule 140 (op5aux -> empty .)
    RETURN          reduce using rule 140 (op5aux -> empty .)
    READ            reduce using rule 140 (op5aux -> empty .)
    PRINT           reduce using rule 140 (op5aux -> empty .)
    IF              reduce using rule 140 (op5aux -> empty .)
    ID              reduce using rule 140 (op5aux -> empty .)
    WHILE           reduce using rule 140 (op5aux -> empty .)
    FOR             reduce using rule 140 (op5aux -> empty .)
    L_P             reduce using rule 140 (op5aux -> empty .)
    CTE_CHAR        reduce using rule 140 (op5aux -> empty .)
    CTE_F           reduce using rule 140 (op5aux -> empty .)
    CTE_I           reduce using rule 140 (op5aux -> empty .)
    CTE_NEG_I       reduce using rule 140 (op5aux -> empty .)
    R_B             reduce using rule 140 (op5aux -> empty .)
    R_P             reduce using rule 140 (op5aux -> empty .)
    SEMICOLON       reduce using rule 140 (op5aux -> empty .)
    COMA            reduce using rule 140 (op5aux -> empty .)
    TO              reduce using rule 140 (op5aux -> empty .)
    R_SB            reduce using rule 140 (op5aux -> empty .)
    DO              reduce using rule 140 (op5aux -> empty .)


state 166

    (136) op5 -> MULT .

    L_P             reduce using rule 136 (op5 -> MULT .)
    AMP             reduce using rule 136 (op5 -> MULT .)
    ID              reduce using rule 136 (op5 -> MULT .)
    CTE_CHAR        reduce using rule 136 (op5 -> MULT .)
    CTE_F           reduce using rule 136 (op5 -> MULT .)
    CTE_I           reduce using rule 136 (op5 -> MULT .)
    CTE_NEG_I       reduce using rule 136 (op5 -> MULT .)


state 167

    (137) op5 -> DIV .

    L_P             reduce using rule 137 (op5 -> DIV .)
    AMP             reduce using rule 137 (op5 -> DIV .)
    ID              reduce using rule 137 (op5 -> DIV .)
    CTE_CHAR        reduce using rule 137 (op5 -> DIV .)
    CTE_F           reduce using rule 137 (op5 -> DIV .)
    CTE_I           reduce using rule 137 (op5 -> DIV .)
    CTE_NEG_I       reduce using rule 137 (op5 -> DIV .)


state 168

    (138) op5 -> MOD .

    L_P             reduce using rule 138 (op5 -> MOD .)
    AMP             reduce using rule 138 (op5 -> MOD .)
    ID              reduce using rule 138 (op5 -> MOD .)
    CTE_CHAR        reduce using rule 138 (op5 -> MOD .)
    CTE_F           reduce using rule 138 (op5 -> MOD .)
    CTE_I           reduce using rule 138 (op5 -> MOD .)
    CTE_NEG_I       reduce using rule 138 (op5 -> MOD .)


state 169

    (38) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B . statements R_B
    (49) statements -> . statement statements
    (50) statements -> . empty
    (51) statement -> . assignation
    (52) statement -> . call_func
    (53) statement -> . return_func
    (54) statement -> . read
    (55) statement -> . write
    (56) statement -> . decision_statement
    (57) statement -> . repetition_statement
    (58) statement -> . expression
    (141) empty -> .
    (59) assignation -> . id EQUAL expression SEMICOLON
    (67) call_func -> . AMP ID call_func_era L_P args R_P SEMICOLON
    (70) return_func -> . RETURN L_P expression R_P SEMICOLON
    (71) read -> . READ L_P read_args R_P SEMICOLON
    (75) write -> . PRINT L_P write_args R_P SEMICOLON
    (81) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (86) repetition_statement -> . while_statement
    (87) repetition_statement -> . for_statement
    (94) expression -> . texp generate_quad_1 op1
    (27) id -> . ID set_id id_quad id1
    (92) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (88) for_statement -> . FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    R_B             reduce using rule 141 (empty -> .)
    AMP             shift and go to state 81
    RETURN          shift and go to state 83
    READ            shift and go to state 84
    PRINT           shift and go to state 85
    IF              shift and go to state 86
    ID              shift and go to state 82
    WHILE           shift and go to state 90
    FOR             shift and go to state 91
    L_P             shift and go to state 68
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    statements                     shift and go to state 195
    statement                      shift and go to state 70
    empty                          shift and go to state 71
    assignation                    shift and go to state 72
    call_func                      shift and go to state 73
    return_func                    shift and go to state 74
    read                           shift and go to state 75
    write                          shift and go to state 76
    decision_statement             shift and go to state 77
    repetition_statement           shift and go to state 78
    expression                     shift and go to state 79
    id                             shift and go to state 80
    while_statement                shift and go to state 87
    for_statement                  shift and go to state 88
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    cte                            shift and go to state 97

state 170

    (22) dec_id2 -> L_SB CTE_I set_array_2 R_SB .

    COMA            reduce using rule 22 (dec_id2 -> L_SB CTE_I set_array_2 R_SB .)
    SEMICOLON       reduce using rule 22 (dec_id2 -> L_SB CTE_I set_array_2 R_SB .)
    R_P             reduce using rule 22 (dec_id2 -> L_SB CTE_I set_array_2 R_SB .)


state 171

    (106) fact -> L_P add_fake expression R_P . remove_fake
    (109) remove_fake -> .

    MULT            reduce using rule 109 (remove_fake -> .)
    DIV             reduce using rule 109 (remove_fake -> .)
    MOD             reduce using rule 109 (remove_fake -> .)
    PLUS            reduce using rule 109 (remove_fake -> .)
    MINUS           reduce using rule 109 (remove_fake -> .)
    LESSTHAN        reduce using rule 109 (remove_fake -> .)
    LESSTHANEQ      reduce using rule 109 (remove_fake -> .)
    GREATERTHAN     reduce using rule 109 (remove_fake -> .)
    GREATERTHANEQ   reduce using rule 109 (remove_fake -> .)
    EQ              reduce using rule 109 (remove_fake -> .)
    DIFERENT        reduce using rule 109 (remove_fake -> .)
    AND             reduce using rule 109 (remove_fake -> .)
    OR              reduce using rule 109 (remove_fake -> .)
    AMP             reduce using rule 109 (remove_fake -> .)
    RETURN          reduce using rule 109 (remove_fake -> .)
    READ            reduce using rule 109 (remove_fake -> .)
    PRINT           reduce using rule 109 (remove_fake -> .)
    IF              reduce using rule 109 (remove_fake -> .)
    ID              reduce using rule 109 (remove_fake -> .)
    WHILE           reduce using rule 109 (remove_fake -> .)
    FOR             reduce using rule 109 (remove_fake -> .)
    L_P             reduce using rule 109 (remove_fake -> .)
    CTE_CHAR        reduce using rule 109 (remove_fake -> .)
    CTE_F           reduce using rule 109 (remove_fake -> .)
    CTE_I           reduce using rule 109 (remove_fake -> .)
    CTE_NEG_I       reduce using rule 109 (remove_fake -> .)
    R_B             reduce using rule 109 (remove_fake -> .)
    R_P             reduce using rule 109 (remove_fake -> .)
    SEMICOLON       reduce using rule 109 (remove_fake -> .)
    COMA            reduce using rule 109 (remove_fake -> .)
    TO              reduce using rule 109 (remove_fake -> .)
    R_SB            reduce using rule 109 (remove_fake -> .)
    DO              reduce using rule 109 (remove_fake -> .)

    remove_fake                    shift and go to state 196

state 172

    (68) call_func_exp -> AMP ID . call_func_era L_P args R_P
    (69) call_func_era -> .

    L_P             reduce using rule 69 (call_func_era -> .)

    call_func_era                  shift and go to state 197

state 173

    (59) assignation -> id EQUAL expression SEMICOLON .

    AMP             reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    READ            reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    IF              reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    ID              reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    FOR             reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    L_P             reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_CHAR        reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_F           reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_I           reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    CTE_NEG_I       reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)
    R_B             reduce using rule 59 (assignation -> id EQUAL expression SEMICOLON .)


state 174

    (67) call_func -> AMP ID call_func_era L_P . args R_P SEMICOLON
    (68) call_func_exp -> AMP ID call_func_era L_P . args R_P
    (60) args -> . args1
    (61) args -> . empty
    (62) args1 -> . add_fake expression param_check remove_fake args2
    (141) empty -> .
    (108) add_fake -> .

    R_P             reduce using rule 141 (empty -> .)
    L_P             reduce using rule 108 (add_fake -> .)
    AMP             reduce using rule 108 (add_fake -> .)
    ID              reduce using rule 108 (add_fake -> .)
    CTE_CHAR        reduce using rule 108 (add_fake -> .)
    CTE_F           reduce using rule 108 (add_fake -> .)
    CTE_I           reduce using rule 108 (add_fake -> .)
    CTE_NEG_I       reduce using rule 108 (add_fake -> .)

    args                           shift and go to state 198
    args1                          shift and go to state 199
    empty                          shift and go to state 200
    add_fake                       shift and go to state 201

state 175

    (27) id -> ID set_id id_quad id1 .

    EQUAL           reduce using rule 27 (id -> ID set_id id_quad id1 .)
    MULT            reduce using rule 27 (id -> ID set_id id_quad id1 .)
    DIV             reduce using rule 27 (id -> ID set_id id_quad id1 .)
    MOD             reduce using rule 27 (id -> ID set_id id_quad id1 .)
    PLUS            reduce using rule 27 (id -> ID set_id id_quad id1 .)
    MINUS           reduce using rule 27 (id -> ID set_id id_quad id1 .)
    LESSTHAN        reduce using rule 27 (id -> ID set_id id_quad id1 .)
    LESSTHANEQ      reduce using rule 27 (id -> ID set_id id_quad id1 .)
    GREATERTHAN     reduce using rule 27 (id -> ID set_id id_quad id1 .)
    GREATERTHANEQ   reduce using rule 27 (id -> ID set_id id_quad id1 .)
    EQ              reduce using rule 27 (id -> ID set_id id_quad id1 .)
    DIFERENT        reduce using rule 27 (id -> ID set_id id_quad id1 .)
    AND             reduce using rule 27 (id -> ID set_id id_quad id1 .)
    OR              reduce using rule 27 (id -> ID set_id id_quad id1 .)
    AMP             reduce using rule 27 (id -> ID set_id id_quad id1 .)
    RETURN          reduce using rule 27 (id -> ID set_id id_quad id1 .)
    READ            reduce using rule 27 (id -> ID set_id id_quad id1 .)
    PRINT           reduce using rule 27 (id -> ID set_id id_quad id1 .)
    IF              reduce using rule 27 (id -> ID set_id id_quad id1 .)
    ID              reduce using rule 27 (id -> ID set_id id_quad id1 .)
    WHILE           reduce using rule 27 (id -> ID set_id id_quad id1 .)
    FOR             reduce using rule 27 (id -> ID set_id id_quad id1 .)
    L_P             reduce using rule 27 (id -> ID set_id id_quad id1 .)
    CTE_CHAR        reduce using rule 27 (id -> ID set_id id_quad id1 .)
    CTE_F           reduce using rule 27 (id -> ID set_id id_quad id1 .)
    CTE_I           reduce using rule 27 (id -> ID set_id id_quad id1 .)
    CTE_NEG_I       reduce using rule 27 (id -> ID set_id id_quad id1 .)
    R_B             reduce using rule 27 (id -> ID set_id id_quad id1 .)
    R_P             reduce using rule 27 (id -> ID set_id id_quad id1 .)
    SEMICOLON       reduce using rule 27 (id -> ID set_id id_quad id1 .)
    COMA            reduce using rule 27 (id -> ID set_id id_quad id1 .)
    TO              reduce using rule 27 (id -> ID set_id id_quad id1 .)
    R_SB            reduce using rule 27 (id -> ID set_id id_quad id1 .)
    DO              reduce using rule 27 (id -> ID set_id id_quad id1 .)


state 176

    (29) id1 -> verify_dim . L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base

    L_SB            shift and go to state 202


state 177

    (30) id1 -> empty .

    EQUAL           reduce using rule 30 (id1 -> empty .)
    MULT            reduce using rule 30 (id1 -> empty .)
    DIV             reduce using rule 30 (id1 -> empty .)
    MOD             reduce using rule 30 (id1 -> empty .)
    PLUS            reduce using rule 30 (id1 -> empty .)
    MINUS           reduce using rule 30 (id1 -> empty .)
    LESSTHAN        reduce using rule 30 (id1 -> empty .)
    LESSTHANEQ      reduce using rule 30 (id1 -> empty .)
    GREATERTHAN     reduce using rule 30 (id1 -> empty .)
    GREATERTHANEQ   reduce using rule 30 (id1 -> empty .)
    EQ              reduce using rule 30 (id1 -> empty .)
    DIFERENT        reduce using rule 30 (id1 -> empty .)
    AND             reduce using rule 30 (id1 -> empty .)
    OR              reduce using rule 30 (id1 -> empty .)
    AMP             reduce using rule 30 (id1 -> empty .)
    RETURN          reduce using rule 30 (id1 -> empty .)
    READ            reduce using rule 30 (id1 -> empty .)
    PRINT           reduce using rule 30 (id1 -> empty .)
    IF              reduce using rule 30 (id1 -> empty .)
    ID              reduce using rule 30 (id1 -> empty .)
    WHILE           reduce using rule 30 (id1 -> empty .)
    FOR             reduce using rule 30 (id1 -> empty .)
    L_P             reduce using rule 30 (id1 -> empty .)
    CTE_CHAR        reduce using rule 30 (id1 -> empty .)
    CTE_F           reduce using rule 30 (id1 -> empty .)
    CTE_I           reduce using rule 30 (id1 -> empty .)
    CTE_NEG_I       reduce using rule 30 (id1 -> empty .)
    R_B             reduce using rule 30 (id1 -> empty .)
    R_P             reduce using rule 30 (id1 -> empty .)
    SEMICOLON       reduce using rule 30 (id1 -> empty .)
    COMA            reduce using rule 30 (id1 -> empty .)
    TO              reduce using rule 30 (id1 -> empty .)
    R_SB            reduce using rule 30 (id1 -> empty .)
    DO              reduce using rule 30 (id1 -> empty .)


state 178

    (70) return_func -> RETURN L_P expression R_P . SEMICOLON

    SEMICOLON       shift and go to state 203


state 179

    (71) read -> READ L_P read_args R_P . SEMICOLON

    SEMICOLON       shift and go to state 204


state 180

    (72) read_args -> add_fake expression . remove_fake read_args1
    (109) remove_fake -> .

    COMA            reduce using rule 109 (remove_fake -> .)
    R_P             reduce using rule 109 (remove_fake -> .)

    remove_fake                    shift and go to state 205

state 181

    (75) write -> PRINT L_P write_args R_P . SEMICOLON

    SEMICOLON       shift and go to state 206


state 182

    (76) write_args -> write_args2 write_args1 .

    R_P             reduce using rule 76 (write_args -> write_args2 write_args1 .)


state 183

    (77) write_args1 -> COMA . write_args2 write_args1
    (79) write_args2 -> . add_fake expression remove_fake
    (80) write_args2 -> . CTE_STRING add_cte_string
    (108) add_fake -> .

    CTE_STRING      shift and go to state 139
    L_P             reduce using rule 108 (add_fake -> .)
    AMP             reduce using rule 108 (add_fake -> .)
    ID              reduce using rule 108 (add_fake -> .)
    CTE_CHAR        reduce using rule 108 (add_fake -> .)
    CTE_F           reduce using rule 108 (add_fake -> .)
    CTE_I           reduce using rule 108 (add_fake -> .)
    CTE_NEG_I       reduce using rule 108 (add_fake -> .)

    write_args2                    shift and go to state 207
    add_fake                       shift and go to state 138

state 184

    (78) write_args1 -> empty .

    R_P             reduce using rule 78 (write_args1 -> empty .)


state 185

    (79) write_args2 -> add_fake expression . remove_fake
    (109) remove_fake -> .

    COMA            reduce using rule 109 (remove_fake -> .)
    R_P             reduce using rule 109 (remove_fake -> .)

    remove_fake                    shift and go to state 208

state 186

    (80) write_args2 -> CTE_STRING add_cte_string .

    COMA            reduce using rule 80 (write_args2 -> CTE_STRING add_cte_string .)
    R_P             reduce using rule 80 (write_args2 -> CTE_STRING add_cte_string .)


state 187

    (81) decision_statement -> IF L_P expression R_P . exp_type L_B statements R_B decision_statement1
    (84) exp_type -> .

    L_B             reduce using rule 84 (exp_type -> .)

    exp_type                       shift and go to state 209

state 188

    (120) op1 -> OR add_operator . expression
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    expression                     shift and go to state 210
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 189

    (92) while_statement -> WHILE L_P breadcrumb expression . R_P exp_type do_statement

    R_P             shift and go to state 211


state 190

    (88) for_statement -> FOR id for_id EQUAL . expression for_id_quad TO breadcrumb expression exp_type do_statement
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    id                             shift and go to state 128
    expression                     shift and go to state 212
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    cte                            shift and go to state 97

state 191

    (122) op2 -> AND add_operator . texp
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    texp                           shift and go to state 213
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 192

    (130) op3aux -> op3 gexp .

    AND             reduce using rule 130 (op3aux -> op3 gexp .)
    OR              reduce using rule 130 (op3aux -> op3 gexp .)
    AMP             reduce using rule 130 (op3aux -> op3 gexp .)
    RETURN          reduce using rule 130 (op3aux -> op3 gexp .)
    READ            reduce using rule 130 (op3aux -> op3 gexp .)
    PRINT           reduce using rule 130 (op3aux -> op3 gexp .)
    IF              reduce using rule 130 (op3aux -> op3 gexp .)
    ID              reduce using rule 130 (op3aux -> op3 gexp .)
    WHILE           reduce using rule 130 (op3aux -> op3 gexp .)
    FOR             reduce using rule 130 (op3aux -> op3 gexp .)
    L_P             reduce using rule 130 (op3aux -> op3 gexp .)
    CTE_CHAR        reduce using rule 130 (op3aux -> op3 gexp .)
    CTE_F           reduce using rule 130 (op3aux -> op3 gexp .)
    CTE_I           reduce using rule 130 (op3aux -> op3 gexp .)
    CTE_NEG_I       reduce using rule 130 (op3aux -> op3 gexp .)
    R_B             reduce using rule 130 (op3aux -> op3 gexp .)
    R_P             reduce using rule 130 (op3aux -> op3 gexp .)
    SEMICOLON       reduce using rule 130 (op3aux -> op3 gexp .)
    COMA            reduce using rule 130 (op3aux -> op3 gexp .)
    TO              reduce using rule 130 (op3aux -> op3 gexp .)
    R_SB            reduce using rule 130 (op3aux -> op3 gexp .)
    DO              reduce using rule 130 (op3aux -> op3 gexp .)


state 193

    (134) op4aux -> op4 mexp .

    LESSTHAN        reduce using rule 134 (op4aux -> op4 mexp .)
    LESSTHANEQ      reduce using rule 134 (op4aux -> op4 mexp .)
    GREATERTHAN     reduce using rule 134 (op4aux -> op4 mexp .)
    GREATERTHANEQ   reduce using rule 134 (op4aux -> op4 mexp .)
    EQ              reduce using rule 134 (op4aux -> op4 mexp .)
    DIFERENT        reduce using rule 134 (op4aux -> op4 mexp .)
    AND             reduce using rule 134 (op4aux -> op4 mexp .)
    OR              reduce using rule 134 (op4aux -> op4 mexp .)
    AMP             reduce using rule 134 (op4aux -> op4 mexp .)
    RETURN          reduce using rule 134 (op4aux -> op4 mexp .)
    READ            reduce using rule 134 (op4aux -> op4 mexp .)
    PRINT           reduce using rule 134 (op4aux -> op4 mexp .)
    IF              reduce using rule 134 (op4aux -> op4 mexp .)
    ID              reduce using rule 134 (op4aux -> op4 mexp .)
    WHILE           reduce using rule 134 (op4aux -> op4 mexp .)
    FOR             reduce using rule 134 (op4aux -> op4 mexp .)
    L_P             reduce using rule 134 (op4aux -> op4 mexp .)
    CTE_CHAR        reduce using rule 134 (op4aux -> op4 mexp .)
    CTE_F           reduce using rule 134 (op4aux -> op4 mexp .)
    CTE_I           reduce using rule 134 (op4aux -> op4 mexp .)
    CTE_NEG_I       reduce using rule 134 (op4aux -> op4 mexp .)
    R_B             reduce using rule 134 (op4aux -> op4 mexp .)
    R_P             reduce using rule 134 (op4aux -> op4 mexp .)
    SEMICOLON       reduce using rule 134 (op4aux -> op4 mexp .)
    COMA            reduce using rule 134 (op4aux -> op4 mexp .)
    TO              reduce using rule 134 (op4aux -> op4 mexp .)
    R_SB            reduce using rule 134 (op4aux -> op4 mexp .)
    DO              reduce using rule 134 (op4aux -> op4 mexp .)


state 194

    (139) op5aux -> op5 term .

    PLUS            reduce using rule 139 (op5aux -> op5 term .)
    MINUS           reduce using rule 139 (op5aux -> op5 term .)
    LESSTHAN        reduce using rule 139 (op5aux -> op5 term .)
    LESSTHANEQ      reduce using rule 139 (op5aux -> op5 term .)
    GREATERTHAN     reduce using rule 139 (op5aux -> op5 term .)
    GREATERTHANEQ   reduce using rule 139 (op5aux -> op5 term .)
    EQ              reduce using rule 139 (op5aux -> op5 term .)
    DIFERENT        reduce using rule 139 (op5aux -> op5 term .)
    AND             reduce using rule 139 (op5aux -> op5 term .)
    OR              reduce using rule 139 (op5aux -> op5 term .)
    AMP             reduce using rule 139 (op5aux -> op5 term .)
    RETURN          reduce using rule 139 (op5aux -> op5 term .)
    READ            reduce using rule 139 (op5aux -> op5 term .)
    PRINT           reduce using rule 139 (op5aux -> op5 term .)
    IF              reduce using rule 139 (op5aux -> op5 term .)
    ID              reduce using rule 139 (op5aux -> op5 term .)
    WHILE           reduce using rule 139 (op5aux -> op5 term .)
    FOR             reduce using rule 139 (op5aux -> op5 term .)
    L_P             reduce using rule 139 (op5aux -> op5 term .)
    CTE_CHAR        reduce using rule 139 (op5aux -> op5 term .)
    CTE_F           reduce using rule 139 (op5aux -> op5 term .)
    CTE_I           reduce using rule 139 (op5aux -> op5 term .)
    CTE_NEG_I       reduce using rule 139 (op5aux -> op5 term .)
    R_B             reduce using rule 139 (op5aux -> op5 term .)
    R_P             reduce using rule 139 (op5aux -> op5 term .)
    SEMICOLON       reduce using rule 139 (op5aux -> op5 term .)
    COMA            reduce using rule 139 (op5aux -> op5 term .)
    TO              reduce using rule 139 (op5aux -> op5 term .)
    R_SB            reduce using rule 139 (op5aux -> op5 term .)
    DO              reduce using rule 139 (op5aux -> op5 term .)


state 195

    (38) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements . R_B

    R_B             shift and go to state 214


state 196

    (106) fact -> L_P add_fake expression R_P remove_fake .

    MULT            reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    DIV             reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    MOD             reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    PLUS            reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    MINUS           reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    LESSTHAN        reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    LESSTHANEQ      reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    GREATERTHAN     reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    GREATERTHANEQ   reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    EQ              reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    DIFERENT        reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    AND             reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    OR              reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    AMP             reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    RETURN          reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    READ            reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    PRINT           reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    IF              reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    ID              reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    WHILE           reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    FOR             reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    L_P             reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    CTE_CHAR        reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    CTE_F           reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    CTE_I           reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    CTE_NEG_I       reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    R_B             reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    R_P             reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    SEMICOLON       reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    COMA            reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    TO              reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    R_SB            reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)
    DO              reduce using rule 106 (fact -> L_P add_fake expression R_P remove_fake .)


state 197

    (68) call_func_exp -> AMP ID call_func_era . L_P args R_P

    L_P             shift and go to state 215


state 198

    (67) call_func -> AMP ID call_func_era L_P args . R_P SEMICOLON
    (68) call_func_exp -> AMP ID call_func_era L_P args . R_P

    R_P             shift and go to state 216


state 199

    (60) args -> args1 .

    R_P             reduce using rule 60 (args -> args1 .)


state 200

    (61) args -> empty .

    R_P             reduce using rule 61 (args -> empty .)


state 201

    (62) args1 -> add_fake . expression param_check remove_fake args2
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    expression                     shift and go to state 217
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 202

    (29) id1 -> verify_dim L_SB . add_fake expression remove_fake verify_quad_1 R_SB id2 add_base
    (108) add_fake -> .

    L_P             reduce using rule 108 (add_fake -> .)
    AMP             reduce using rule 108 (add_fake -> .)
    ID              reduce using rule 108 (add_fake -> .)
    CTE_CHAR        reduce using rule 108 (add_fake -> .)
    CTE_F           reduce using rule 108 (add_fake -> .)
    CTE_I           reduce using rule 108 (add_fake -> .)
    CTE_NEG_I       reduce using rule 108 (add_fake -> .)

    add_fake                       shift and go to state 218

state 203

    (70) return_func -> RETURN L_P expression R_P SEMICOLON .

    AMP             reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    RETURN          reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    READ            reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    PRINT           reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    IF              reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    ID              reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    WHILE           reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    FOR             reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    L_P             reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_F           reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_I           reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    CTE_NEG_I       reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)
    R_B             reduce using rule 70 (return_func -> RETURN L_P expression R_P SEMICOLON .)


state 204

    (71) read -> READ L_P read_args R_P SEMICOLON .

    AMP             reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    RETURN          reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    READ            reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    PRINT           reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    IF              reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    ID              reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    WHILE           reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    FOR             reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    L_P             reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_F           reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_I           reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    CTE_NEG_I       reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)
    R_B             reduce using rule 71 (read -> READ L_P read_args R_P SEMICOLON .)


state 205

    (72) read_args -> add_fake expression remove_fake . read_args1
    (73) read_args1 -> . COMA add_fake expression remove_fake read_args1
    (74) read_args1 -> . empty
    (141) empty -> .

    COMA            shift and go to state 220
    R_P             reduce using rule 141 (empty -> .)

    read_args1                     shift and go to state 219
    empty                          shift and go to state 221

state 206

    (75) write -> PRINT L_P write_args R_P SEMICOLON .

    AMP             reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    RETURN          reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    READ            reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    PRINT           reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    IF              reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    ID              reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    WHILE           reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    FOR             reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    L_P             reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_F           reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_I           reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    CTE_NEG_I       reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)
    R_B             reduce using rule 75 (write -> PRINT L_P write_args R_P SEMICOLON .)


state 207

    (77) write_args1 -> COMA write_args2 . write_args1
    (77) write_args1 -> . COMA write_args2 write_args1
    (78) write_args1 -> . empty
    (141) empty -> .

    COMA            shift and go to state 183
    R_P             reduce using rule 141 (empty -> .)

    write_args1                    shift and go to state 222
    empty                          shift and go to state 184

state 208

    (79) write_args2 -> add_fake expression remove_fake .

    COMA            reduce using rule 79 (write_args2 -> add_fake expression remove_fake .)
    R_P             reduce using rule 79 (write_args2 -> add_fake expression remove_fake .)


state 209

    (81) decision_statement -> IF L_P expression R_P exp_type . L_B statements R_B decision_statement1

    L_B             shift and go to state 223


state 210

    (120) op1 -> OR add_operator expression .

    AMP             reduce using rule 120 (op1 -> OR add_operator expression .)
    RETURN          reduce using rule 120 (op1 -> OR add_operator expression .)
    READ            reduce using rule 120 (op1 -> OR add_operator expression .)
    PRINT           reduce using rule 120 (op1 -> OR add_operator expression .)
    IF              reduce using rule 120 (op1 -> OR add_operator expression .)
    ID              reduce using rule 120 (op1 -> OR add_operator expression .)
    WHILE           reduce using rule 120 (op1 -> OR add_operator expression .)
    FOR             reduce using rule 120 (op1 -> OR add_operator expression .)
    L_P             reduce using rule 120 (op1 -> OR add_operator expression .)
    CTE_CHAR        reduce using rule 120 (op1 -> OR add_operator expression .)
    CTE_F           reduce using rule 120 (op1 -> OR add_operator expression .)
    CTE_I           reduce using rule 120 (op1 -> OR add_operator expression .)
    CTE_NEG_I       reduce using rule 120 (op1 -> OR add_operator expression .)
    R_B             reduce using rule 120 (op1 -> OR add_operator expression .)
    R_P             reduce using rule 120 (op1 -> OR add_operator expression .)
    SEMICOLON       reduce using rule 120 (op1 -> OR add_operator expression .)
    COMA            reduce using rule 120 (op1 -> OR add_operator expression .)
    TO              reduce using rule 120 (op1 -> OR add_operator expression .)
    R_SB            reduce using rule 120 (op1 -> OR add_operator expression .)
    DO              reduce using rule 120 (op1 -> OR add_operator expression .)


state 211

    (92) while_statement -> WHILE L_P breadcrumb expression R_P . exp_type do_statement
    (84) exp_type -> .

    DO              reduce using rule 84 (exp_type -> .)

    exp_type                       shift and go to state 224

state 212

    (88) for_statement -> FOR id for_id EQUAL expression . for_id_quad TO breadcrumb expression exp_type do_statement
    (90) for_id_quad -> .

    TO              reduce using rule 90 (for_id_quad -> .)

    for_id_quad                    shift and go to state 225

state 213

    (122) op2 -> AND add_operator texp .

    OR              reduce using rule 122 (op2 -> AND add_operator texp .)
    AMP             reduce using rule 122 (op2 -> AND add_operator texp .)
    RETURN          reduce using rule 122 (op2 -> AND add_operator texp .)
    READ            reduce using rule 122 (op2 -> AND add_operator texp .)
    PRINT           reduce using rule 122 (op2 -> AND add_operator texp .)
    IF              reduce using rule 122 (op2 -> AND add_operator texp .)
    ID              reduce using rule 122 (op2 -> AND add_operator texp .)
    WHILE           reduce using rule 122 (op2 -> AND add_operator texp .)
    FOR             reduce using rule 122 (op2 -> AND add_operator texp .)
    L_P             reduce using rule 122 (op2 -> AND add_operator texp .)
    CTE_CHAR        reduce using rule 122 (op2 -> AND add_operator texp .)
    CTE_F           reduce using rule 122 (op2 -> AND add_operator texp .)
    CTE_I           reduce using rule 122 (op2 -> AND add_operator texp .)
    CTE_NEG_I       reduce using rule 122 (op2 -> AND add_operator texp .)
    R_B             reduce using rule 122 (op2 -> AND add_operator texp .)
    R_P             reduce using rule 122 (op2 -> AND add_operator texp .)
    SEMICOLON       reduce using rule 122 (op2 -> AND add_operator texp .)
    COMA            reduce using rule 122 (op2 -> AND add_operator texp .)
    TO              reduce using rule 122 (op2 -> AND add_operator texp .)
    R_SB            reduce using rule 122 (op2 -> AND add_operator texp .)
    DO              reduce using rule 122 (op2 -> AND add_operator texp .)


state 214

    (38) function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B .

    FUNC            reduce using rule 38 (function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B .)
    MAIN            reduce using rule 38 (function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B .)


state 215

    (68) call_func_exp -> AMP ID call_func_era L_P . args R_P
    (60) args -> . args1
    (61) args -> . empty
    (62) args1 -> . add_fake expression param_check remove_fake args2
    (141) empty -> .
    (108) add_fake -> .

    R_P             reduce using rule 141 (empty -> .)
    L_P             reduce using rule 108 (add_fake -> .)
    AMP             reduce using rule 108 (add_fake -> .)
    ID              reduce using rule 108 (add_fake -> .)
    CTE_CHAR        reduce using rule 108 (add_fake -> .)
    CTE_F           reduce using rule 108 (add_fake -> .)
    CTE_I           reduce using rule 108 (add_fake -> .)
    CTE_NEG_I       reduce using rule 108 (add_fake -> .)

    args                           shift and go to state 226
    args1                          shift and go to state 199
    empty                          shift and go to state 200
    add_fake                       shift and go to state 201

state 216

    (67) call_func -> AMP ID call_func_era L_P args R_P . SEMICOLON
    (68) call_func_exp -> AMP ID call_func_era L_P args R_P .

    SEMICOLON       shift and go to state 227
    MULT            reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    DIV             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    MOD             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    PLUS            reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    MINUS           reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    LESSTHAN        reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    LESSTHANEQ      reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    GREATERTHAN     reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    GREATERTHANEQ   reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    EQ              reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    DIFERENT        reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    AND             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    OR              reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    AMP             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    RETURN          reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    READ            reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    PRINT           reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    IF              reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    ID              reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    WHILE           reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    FOR             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    L_P             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    CTE_CHAR        reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    CTE_F           reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    CTE_I           reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    CTE_NEG_I       reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    R_B             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)


state 217

    (62) args1 -> add_fake expression . param_check remove_fake args2
    (63) param_check -> .

    COMA            reduce using rule 63 (param_check -> .)
    R_P             reduce using rule 63 (param_check -> .)

    param_check                    shift and go to state 228

state 218

    (29) id1 -> verify_dim L_SB add_fake . expression remove_fake verify_quad_1 R_SB id2 add_base
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    expression                     shift and go to state 229
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 219

    (72) read_args -> add_fake expression remove_fake read_args1 .

    R_P             reduce using rule 72 (read_args -> add_fake expression remove_fake read_args1 .)


state 220

    (73) read_args1 -> COMA . add_fake expression remove_fake read_args1
    (108) add_fake -> .

    L_P             reduce using rule 108 (add_fake -> .)
    AMP             reduce using rule 108 (add_fake -> .)
    ID              reduce using rule 108 (add_fake -> .)
    CTE_CHAR        reduce using rule 108 (add_fake -> .)
    CTE_F           reduce using rule 108 (add_fake -> .)
    CTE_I           reduce using rule 108 (add_fake -> .)
    CTE_NEG_I       reduce using rule 108 (add_fake -> .)

    add_fake                       shift and go to state 230

state 221

    (74) read_args1 -> empty .

    R_P             reduce using rule 74 (read_args1 -> empty .)


state 222

    (77) write_args1 -> COMA write_args2 write_args1 .

    R_P             reduce using rule 77 (write_args1 -> COMA write_args2 write_args1 .)


state 223

    (81) decision_statement -> IF L_P expression R_P exp_type L_B . statements R_B decision_statement1
    (49) statements -> . statement statements
    (50) statements -> . empty
    (51) statement -> . assignation
    (52) statement -> . call_func
    (53) statement -> . return_func
    (54) statement -> . read
    (55) statement -> . write
    (56) statement -> . decision_statement
    (57) statement -> . repetition_statement
    (58) statement -> . expression
    (141) empty -> .
    (59) assignation -> . id EQUAL expression SEMICOLON
    (67) call_func -> . AMP ID call_func_era L_P args R_P SEMICOLON
    (70) return_func -> . RETURN L_P expression R_P SEMICOLON
    (71) read -> . READ L_P read_args R_P SEMICOLON
    (75) write -> . PRINT L_P write_args R_P SEMICOLON
    (81) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (86) repetition_statement -> . while_statement
    (87) repetition_statement -> . for_statement
    (94) expression -> . texp generate_quad_1 op1
    (27) id -> . ID set_id id_quad id1
    (92) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (88) for_statement -> . FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    R_B             reduce using rule 141 (empty -> .)
    AMP             shift and go to state 81
    RETURN          shift and go to state 83
    READ            shift and go to state 84
    PRINT           shift and go to state 85
    IF              shift and go to state 86
    ID              shift and go to state 82
    WHILE           shift and go to state 90
    FOR             shift and go to state 91
    L_P             shift and go to state 68
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    expression                     shift and go to state 79
    statements                     shift and go to state 231
    statement                      shift and go to state 70
    empty                          shift and go to state 71
    assignation                    shift and go to state 72
    call_func                      shift and go to state 73
    return_func                    shift and go to state 74
    read                           shift and go to state 75
    write                          shift and go to state 76
    decision_statement             shift and go to state 77
    repetition_statement           shift and go to state 78
    id                             shift and go to state 80
    while_statement                shift and go to state 87
    for_statement                  shift and go to state 88
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    cte                            shift and go to state 97

state 224

    (92) while_statement -> WHILE L_P breadcrumb expression R_P exp_type . do_statement
    (93) do_statement -> . DO L_B statements R_B

    DO              shift and go to state 233

    do_statement                   shift and go to state 232

state 225

    (88) for_statement -> FOR id for_id EQUAL expression for_id_quad . TO breadcrumb expression exp_type do_statement

    TO              shift and go to state 234


state 226

    (68) call_func_exp -> AMP ID call_func_era L_P args . R_P

    R_P             shift and go to state 235


state 227

    (67) call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .

    AMP             reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    RETURN          reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    READ            reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    PRINT           reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    IF              reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    ID              reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    WHILE           reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    FOR             reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    L_P             reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    CTE_CHAR        reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    CTE_F           reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    CTE_I           reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    CTE_NEG_I       reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)
    R_B             reduce using rule 67 (call_func -> AMP ID call_func_era L_P args R_P SEMICOLON .)


state 228

    (62) args1 -> add_fake expression param_check . remove_fake args2
    (109) remove_fake -> .

    COMA            reduce using rule 109 (remove_fake -> .)
    R_P             reduce using rule 109 (remove_fake -> .)

    remove_fake                    shift and go to state 236

state 229

    (29) id1 -> verify_dim L_SB add_fake expression . remove_fake verify_quad_1 R_SB id2 add_base
    (109) remove_fake -> .

    R_SB            reduce using rule 109 (remove_fake -> .)

    remove_fake                    shift and go to state 237

state 230

    (73) read_args1 -> COMA add_fake . expression remove_fake read_args1
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    expression                     shift and go to state 238
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 231

    (81) decision_statement -> IF L_P expression R_P exp_type L_B statements . R_B decision_statement1

    R_B             shift and go to state 239


state 232

    (92) while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .

    AMP             reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    RETURN          reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    READ            reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    PRINT           reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    IF              reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    ID              reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    WHILE           reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    FOR             reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    L_P             reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    CTE_CHAR        reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    CTE_F           reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    CTE_I           reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    CTE_NEG_I       reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)
    R_B             reduce using rule 92 (while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement .)


state 233

    (93) do_statement -> DO . L_B statements R_B

    L_B             shift and go to state 240


state 234

    (88) for_statement -> FOR id for_id EQUAL expression for_id_quad TO . breadcrumb expression exp_type do_statement
    (91) breadcrumb -> .

    L_P             reduce using rule 91 (breadcrumb -> .)
    AMP             reduce using rule 91 (breadcrumb -> .)
    ID              reduce using rule 91 (breadcrumb -> .)
    CTE_CHAR        reduce using rule 91 (breadcrumb -> .)
    CTE_F           reduce using rule 91 (breadcrumb -> .)
    CTE_I           reduce using rule 91 (breadcrumb -> .)
    CTE_NEG_I       reduce using rule 91 (breadcrumb -> .)

    breadcrumb                     shift and go to state 241

state 235

    (68) call_func_exp -> AMP ID call_func_era L_P args R_P .

    MULT            reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    DIV             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    MOD             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    PLUS            reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    MINUS           reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    LESSTHAN        reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    LESSTHANEQ      reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    GREATERTHAN     reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    GREATERTHANEQ   reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    EQ              reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    DIFERENT        reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    AND             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    OR              reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    R_P             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    SEMICOLON       reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    COMA            reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    AMP             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    RETURN          reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    READ            reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    PRINT           reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    IF              reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    ID              reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    WHILE           reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    FOR             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    L_P             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    CTE_CHAR        reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    CTE_F           reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    CTE_I           reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    CTE_NEG_I       reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    R_B             reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    TO              reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    R_SB            reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)
    DO              reduce using rule 68 (call_func_exp -> AMP ID call_func_era L_P args R_P .)


state 236

    (62) args1 -> add_fake expression param_check remove_fake . args2
    (64) args2 -> . COMA next_arg args1
    (65) args2 -> . empty
    (141) empty -> .

    COMA            shift and go to state 243
    R_P             reduce using rule 141 (empty -> .)

    args2                          shift and go to state 242
    empty                          shift and go to state 244

state 237

    (29) id1 -> verify_dim L_SB add_fake expression remove_fake . verify_quad_1 R_SB id2 add_base
    (34) verify_quad_1 -> .

    R_SB            reduce using rule 34 (verify_quad_1 -> .)

    verify_quad_1                  shift and go to state 245

state 238

    (73) read_args1 -> COMA add_fake expression . remove_fake read_args1
    (109) remove_fake -> .

    COMA            reduce using rule 109 (remove_fake -> .)
    R_P             reduce using rule 109 (remove_fake -> .)

    remove_fake                    shift and go to state 246

state 239

    (81) decision_statement -> IF L_P expression R_P exp_type L_B statements R_B . decision_statement1
    (82) decision_statement1 -> . ELSE else_jump L_B statements R_B
    (83) decision_statement1 -> . empty
    (141) empty -> .

    ELSE            shift and go to state 248
    AMP             reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    PRINT           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    L_P             reduce using rule 141 (empty -> .)
    CTE_CHAR        reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_NEG_I       reduce using rule 141 (empty -> .)
    R_B             reduce using rule 141 (empty -> .)

    decision_statement1            shift and go to state 247
    empty                          shift and go to state 249

state 240

    (93) do_statement -> DO L_B . statements R_B
    (49) statements -> . statement statements
    (50) statements -> . empty
    (51) statement -> . assignation
    (52) statement -> . call_func
    (53) statement -> . return_func
    (54) statement -> . read
    (55) statement -> . write
    (56) statement -> . decision_statement
    (57) statement -> . repetition_statement
    (58) statement -> . expression
    (141) empty -> .
    (59) assignation -> . id EQUAL expression SEMICOLON
    (67) call_func -> . AMP ID call_func_era L_P args R_P SEMICOLON
    (70) return_func -> . RETURN L_P expression R_P SEMICOLON
    (71) read -> . READ L_P read_args R_P SEMICOLON
    (75) write -> . PRINT L_P write_args R_P SEMICOLON
    (81) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (86) repetition_statement -> . while_statement
    (87) repetition_statement -> . for_statement
    (94) expression -> . texp generate_quad_1 op1
    (27) id -> . ID set_id id_quad id1
    (92) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (88) for_statement -> . FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    R_B             reduce using rule 141 (empty -> .)
    AMP             shift and go to state 81
    RETURN          shift and go to state 83
    READ            shift and go to state 84
    PRINT           shift and go to state 85
    IF              shift and go to state 86
    ID              shift and go to state 82
    WHILE           shift and go to state 90
    FOR             shift and go to state 91
    L_P             shift and go to state 68
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    statements                     shift and go to state 250
    statement                      shift and go to state 70
    empty                          shift and go to state 71
    assignation                    shift and go to state 72
    call_func                      shift and go to state 73
    return_func                    shift and go to state 74
    read                           shift and go to state 75
    write                          shift and go to state 76
    decision_statement             shift and go to state 77
    repetition_statement           shift and go to state 78
    expression                     shift and go to state 79
    id                             shift and go to state 80
    while_statement                shift and go to state 87
    for_statement                  shift and go to state 88
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    cte                            shift and go to state 97

state 241

    (88) for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb . expression exp_type do_statement
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    id                             shift and go to state 128
    expression                     shift and go to state 251
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    cte                            shift and go to state 97

state 242

    (62) args1 -> add_fake expression param_check remove_fake args2 .

    R_P             reduce using rule 62 (args1 -> add_fake expression param_check remove_fake args2 .)


state 243

    (64) args2 -> COMA . next_arg args1
    (66) next_arg -> .

    L_P             reduce using rule 66 (next_arg -> .)
    AMP             reduce using rule 66 (next_arg -> .)
    ID              reduce using rule 66 (next_arg -> .)
    CTE_CHAR        reduce using rule 66 (next_arg -> .)
    CTE_F           reduce using rule 66 (next_arg -> .)
    CTE_I           reduce using rule 66 (next_arg -> .)
    CTE_NEG_I       reduce using rule 66 (next_arg -> .)

    next_arg                       shift and go to state 252

state 244

    (65) args2 -> empty .

    R_P             reduce using rule 65 (args2 -> empty .)


state 245

    (29) id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 . R_SB id2 add_base

    R_SB            shift and go to state 253


state 246

    (73) read_args1 -> COMA add_fake expression remove_fake . read_args1
    (73) read_args1 -> . COMA add_fake expression remove_fake read_args1
    (74) read_args1 -> . empty
    (141) empty -> .

    COMA            shift and go to state 220
    R_P             reduce using rule 141 (empty -> .)

    read_args1                     shift and go to state 254
    empty                          shift and go to state 221

state 247

    (81) decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .

    AMP             reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    RETURN          reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    READ            reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    PRINT           reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    IF              reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    ID              reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    WHILE           reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    FOR             reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    L_P             reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    CTE_CHAR        reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    CTE_F           reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    CTE_I           reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    CTE_NEG_I       reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)
    R_B             reduce using rule 81 (decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1 .)


state 248

    (82) decision_statement1 -> ELSE . else_jump L_B statements R_B
    (85) else_jump -> .

    L_B             reduce using rule 85 (else_jump -> .)

    else_jump                      shift and go to state 255

state 249

    (83) decision_statement1 -> empty .

    AMP             reduce using rule 83 (decision_statement1 -> empty .)
    RETURN          reduce using rule 83 (decision_statement1 -> empty .)
    READ            reduce using rule 83 (decision_statement1 -> empty .)
    PRINT           reduce using rule 83 (decision_statement1 -> empty .)
    IF              reduce using rule 83 (decision_statement1 -> empty .)
    ID              reduce using rule 83 (decision_statement1 -> empty .)
    WHILE           reduce using rule 83 (decision_statement1 -> empty .)
    FOR             reduce using rule 83 (decision_statement1 -> empty .)
    L_P             reduce using rule 83 (decision_statement1 -> empty .)
    CTE_CHAR        reduce using rule 83 (decision_statement1 -> empty .)
    CTE_F           reduce using rule 83 (decision_statement1 -> empty .)
    CTE_I           reduce using rule 83 (decision_statement1 -> empty .)
    CTE_NEG_I       reduce using rule 83 (decision_statement1 -> empty .)
    R_B             reduce using rule 83 (decision_statement1 -> empty .)


state 250

    (93) do_statement -> DO L_B statements . R_B

    R_B             shift and go to state 256


state 251

    (88) for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression . exp_type do_statement
    (84) exp_type -> .

    DO              reduce using rule 84 (exp_type -> .)

    exp_type                       shift and go to state 257

state 252

    (64) args2 -> COMA next_arg . args1
    (62) args1 -> . add_fake expression param_check remove_fake args2
    (108) add_fake -> .

    L_P             reduce using rule 108 (add_fake -> .)
    AMP             reduce using rule 108 (add_fake -> .)
    ID              reduce using rule 108 (add_fake -> .)
    CTE_CHAR        reduce using rule 108 (add_fake -> .)
    CTE_F           reduce using rule 108 (add_fake -> .)
    CTE_I           reduce using rule 108 (add_fake -> .)
    CTE_NEG_I       reduce using rule 108 (add_fake -> .)

    args1                          shift and go to state 258
    add_fake                       shift and go to state 201

state 253

    (29) id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB . id2 add_base
    (31) id2 -> . L_SB add_fake expression remove_fake verify_quad_2 R_SB
    (32) id2 -> . empty
    (141) empty -> .

    L_SB            shift and go to state 259
    EQUAL           reduce using rule 141 (empty -> .)
    MULT            reduce using rule 141 (empty -> .)
    DIV             reduce using rule 141 (empty -> .)
    MOD             reduce using rule 141 (empty -> .)
    PLUS            reduce using rule 141 (empty -> .)
    MINUS           reduce using rule 141 (empty -> .)
    LESSTHAN        reduce using rule 141 (empty -> .)
    LESSTHANEQ      reduce using rule 141 (empty -> .)
    GREATERTHAN     reduce using rule 141 (empty -> .)
    GREATERTHANEQ   reduce using rule 141 (empty -> .)
    EQ              reduce using rule 141 (empty -> .)
    DIFERENT        reduce using rule 141 (empty -> .)
    AND             reduce using rule 141 (empty -> .)
    OR              reduce using rule 141 (empty -> .)
    AMP             reduce using rule 141 (empty -> .)
    RETURN          reduce using rule 141 (empty -> .)
    READ            reduce using rule 141 (empty -> .)
    PRINT           reduce using rule 141 (empty -> .)
    IF              reduce using rule 141 (empty -> .)
    ID              reduce using rule 141 (empty -> .)
    WHILE           reduce using rule 141 (empty -> .)
    FOR             reduce using rule 141 (empty -> .)
    L_P             reduce using rule 141 (empty -> .)
    CTE_CHAR        reduce using rule 141 (empty -> .)
    CTE_F           reduce using rule 141 (empty -> .)
    CTE_I           reduce using rule 141 (empty -> .)
    CTE_NEG_I       reduce using rule 141 (empty -> .)
    R_B             reduce using rule 141 (empty -> .)
    R_P             reduce using rule 141 (empty -> .)
    SEMICOLON       reduce using rule 141 (empty -> .)
    COMA            reduce using rule 141 (empty -> .)
    TO              reduce using rule 141 (empty -> .)
    R_SB            reduce using rule 141 (empty -> .)
    DO              reduce using rule 141 (empty -> .)

    id2                            shift and go to state 260
    empty                          shift and go to state 261

state 254

    (73) read_args1 -> COMA add_fake expression remove_fake read_args1 .

    R_P             reduce using rule 73 (read_args1 -> COMA add_fake expression remove_fake read_args1 .)


state 255

    (82) decision_statement1 -> ELSE else_jump . L_B statements R_B

    L_B             shift and go to state 262


state 256

    (93) do_statement -> DO L_B statements R_B .

    AMP             reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    RETURN          reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    READ            reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    PRINT           reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    IF              reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    ID              reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    WHILE           reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    FOR             reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    L_P             reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    CTE_CHAR        reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    CTE_F           reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    CTE_I           reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    CTE_NEG_I       reduce using rule 93 (do_statement -> DO L_B statements R_B .)
    R_B             reduce using rule 93 (do_statement -> DO L_B statements R_B .)


state 257

    (88) for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type . do_statement
    (93) do_statement -> . DO L_B statements R_B

    DO              shift and go to state 233

    do_statement                   shift and go to state 263

state 258

    (64) args2 -> COMA next_arg args1 .

    R_P             reduce using rule 64 (args2 -> COMA next_arg args1 .)


state 259

    (31) id2 -> L_SB . add_fake expression remove_fake verify_quad_2 R_SB
    (108) add_fake -> .

    L_P             reduce using rule 108 (add_fake -> .)
    AMP             reduce using rule 108 (add_fake -> .)
    ID              reduce using rule 108 (add_fake -> .)
    CTE_CHAR        reduce using rule 108 (add_fake -> .)
    CTE_F           reduce using rule 108 (add_fake -> .)
    CTE_I           reduce using rule 108 (add_fake -> .)
    CTE_NEG_I       reduce using rule 108 (add_fake -> .)

    add_fake                       shift and go to state 264

state 260

    (29) id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 . add_base
    (36) add_base -> .

    EQUAL           reduce using rule 36 (add_base -> .)
    MULT            reduce using rule 36 (add_base -> .)
    DIV             reduce using rule 36 (add_base -> .)
    MOD             reduce using rule 36 (add_base -> .)
    PLUS            reduce using rule 36 (add_base -> .)
    MINUS           reduce using rule 36 (add_base -> .)
    LESSTHAN        reduce using rule 36 (add_base -> .)
    LESSTHANEQ      reduce using rule 36 (add_base -> .)
    GREATERTHAN     reduce using rule 36 (add_base -> .)
    GREATERTHANEQ   reduce using rule 36 (add_base -> .)
    EQ              reduce using rule 36 (add_base -> .)
    DIFERENT        reduce using rule 36 (add_base -> .)
    AND             reduce using rule 36 (add_base -> .)
    OR              reduce using rule 36 (add_base -> .)
    AMP             reduce using rule 36 (add_base -> .)
    RETURN          reduce using rule 36 (add_base -> .)
    READ            reduce using rule 36 (add_base -> .)
    PRINT           reduce using rule 36 (add_base -> .)
    IF              reduce using rule 36 (add_base -> .)
    ID              reduce using rule 36 (add_base -> .)
    WHILE           reduce using rule 36 (add_base -> .)
    FOR             reduce using rule 36 (add_base -> .)
    L_P             reduce using rule 36 (add_base -> .)
    CTE_CHAR        reduce using rule 36 (add_base -> .)
    CTE_F           reduce using rule 36 (add_base -> .)
    CTE_I           reduce using rule 36 (add_base -> .)
    CTE_NEG_I       reduce using rule 36 (add_base -> .)
    R_B             reduce using rule 36 (add_base -> .)
    R_P             reduce using rule 36 (add_base -> .)
    SEMICOLON       reduce using rule 36 (add_base -> .)
    COMA            reduce using rule 36 (add_base -> .)
    TO              reduce using rule 36 (add_base -> .)
    R_SB            reduce using rule 36 (add_base -> .)
    DO              reduce using rule 36 (add_base -> .)

    add_base                       shift and go to state 265

state 261

    (32) id2 -> empty .

    EQUAL           reduce using rule 32 (id2 -> empty .)
    MULT            reduce using rule 32 (id2 -> empty .)
    DIV             reduce using rule 32 (id2 -> empty .)
    MOD             reduce using rule 32 (id2 -> empty .)
    PLUS            reduce using rule 32 (id2 -> empty .)
    MINUS           reduce using rule 32 (id2 -> empty .)
    LESSTHAN        reduce using rule 32 (id2 -> empty .)
    LESSTHANEQ      reduce using rule 32 (id2 -> empty .)
    GREATERTHAN     reduce using rule 32 (id2 -> empty .)
    GREATERTHANEQ   reduce using rule 32 (id2 -> empty .)
    EQ              reduce using rule 32 (id2 -> empty .)
    DIFERENT        reduce using rule 32 (id2 -> empty .)
    AND             reduce using rule 32 (id2 -> empty .)
    OR              reduce using rule 32 (id2 -> empty .)
    AMP             reduce using rule 32 (id2 -> empty .)
    RETURN          reduce using rule 32 (id2 -> empty .)
    READ            reduce using rule 32 (id2 -> empty .)
    PRINT           reduce using rule 32 (id2 -> empty .)
    IF              reduce using rule 32 (id2 -> empty .)
    ID              reduce using rule 32 (id2 -> empty .)
    WHILE           reduce using rule 32 (id2 -> empty .)
    FOR             reduce using rule 32 (id2 -> empty .)
    L_P             reduce using rule 32 (id2 -> empty .)
    CTE_CHAR        reduce using rule 32 (id2 -> empty .)
    CTE_F           reduce using rule 32 (id2 -> empty .)
    CTE_I           reduce using rule 32 (id2 -> empty .)
    CTE_NEG_I       reduce using rule 32 (id2 -> empty .)
    R_B             reduce using rule 32 (id2 -> empty .)
    R_P             reduce using rule 32 (id2 -> empty .)
    SEMICOLON       reduce using rule 32 (id2 -> empty .)
    COMA            reduce using rule 32 (id2 -> empty .)
    TO              reduce using rule 32 (id2 -> empty .)
    R_SB            reduce using rule 32 (id2 -> empty .)
    DO              reduce using rule 32 (id2 -> empty .)


state 262

    (82) decision_statement1 -> ELSE else_jump L_B . statements R_B
    (49) statements -> . statement statements
    (50) statements -> . empty
    (51) statement -> . assignation
    (52) statement -> . call_func
    (53) statement -> . return_func
    (54) statement -> . read
    (55) statement -> . write
    (56) statement -> . decision_statement
    (57) statement -> . repetition_statement
    (58) statement -> . expression
    (141) empty -> .
    (59) assignation -> . id EQUAL expression SEMICOLON
    (67) call_func -> . AMP ID call_func_era L_P args R_P SEMICOLON
    (70) return_func -> . RETURN L_P expression R_P SEMICOLON
    (71) read -> . READ L_P read_args R_P SEMICOLON
    (75) write -> . PRINT L_P write_args R_P SEMICOLON
    (81) decision_statement -> . IF L_P expression R_P exp_type L_B statements R_B decision_statement1
    (86) repetition_statement -> . while_statement
    (87) repetition_statement -> . for_statement
    (94) expression -> . texp generate_quad_1 op1
    (27) id -> . ID set_id id_quad id1
    (92) while_statement -> . WHILE L_P breadcrumb expression R_P exp_type do_statement
    (88) for_statement -> . FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    R_B             reduce using rule 141 (empty -> .)
    AMP             shift and go to state 81
    RETURN          shift and go to state 83
    READ            shift and go to state 84
    PRINT           shift and go to state 85
    IF              shift and go to state 86
    ID              shift and go to state 82
    WHILE           shift and go to state 90
    FOR             shift and go to state 91
    L_P             shift and go to state 68
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    statements                     shift and go to state 266
    statement                      shift and go to state 70
    empty                          shift and go to state 71
    assignation                    shift and go to state 72
    call_func                      shift and go to state 73
    return_func                    shift and go to state 74
    read                           shift and go to state 75
    write                          shift and go to state 76
    decision_statement             shift and go to state 77
    repetition_statement           shift and go to state 78
    expression                     shift and go to state 79
    id                             shift and go to state 80
    while_statement                shift and go to state 87
    for_statement                  shift and go to state 88
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    cte                            shift and go to state 97

state 263

    (88) for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .

    AMP             reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    RETURN          reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    READ            reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    PRINT           reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    IF              reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    ID              reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    WHILE           reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    FOR             reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    L_P             reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    CTE_CHAR        reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    CTE_F           reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    CTE_I           reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    CTE_NEG_I       reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)
    R_B             reduce using rule 88 (for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement .)


state 264

    (31) id2 -> L_SB add_fake . expression remove_fake verify_quad_2 R_SB
    (94) expression -> . texp generate_quad_1 op1
    (95) texp -> . gexp generate_quad_2 op2
    (96) gexp -> . mexp generate_quad_3 op3aux
    (97) mexp -> . term generate_quad_4 op4aux
    (98) term -> . fact generate_quad_5 op5aux
    (104) fact -> . call_func_exp
    (105) fact -> . id
    (106) fact -> . L_P add_fake expression R_P remove_fake
    (107) fact -> . cte
    (68) call_func_exp -> . AMP ID call_func_era L_P args R_P
    (27) id -> . ID set_id id_quad id1
    (111) cte -> . CTE_CHAR add_cte_char
    (112) cte -> . CTE_F add_cte_float
    (113) cte -> . CTE_I add_cte_int
    (114) cte -> . CTE_NEG_I add_cte_int

    L_P             shift and go to state 68
    AMP             shift and go to state 129
    ID              shift and go to state 82
    CTE_CHAR        shift and go to state 98
    CTE_F           shift and go to state 99
    CTE_I           shift and go to state 100
    CTE_NEG_I       shift and go to state 101

    expression                     shift and go to state 267
    texp                           shift and go to state 89
    gexp                           shift and go to state 92
    mexp                           shift and go to state 93
    term                           shift and go to state 94
    fact                           shift and go to state 95
    call_func_exp                  shift and go to state 96
    id                             shift and go to state 128
    cte                            shift and go to state 97

state 265

    (29) id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .

    EQUAL           reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    MULT            reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    DIV             reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    MOD             reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    PLUS            reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    MINUS           reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    LESSTHAN        reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    LESSTHANEQ      reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    GREATERTHAN     reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    GREATERTHANEQ   reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    EQ              reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    DIFERENT        reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    AND             reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    OR              reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    AMP             reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    RETURN          reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    READ            reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    PRINT           reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    IF              reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    ID              reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    WHILE           reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    FOR             reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    L_P             reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    CTE_CHAR        reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    CTE_F           reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    CTE_I           reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    CTE_NEG_I       reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    R_B             reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    R_P             reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    SEMICOLON       reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    COMA            reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    TO              reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    R_SB            reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)
    DO              reduce using rule 29 (id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base .)


state 266

    (82) decision_statement1 -> ELSE else_jump L_B statements . R_B

    R_B             shift and go to state 268


state 267

    (31) id2 -> L_SB add_fake expression . remove_fake verify_quad_2 R_SB
    (109) remove_fake -> .

    R_SB            reduce using rule 109 (remove_fake -> .)

    remove_fake                    shift and go to state 269

state 268

    (82) decision_statement1 -> ELSE else_jump L_B statements R_B .

    AMP             reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    RETURN          reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    READ            reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    PRINT           reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    IF              reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    ID              reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    WHILE           reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    FOR             reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    L_P             reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    CTE_CHAR        reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    CTE_F           reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    CTE_I           reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    CTE_NEG_I       reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)
    R_B             reduce using rule 82 (decision_statement1 -> ELSE else_jump L_B statements R_B .)


state 269

    (31) id2 -> L_SB add_fake expression remove_fake . verify_quad_2 R_SB
    (35) verify_quad_2 -> .

    R_SB            reduce using rule 35 (verify_quad_2 -> .)

    verify_quad_2                  shift and go to state 270

state 270

    (31) id2 -> L_SB add_fake expression remove_fake verify_quad_2 . R_SB

    R_SB            shift and go to state 271


state 271

    (31) id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .

    EQUAL           reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    MULT            reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    DIV             reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    MOD             reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    PLUS            reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    MINUS           reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    LESSTHAN        reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    LESSTHANEQ      reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    GREATERTHAN     reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    GREATERTHANEQ   reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    EQ              reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    DIFERENT        reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    AND             reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    OR              reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    AMP             reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    RETURN          reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    READ            reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    PRINT           reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    IF              reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    ID              reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    WHILE           reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    FOR             reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    L_P             reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    CTE_CHAR        reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    CTE_F           reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    CTE_I           reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    CTE_NEG_I       reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    R_B             reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    R_P             reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    SEMICOLON       reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    COMA            reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    TO              reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    R_SB            reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)
    DO              reduce using rule 31 (id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB .)

