
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COMA CTE_BOOLEAN CTE_CHAR CTE_F CTE_I CTE_STRING DIFERENT DIV DO ELSE EQ EQUAL FLOAT FOR FUNC GREATERTHAN GREATERTHANEQ ID IF INT LESSTHAN LESSTHANEQ L_B L_P L_SB MAIN MINUS MOD MULT OR PLUS PRINT PROGRAM READ RETURN R_B R_P R_SB SEMICOLON TO VAR VOID WHILEprogram : PROGRAM ID SEMICOLON g_var funcs mainmain : MAIN L_P params R_P var_declaration L_B statements R_Btype : INT \n            | FLOAT \n            | CHARg_var : var_declarationfuncs : function funcs\n            | emptyvar_declaration : VAR var1\n                        | emptyvar1 : var_type dec_id var2 SEMICOLON var4var2 : COMA dec_id var3\n            | emptyvar3 : var2var4 : var1\n            | emptydec_id : ID dec_id1dec_id1 : L_SB CTE_I R_SB dec_id2\n            | emptydec_id2 : L_SB CTE_I R_SB\n        | emptyid : ID id1id1 : L_SB expression R_SB id2\n            | emptyid2 : L_SB expression R_SB\n        | emptyvar_type : typefunction : FUNC func_type ID L_P params R_P var_declaration L_B statements R_Bfunc_type : VOID\n                | typeparams : var_type id params1\n            | emptyparams1 : COMA params\n                | emptystatements : statement statements\n                | emptystatement : assignation\n                | call_func\n                | return_func\n                | read\n                | write\n                | decision_statement\n                | repetition_statement\n                | expressionassignation : id EQUAL expression SEMICOLONargs : args1\n            | emptyargs1 : expression args2args2 : COMA args1\n            | emptycall_func :  ID L_P args R_P SEMICOLONreturn_func : RETURN L_P expression R_P SEMICOLONread : READ L_P read_args R_P SEMICOLONread_args : expression read_args1read_args1 : COMA expression read_args1\n                | emptywrite : PRINT L_P write_args R_P SEMICOLONwrite_args : write_args2 write_args1write_args1 : COMA write_args2 write_args1\n                    | emptywrite_args2 : expression\n                | CTE_STRINGdecision_statement : IF L_P expression R_P L_B statements R_B decision_statement1decision_statement1 : ELSE L_B statements R_B\n                            | emptyrepetition_statement : while_statement\n                            | for_statementfor_statement : FOR id EQUAL expression TO expression do_statementwhile_statement : WHILE L_P expression R_P do_statementdo_statement :  DO L_B statements R_Bexpression : texp op1texp : gexp op2gexp : nexp op3auxnexp : term op4auxterm : fact op5auxfact : ID fact1\n            | L_P expression R_P\n            | ctefact1 : L_P args R_P\n            | id1cte : CTE_I\n            | CTE_F\n            | CTE_CHARop1 : OR expression\n            | emptyop2 : AND texp\n            | emptyop3 : LESSTHAN\n            | LESSTHANEQ\xa0\n            | GREATERTHAN\n            | GREATERTHANEQ\n            | EQ\n            | DIFERENTop3aux : op3 gexp\n            | emptyop4 : PLUS\n            | MINUSop4aux : op4 nexp\n            | emptyop5 : MULT\n        | DIV\n        | MODop5aux : op5 term\n            | empty\n        empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,133,],[0,-1,-2,]),'ID':([2,14,15,16,17,18,22,23,24,30,36,57,58,63,66,67,68,69,70,71,72,73,74,75,76,80,82,83,84,85,86,87,88,89,91,96,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,156,169,171,173,176,177,181,185,190,192,193,194,196,198,199,201,205,207,209,210,212,213,214,216,],[3,26,-27,-3,-4,-5,28,-29,-30,26,44,71,-24,91,-105,-105,-105,-105,-105,-105,71,-78,-81,-82,-83,91,-37,-38,-39,-40,-41,-42,-43,-44,-105,-66,-67,44,-105,-71,71,-85,-72,71,-87,-73,71,-95,-88,-89,-90,-91,-92,-93,-74,71,-99,-96,-97,-75,71,-104,-100,-101,-102,-76,71,-80,91,71,71,-80,71,71,71,71,71,71,-23,-26,-84,-86,-94,-98,-103,-77,71,-79,71,-45,-79,71,71,-25,-51,-52,-53,-57,91,-69,71,91,-105,-68,-63,-65,-70,91,-64,]),'SEMICOLON':([3,25,26,29,31,32,34,40,49,50,51,58,61,62,66,67,68,69,70,71,73,74,75,76,100,101,103,104,106,107,109,116,118,121,123,127,129,132,145,146,147,148,149,150,151,156,158,171,177,178,179,183,190,],[4,-105,-105,39,-13,-17,-19,-105,-12,-14,-105,-24,-18,-21,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,-20,-23,-26,-84,-86,-94,-98,-103,-77,176,-79,192,193,194,196,-25,]),'VAR':([4,42,59,],[7,7,7,]),'FUNC':([4,5,6,8,10,13,39,46,47,48,175,],[-105,12,-6,-10,12,-9,-105,-11,-15,-16,-28,]),'MAIN':([4,5,6,8,9,10,11,13,21,39,46,47,48,175,],[-105,-105,-6,-10,20,-105,-8,-9,-7,-105,-11,-15,-16,-28,]),'INT':([7,12,27,38,39,54,],[16,16,16,16,16,16,]),'FLOAT':([7,12,27,38,39,54,],[17,17,17,17,17,17,]),'CHAR':([7,12,27,38,39,54,],[18,18,18,18,18,18,]),'L_B':([8,13,39,42,46,47,48,52,59,77,187,200,211,],[-10,-9,-105,-105,-11,-15,-16,63,-105,131,198,205,214,]),'VOID':([12,],[23,]),'L_P':([20,28,57,58,63,66,67,68,69,70,71,72,73,74,75,76,80,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,156,169,171,173,176,177,181,185,190,192,193,194,196,198,199,201,205,207,209,210,212,213,214,216,],[27,38,72,-24,72,-105,-105,-105,-105,-105,128,72,-78,-81,-82,-83,72,-37,-38,-39,-40,-41,-42,-43,-44,136,138,139,140,141,-66,-67,142,-105,-71,72,-85,-72,72,-87,-73,72,-95,-88,-89,-90,-91,-92,-93,-74,72,-99,-96,-97,-75,72,-104,-100,-101,-102,-76,72,-80,72,72,72,-80,72,72,72,72,72,72,-23,-26,-84,-86,-94,-98,-103,-77,72,-79,72,-45,-79,72,72,-25,-51,-52,-53,-57,72,-69,72,72,-105,-68,-63,-65,-70,72,-64,]),'COMA':([25,26,32,34,40,43,44,51,56,58,61,62,66,67,68,69,70,71,73,74,75,76,100,101,103,104,106,107,109,116,118,121,123,127,129,132,145,146,147,148,149,150,151,155,156,162,164,165,166,171,190,195,197,],[30,-105,-17,-19,30,54,-105,-105,-22,-24,-18,-21,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,-20,-23,-26,-84,-86,-94,-98,-103,173,-77,181,185,-61,-62,-79,-25,181,185,]),'L_SB':([26,44,51,71,91,100,],[33,57,60,57,57,144,]),'R_P':([27,35,37,38,43,44,45,53,54,55,56,58,64,66,67,68,69,70,71,73,74,75,76,100,101,103,104,106,107,109,116,118,121,123,127,128,129,130,136,145,146,147,148,149,150,151,152,153,154,155,156,159,160,161,162,163,164,165,166,167,168,171,172,174,180,182,184,186,190,191,195,197,202,203,],[-105,42,-32,-105,-105,-105,59,-31,-105,-34,-22,-24,-33,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-105,-80,156,-105,-23,-26,-84,-86,-94,-98,-103,171,-46,-47,-105,-77,177,178,179,-105,183,-105,-61,-62,187,188,-79,-48,-50,-54,-56,-58,-60,-25,-49,-105,-105,-55,-59,]),'CTE_I':([33,57,58,60,63,66,67,68,69,70,71,72,73,74,75,76,80,82,83,84,85,86,87,88,89,91,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,156,169,171,173,176,177,181,185,190,192,193,194,196,198,199,201,205,207,209,210,212,213,214,216,],[41,74,-24,78,74,-105,-105,-105,-105,-105,-105,74,-78,-81,-82,-83,74,-37,-38,-39,-40,-41,-42,-43,-44,-105,-66,-67,-105,-71,74,-85,-72,74,-87,-73,74,-95,-88,-89,-90,-91,-92,-93,-74,74,-99,-96,-97,-75,74,-104,-100,-101,-102,-76,74,-80,74,74,74,-80,74,74,74,74,74,74,-23,-26,-84,-86,-94,-98,-103,-77,74,-79,74,-45,-79,74,74,-25,-51,-52,-53,-57,74,-69,74,74,-105,-68,-63,-65,-70,74,-64,]),'R_SB':([41,58,65,66,67,68,69,70,71,73,74,75,76,78,100,101,103,104,106,107,109,116,118,121,123,127,129,145,146,147,148,149,150,151,156,170,171,190,],[51,-24,100,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,132,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,-23,-26,-84,-86,-94,-98,-103,-77,190,-79,-25,]),'EQUAL':([44,56,58,90,91,100,137,143,145,146,190,],[-105,-22,-24,135,-105,-105,-22,169,-23,-26,-25,]),'CTE_F':([57,58,63,66,67,68,69,70,71,72,73,74,75,76,80,82,83,84,85,86,87,88,89,91,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,156,169,171,173,176,177,181,185,190,192,193,194,196,198,199,201,205,207,209,210,212,213,214,216,],[75,-24,75,-105,-105,-105,-105,-105,-105,75,-78,-81,-82,-83,75,-37,-38,-39,-40,-41,-42,-43,-44,-105,-66,-67,-105,-71,75,-85,-72,75,-87,-73,75,-95,-88,-89,-90,-91,-92,-93,-74,75,-99,-96,-97,-75,75,-104,-100,-101,-102,-76,75,-80,75,75,75,-80,75,75,75,75,75,75,-23,-26,-84,-86,-94,-98,-103,-77,75,-79,75,-45,-79,75,75,-25,-51,-52,-53,-57,75,-69,75,75,-105,-68,-63,-65,-70,75,-64,]),'CTE_CHAR':([57,58,63,66,67,68,69,70,71,72,73,74,75,76,80,82,83,84,85,86,87,88,89,91,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,135,136,137,138,139,140,141,142,144,145,146,147,148,149,150,151,156,169,171,173,176,177,181,185,190,192,193,194,196,198,199,201,205,207,209,210,212,213,214,216,],[76,-24,76,-105,-105,-105,-105,-105,-105,76,-78,-81,-82,-83,76,-37,-38,-39,-40,-41,-42,-43,-44,-105,-66,-67,-105,-71,76,-85,-72,76,-87,-73,76,-95,-88,-89,-90,-91,-92,-93,-74,76,-99,-96,-97,-75,76,-104,-100,-101,-102,-76,76,-80,76,76,76,-80,76,76,76,76,76,76,-23,-26,-84,-86,-94,-98,-103,-77,76,-79,76,-45,-79,76,76,-25,-51,-52,-53,-57,76,-69,76,76,-105,-68,-63,-65,-70,76,-64,]),'MULT':([58,70,71,73,74,75,76,91,100,127,129,137,145,146,156,171,177,190,],[-24,124,-105,-78,-81,-82,-83,-105,-105,-76,-80,-80,-23,-26,-77,-79,-79,-25,]),'DIV':([58,70,71,73,74,75,76,91,100,127,129,137,145,146,156,171,177,190,],[-24,125,-105,-78,-81,-82,-83,-105,-105,-76,-80,-80,-23,-26,-77,-79,-79,-25,]),'MOD':([58,70,71,73,74,75,76,91,100,127,129,137,145,146,156,171,177,190,],[-24,126,-105,-78,-81,-82,-83,-105,-105,-76,-80,-80,-23,-26,-77,-79,-79,-25,]),'PLUS':([58,69,70,71,73,74,75,76,91,100,121,123,127,129,137,145,146,151,156,171,177,190,],[-24,119,-105,-105,-78,-81,-82,-83,-105,-105,-75,-104,-76,-80,-80,-23,-26,-103,-77,-79,-79,-25,]),'MINUS':([58,69,70,71,73,74,75,76,91,100,121,123,127,129,137,145,146,151,156,171,177,190,],[-24,120,-105,-105,-78,-81,-82,-83,-105,-105,-75,-104,-76,-80,-80,-23,-26,-103,-77,-79,-79,-25,]),'LESSTHAN':([58,68,69,70,71,73,74,75,76,91,100,116,118,121,123,127,129,137,145,146,150,151,156,171,177,190,],[-24,110,-105,-105,-105,-78,-81,-82,-83,-105,-105,-74,-99,-75,-104,-76,-80,-80,-23,-26,-98,-103,-77,-79,-79,-25,]),'LESSTHANEQ':([58,68,69,70,71,73,74,75,76,91,100,116,118,121,123,127,129,137,145,146,150,151,156,171,177,190,],[-24,111,-105,-105,-105,-78,-81,-82,-83,-105,-105,-74,-99,-75,-104,-76,-80,-80,-23,-26,-98,-103,-77,-79,-79,-25,]),'GREATERTHAN':([58,68,69,70,71,73,74,75,76,91,100,116,118,121,123,127,129,137,145,146,150,151,156,171,177,190,],[-24,112,-105,-105,-105,-78,-81,-82,-83,-105,-105,-74,-99,-75,-104,-76,-80,-80,-23,-26,-98,-103,-77,-79,-79,-25,]),'GREATERTHANEQ':([58,68,69,70,71,73,74,75,76,91,100,116,118,121,123,127,129,137,145,146,150,151,156,171,177,190,],[-24,113,-105,-105,-105,-78,-81,-82,-83,-105,-105,-74,-99,-75,-104,-76,-80,-80,-23,-26,-98,-103,-77,-79,-79,-25,]),'EQ':([58,68,69,70,71,73,74,75,76,91,100,116,118,121,123,127,129,137,145,146,150,151,156,171,177,190,],[-24,114,-105,-105,-105,-78,-81,-82,-83,-105,-105,-74,-99,-75,-104,-76,-80,-80,-23,-26,-98,-103,-77,-79,-79,-25,]),'DIFERENT':([58,68,69,70,71,73,74,75,76,91,100,116,118,121,123,127,129,137,145,146,150,151,156,171,177,190,],[-24,115,-105,-105,-105,-78,-81,-82,-83,-105,-105,-74,-99,-75,-104,-76,-80,-80,-23,-26,-98,-103,-77,-79,-79,-25,]),'AND':([58,67,68,69,70,71,73,74,75,76,91,100,107,109,116,118,121,123,127,129,137,145,146,149,150,151,156,171,177,190,],[-24,105,-105,-105,-105,-105,-78,-81,-82,-83,-105,-105,-73,-95,-74,-99,-75,-104,-76,-80,-80,-23,-26,-94,-98,-103,-77,-79,-79,-25,]),'OR':([58,66,67,68,69,70,71,73,74,75,76,91,100,104,106,107,109,116,118,121,123,127,129,137,145,146,148,149,150,151,156,171,177,190,],[-24,102,-105,-105,-105,-105,-105,-78,-81,-82,-83,-105,-105,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,-80,-23,-26,-86,-94,-98,-103,-77,-79,-79,-25,]),'RETURN':([58,63,66,67,68,69,70,71,73,74,75,76,80,82,83,84,85,86,87,88,89,91,96,97,100,101,103,104,106,107,109,116,118,121,123,127,129,131,137,145,146,147,148,149,150,151,156,171,176,177,190,192,193,194,196,198,199,205,207,209,210,212,213,214,216,],[-24,92,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,92,-37,-38,-39,-40,-41,-42,-43,-44,-105,-66,-67,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,92,-80,-23,-26,-84,-86,-94,-98,-103,-77,-79,-45,-79,-25,-51,-52,-53,-57,92,-69,92,-105,-68,-63,-65,-70,92,-64,]),'READ':([58,63,66,67,68,69,70,71,73,74,75,76,80,82,83,84,85,86,87,88,89,91,96,97,100,101,103,104,106,107,109,116,118,121,123,127,129,131,137,145,146,147,148,149,150,151,156,171,176,177,190,192,193,194,196,198,199,205,207,209,210,212,213,214,216,],[-24,93,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,93,-37,-38,-39,-40,-41,-42,-43,-44,-105,-66,-67,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,93,-80,-23,-26,-84,-86,-94,-98,-103,-77,-79,-45,-79,-25,-51,-52,-53,-57,93,-69,93,-105,-68,-63,-65,-70,93,-64,]),'PRINT':([58,63,66,67,68,69,70,71,73,74,75,76,80,82,83,84,85,86,87,88,89,91,96,97,100,101,103,104,106,107,109,116,118,121,123,127,129,131,137,145,146,147,148,149,150,151,156,171,176,177,190,192,193,194,196,198,199,205,207,209,210,212,213,214,216,],[-24,94,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,94,-37,-38,-39,-40,-41,-42,-43,-44,-105,-66,-67,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,94,-80,-23,-26,-84,-86,-94,-98,-103,-77,-79,-45,-79,-25,-51,-52,-53,-57,94,-69,94,-105,-68,-63,-65,-70,94,-64,]),'IF':([58,63,66,67,68,69,70,71,73,74,75,76,80,82,83,84,85,86,87,88,89,91,96,97,100,101,103,104,106,107,109,116,118,121,123,127,129,131,137,145,146,147,148,149,150,151,156,171,176,177,190,192,193,194,196,198,199,205,207,209,210,212,213,214,216,],[-24,95,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,95,-37,-38,-39,-40,-41,-42,-43,-44,-105,-66,-67,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,95,-80,-23,-26,-84,-86,-94,-98,-103,-77,-79,-45,-79,-25,-51,-52,-53,-57,95,-69,95,-105,-68,-63,-65,-70,95,-64,]),'WHILE':([58,63,66,67,68,69,70,71,73,74,75,76,80,82,83,84,85,86,87,88,89,91,96,97,100,101,103,104,106,107,109,116,118,121,123,127,129,131,137,145,146,147,148,149,150,151,156,171,176,177,190,192,193,194,196,198,199,205,207,209,210,212,213,214,216,],[-24,98,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,98,-37,-38,-39,-40,-41,-42,-43,-44,-105,-66,-67,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,98,-80,-23,-26,-84,-86,-94,-98,-103,-77,-79,-45,-79,-25,-51,-52,-53,-57,98,-69,98,-105,-68,-63,-65,-70,98,-64,]),'FOR':([58,63,66,67,68,69,70,71,73,74,75,76,80,82,83,84,85,86,87,88,89,91,96,97,100,101,103,104,106,107,109,116,118,121,123,127,129,131,137,145,146,147,148,149,150,151,156,171,176,177,190,192,193,194,196,198,199,205,207,209,210,212,213,214,216,],[-24,99,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,99,-37,-38,-39,-40,-41,-42,-43,-44,-105,-66,-67,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,99,-80,-23,-26,-84,-86,-94,-98,-103,-77,-79,-45,-79,-25,-51,-52,-53,-57,99,-69,99,-105,-68,-63,-65,-70,99,-64,]),'R_B':([58,63,66,67,68,69,70,71,73,74,75,76,79,80,81,82,83,84,85,86,87,88,89,91,96,97,100,101,103,104,106,107,109,116,118,121,123,127,129,131,134,137,145,146,147,148,149,150,151,156,157,171,176,177,190,192,193,194,196,198,199,204,205,207,208,209,210,212,213,214,215,216,],[-24,-105,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,133,-105,-36,-37,-38,-39,-40,-41,-42,-43,-44,-105,-66,-67,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,-105,-35,-80,-23,-26,-84,-86,-94,-98,-103,-77,175,-79,-45,-79,-25,-51,-52,-53,-57,-105,-69,207,-105,-105,213,-68,-63,-65,-70,-105,216,-64,]),'TO':([58,66,67,68,69,70,71,73,74,75,76,100,101,103,104,106,107,109,116,118,121,123,127,129,145,146,147,148,149,150,151,156,171,189,190,],[-24,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,-23,-26,-84,-86,-94,-98,-103,-77,-79,201,-25,]),'DO':([58,66,67,68,69,70,71,73,74,75,76,100,101,103,104,106,107,109,116,118,121,123,127,129,145,146,147,148,149,150,151,156,171,188,190,206,],[-24,-105,-105,-105,-105,-105,-105,-78,-81,-82,-83,-105,-71,-85,-72,-87,-73,-95,-74,-99,-75,-104,-76,-80,-23,-26,-84,-86,-94,-98,-103,-77,-79,200,-25,200,]),'CTE_STRING':([140,185,],[166,166,]),'ELSE':([207,],[211,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'g_var':([4,],[5,]),'var_declaration':([4,42,59,],[6,52,77,]),'empty':([4,5,10,25,26,27,38,39,40,42,43,44,51,54,59,63,66,67,68,69,70,71,80,91,100,128,131,136,155,162,164,195,197,198,205,207,214,],[8,11,11,31,34,37,37,48,31,8,55,58,62,37,8,81,103,106,109,118,123,58,81,58,146,154,81,154,174,182,186,182,186,81,81,212,81,]),'funcs':([5,10,],[9,21,]),'function':([5,10,],[10,10,]),'var1':([7,39,],[13,47,]),'var_type':([7,27,38,39,54,],[14,36,36,14,36,]),'type':([7,12,27,38,39,54,],[15,24,15,15,15,15,]),'main':([9,],[19,]),'func_type':([12,],[22,]),'dec_id':([14,30,],[25,40,]),'var2':([25,40,],[29,50,]),'dec_id1':([26,],[32,]),'params':([27,38,54,],[35,45,64,]),'id':([36,63,80,99,131,198,205,214,],[43,90,90,143,90,90,90,90,]),'var4':([39,],[46,]),'var3':([40,],[49,]),'params1':([43,],[53,]),'id1':([44,71,91,],[56,129,137,]),'dec_id2':([51,],[61,]),'expression':([57,63,72,80,102,128,131,135,136,138,139,140,141,142,144,169,173,181,185,198,201,205,214,],[65,89,130,89,147,155,89,158,155,160,162,165,167,168,170,189,155,195,165,89,206,89,89,]),'texp':([57,63,72,80,102,105,128,131,135,136,138,139,140,141,142,144,169,173,181,185,198,201,205,214,],[66,66,66,66,66,148,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'gexp':([57,63,72,80,102,105,108,128,131,135,136,138,139,140,141,142,144,169,173,181,185,198,201,205,214,],[67,67,67,67,67,67,149,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'nexp':([57,63,72,80,102,105,108,117,128,131,135,136,138,139,140,141,142,144,169,173,181,185,198,201,205,214,],[68,68,68,68,68,68,68,150,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'term':([57,63,72,80,102,105,108,117,122,128,131,135,136,138,139,140,141,142,144,169,173,181,185,198,201,205,214,],[69,69,69,69,69,69,69,69,151,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'fact':([57,63,72,80,102,105,108,117,122,128,131,135,136,138,139,140,141,142,144,169,173,181,185,198,201,205,214,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'cte':([57,63,72,80,102,105,108,117,122,128,131,135,136,138,139,140,141,142,144,169,173,181,185,198,201,205,214,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'statements':([63,80,131,198,205,214,],[79,134,157,204,208,215,]),'statement':([63,80,131,198,205,214,],[80,80,80,80,80,80,]),'assignation':([63,80,131,198,205,214,],[82,82,82,82,82,82,]),'call_func':([63,80,131,198,205,214,],[83,83,83,83,83,83,]),'return_func':([63,80,131,198,205,214,],[84,84,84,84,84,84,]),'read':([63,80,131,198,205,214,],[85,85,85,85,85,85,]),'write':([63,80,131,198,205,214,],[86,86,86,86,86,86,]),'decision_statement':([63,80,131,198,205,214,],[87,87,87,87,87,87,]),'repetition_statement':([63,80,131,198,205,214,],[88,88,88,88,88,88,]),'while_statement':([63,80,131,198,205,214,],[96,96,96,96,96,96,]),'for_statement':([63,80,131,198,205,214,],[97,97,97,97,97,97,]),'op1':([66,],[101,]),'op2':([67,],[104,]),'op3aux':([68,],[107,]),'op3':([68,],[108,]),'op4aux':([69,],[116,]),'op4':([69,],[117,]),'op5aux':([70,],[121,]),'op5':([70,],[122,]),'fact1':([71,91,],[127,127,]),'id2':([100,],[145,]),'args':([128,136,],[152,159,]),'args1':([128,136,173,],[153,153,191,]),'read_args':([139,],[161,]),'write_args':([140,],[163,]),'write_args2':([140,185,],[164,197,]),'args2':([155,],[172,]),'read_args1':([162,195,],[180,202,]),'write_args1':([164,197,],[184,203,]),'do_statement':([188,206,],[199,209,]),'decision_statement1':([207,],[210,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON g_var funcs main','program',6,'p_program','parser-lexer.py',114),
  ('main -> MAIN L_P params R_P var_declaration L_B statements R_B','main',8,'p_main','parser-lexer.py',118),
  ('type -> INT','type',1,'p_type','parser-lexer.py',122),
  ('type -> FLOAT','type',1,'p_type','parser-lexer.py',123),
  ('type -> CHAR','type',1,'p_type','parser-lexer.py',124),
  ('g_var -> var_declaration','g_var',1,'p_g_var','parser-lexer.py',128),
  ('funcs -> function funcs','funcs',2,'p_funcs','parser-lexer.py',132),
  ('funcs -> empty','funcs',1,'p_funcs','parser-lexer.py',133),
  ('var_declaration -> VAR var1','var_declaration',2,'p_var_declaration','parser-lexer.py',137),
  ('var_declaration -> empty','var_declaration',1,'p_var_declaration','parser-lexer.py',138),
  ('var1 -> var_type dec_id var2 SEMICOLON var4','var1',5,'p_var1','parser-lexer.py',142),
  ('var2 -> COMA dec_id var3','var2',3,'p_var2','parser-lexer.py',146),
  ('var2 -> empty','var2',1,'p_var2','parser-lexer.py',147),
  ('var3 -> var2','var3',1,'p_var3','parser-lexer.py',151),
  ('var4 -> var1','var4',1,'p_var4','parser-lexer.py',155),
  ('var4 -> empty','var4',1,'p_var4','parser-lexer.py',156),
  ('dec_id -> ID dec_id1','dec_id',2,'p_dec_id','parser-lexer.py',159),
  ('dec_id1 -> L_SB CTE_I R_SB dec_id2','dec_id1',4,'p_dec_id1','parser-lexer.py',163),
  ('dec_id1 -> empty','dec_id1',1,'p_dec_id1','parser-lexer.py',164),
  ('dec_id2 -> L_SB CTE_I R_SB','dec_id2',3,'p_dec_id2','parser-lexer.py',168),
  ('dec_id2 -> empty','dec_id2',1,'p_dec_id2','parser-lexer.py',169),
  ('id -> ID id1','id',2,'p_id','parser-lexer.py',172),
  ('id1 -> L_SB expression R_SB id2','id1',4,'p_id1','parser-lexer.py',176),
  ('id1 -> empty','id1',1,'p_id1','parser-lexer.py',177),
  ('id2 -> L_SB expression R_SB','id2',3,'p_id2','parser-lexer.py',181),
  ('id2 -> empty','id2',1,'p_id2','parser-lexer.py',182),
  ('var_type -> type','var_type',1,'p_var_type','parser-lexer.py',186),
  ('function -> FUNC func_type ID L_P params R_P var_declaration L_B statements R_B','function',10,'p_function','parser-lexer.py',190),
  ('func_type -> VOID','func_type',1,'p_func_type','parser-lexer.py',194),
  ('func_type -> type','func_type',1,'p_func_type','parser-lexer.py',195),
  ('params -> var_type id params1','params',3,'p_params','parser-lexer.py',199),
  ('params -> empty','params',1,'p_params','parser-lexer.py',200),
  ('params1 -> COMA params','params1',2,'p_params1','parser-lexer.py',204),
  ('params1 -> empty','params1',1,'p_params1','parser-lexer.py',205),
  ('statements -> statement statements','statements',2,'p_statements','parser-lexer.py',209),
  ('statements -> empty','statements',1,'p_statements','parser-lexer.py',210),
  ('statement -> assignation','statement',1,'p_statement','parser-lexer.py',214),
  ('statement -> call_func','statement',1,'p_statement','parser-lexer.py',215),
  ('statement -> return_func','statement',1,'p_statement','parser-lexer.py',216),
  ('statement -> read','statement',1,'p_statement','parser-lexer.py',217),
  ('statement -> write','statement',1,'p_statement','parser-lexer.py',218),
  ('statement -> decision_statement','statement',1,'p_statement','parser-lexer.py',219),
  ('statement -> repetition_statement','statement',1,'p_statement','parser-lexer.py',220),
  ('statement -> expression','statement',1,'p_statement','parser-lexer.py',221),
  ('assignation -> id EQUAL expression SEMICOLON','assignation',4,'p_assignation','parser-lexer.py',225),
  ('args -> args1','args',1,'p_args','parser-lexer.py',229),
  ('args -> empty','args',1,'p_args','parser-lexer.py',230),
  ('args1 -> expression args2','args1',2,'p_args1','parser-lexer.py',234),
  ('args2 -> COMA args1','args2',2,'p_args2','parser-lexer.py',238),
  ('args2 -> empty','args2',1,'p_args2','parser-lexer.py',239),
  ('call_func -> ID L_P args R_P SEMICOLON','call_func',5,'p_call_func','parser-lexer.py',243),
  ('return_func -> RETURN L_P expression R_P SEMICOLON','return_func',5,'p_return_func','parser-lexer.py',247),
  ('read -> READ L_P read_args R_P SEMICOLON','read',5,'p_read','parser-lexer.py',251),
  ('read_args -> expression read_args1','read_args',2,'p_read_args','parser-lexer.py',255),
  ('read_args1 -> COMA expression read_args1','read_args1',3,'p_read_args1','parser-lexer.py',259),
  ('read_args1 -> empty','read_args1',1,'p_read_args1','parser-lexer.py',260),
  ('write -> PRINT L_P write_args R_P SEMICOLON','write',5,'p_write','parser-lexer.py',264),
  ('write_args -> write_args2 write_args1','write_args',2,'p_write_args','parser-lexer.py',268),
  ('write_args1 -> COMA write_args2 write_args1','write_args1',3,'p_write_args1','parser-lexer.py',272),
  ('write_args1 -> empty','write_args1',1,'p_write_args1','parser-lexer.py',273),
  ('write_args2 -> expression','write_args2',1,'p_write_args2','parser-lexer.py',277),
  ('write_args2 -> CTE_STRING','write_args2',1,'p_write_args2','parser-lexer.py',278),
  ('decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1','decision_statement',8,'p_decision_statement','parser-lexer.py',282),
  ('decision_statement1 -> ELSE L_B statements R_B','decision_statement1',4,'p_decision_statement1','parser-lexer.py',286),
  ('decision_statement1 -> empty','decision_statement1',1,'p_decision_statement1','parser-lexer.py',287),
  ('repetition_statement -> while_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',291),
  ('repetition_statement -> for_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',292),
  ('for_statement -> FOR id EQUAL expression TO expression do_statement','for_statement',7,'p_for_statement','parser-lexer.py',296),
  ('while_statement -> WHILE L_P expression R_P do_statement','while_statement',5,'p_while_statement','parser-lexer.py',300),
  ('do_statement -> DO L_B statements R_B','do_statement',4,'p_do_statement','parser-lexer.py',304),
  ('expression -> texp op1','expression',2,'p_expression','parser-lexer.py',308),
  ('texp -> gexp op2','texp',2,'p_texp','parser-lexer.py',312),
  ('gexp -> nexp op3aux','gexp',2,'p_gexp','parser-lexer.py',316),
  ('nexp -> term op4aux','nexp',2,'p_nexp','parser-lexer.py',320),
  ('term -> fact op5aux','term',2,'p_term','parser-lexer.py',324),
  ('fact -> ID fact1','fact',2,'p_fact','parser-lexer.py',328),
  ('fact -> L_P expression R_P','fact',3,'p_fact','parser-lexer.py',329),
  ('fact -> cte','fact',1,'p_fact','parser-lexer.py',330),
  ('fact1 -> L_P args R_P','fact1',3,'p_fact1','parser-lexer.py',334),
  ('fact1 -> id1','fact1',1,'p_fact1','parser-lexer.py',335),
  ('cte -> CTE_I','cte',1,'p_cte','parser-lexer.py',339),
  ('cte -> CTE_F','cte',1,'p_cte','parser-lexer.py',340),
  ('cte -> CTE_CHAR','cte',1,'p_cte','parser-lexer.py',341),
  ('op1 -> OR expression','op1',2,'p_op1','parser-lexer.py',345),
  ('op1 -> empty','op1',1,'p_op1','parser-lexer.py',346),
  ('op2 -> AND texp','op2',2,'p_op2','parser-lexer.py',350),
  ('op2 -> empty','op2',1,'p_op2','parser-lexer.py',351),
  ('op3 -> LESSTHAN','op3',1,'p_op3','parser-lexer.py',355),
  ('op3 -> LESSTHANEQ','op3',1,'p_op3','parser-lexer.py',356),
  ('op3 -> GREATERTHAN','op3',1,'p_op3','parser-lexer.py',357),
  ('op3 -> GREATERTHANEQ','op3',1,'p_op3','parser-lexer.py',358),
  ('op3 -> EQ','op3',1,'p_op3','parser-lexer.py',359),
  ('op3 -> DIFERENT','op3',1,'p_op3','parser-lexer.py',360),
  ('op3aux -> op3 gexp','op3aux',2,'p_op3aux','parser-lexer.py',364),
  ('op3aux -> empty','op3aux',1,'p_op3aux','parser-lexer.py',365),
  ('op4 -> PLUS','op4',1,'p_op4','parser-lexer.py',369),
  ('op4 -> MINUS','op4',1,'p_op4','parser-lexer.py',370),
  ('op4aux -> op4 nexp','op4aux',2,'p_op4aux','parser-lexer.py',374),
  ('op4aux -> empty','op4aux',1,'p_op4aux','parser-lexer.py',375),
  ('op5 -> MULT','op5',1,'p_op5','parser-lexer.py',379),
  ('op5 -> DIV','op5',1,'p_op5','parser-lexer.py',380),
  ('op5 -> MOD','op5',1,'p_op5','parser-lexer.py',381),
  ('op5aux -> op5 term','op5aux',2,'p_op5aux','parser-lexer.py',385),
  ('op5aux -> empty','op5aux',1,'p_op5aux','parser-lexer.py',386),
  ('empty -> <empty>','empty',0,'p_empty','parser-lexer.py',391),
]
