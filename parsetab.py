
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COMA CTE_CHAR CTE_F CTE_I CTE_STRING DIFERENT DIV DO ELSE EQ EQUAL FLOAT FOR FUNC GREATERTHAN GREATERTHANEQ ID IF INT LESSTHAN LESSTHANEQ L_B L_P L_SB MAIN MINUS MOD MULT OR PLUS PRINT PROGRAM READ RETURN R_B R_P R_SB SEMICOLON TO VAR VOID WHILEprogram : PROGRAM ID SEMICOLON g_var funcs mainmain : MAIN L_P params R_P var_declaration L_B statements R_Btype : INT\n            | FLOAT\n            | CHARg_var : var_declarationfuncs : function funcs\n            | emptyvar_declaration : VAR var1\n                        | emptyvar1 : var_type dec_id var2 SEMICOLON var4var2 : COMA dec_id var3\n            | emptyvar3 : var2var4 : var1\n            | emptydec_id : ID dec_id1dec_id1 : L_SB CTE_I R_SB dec_id2\n            | emptydec_id2 : L_SB CTE_I R_SB\n        | emptyid : ID id1id1 : L_SB expression R_SB id2\n            | emptyid2 : L_SB expression R_SB\n        | emptyvar_type : typefunction : FUNC func_type ID register_func L_P params R_P var_declaration L_B statements R_Bregister_func : func_type : VOID\n                | typeparams : var_type param_type dec_id params1\n            | emptyparam_type : params1 : COMA params\n                | emptystatements : statement statements\n                | emptystatement : assignation\n                | call_func\n                | return_func\n                | read\n                | write\n                | decision_statement\n                | repetition_statement\n                | expressionassignation : id EQUAL expression SEMICOLONargs : args1\n            | emptyargs1 : expression args2args2 : COMA args1\n            | emptycall_func :  ID L_P args R_P SEMICOLONreturn_func : RETURN L_P expression R_P SEMICOLONread : READ L_P read_args R_P SEMICOLONread_args : expression read_args1read_args1 : COMA expression read_args1\n                | emptywrite : PRINT L_P write_args R_P SEMICOLONwrite_args : write_args2 write_args1write_args1 : COMA write_args2 write_args1\n                    | emptywrite_args2 : expression\n                | CTE_STRINGdecision_statement : IF L_P expression R_P L_B statements R_B decision_statement1decision_statement1 : ELSE L_B statements R_B\n                            | emptyrepetition_statement : while_statement\n                            | for_statementfor_statement : FOR id EQUAL expression TO expression do_statementwhile_statement : WHILE L_P expression R_P do_statementdo_statement :  DO L_B statements R_Bexpression : texp op1texp : gexp op2gexp : mexp op3auxmexp : term op4auxterm : fact op5auxfact : ID fact1\n            | L_P expression R_P\n            | ctefact1 : L_P args R_P\n            | id1cte : CTE_I\n            | CTE_F\n            | CTE_CHARop1 : OR expression\n            | emptyop2 : AND texp\n            | emptyop3 : LESSTHAN\n            | LESSTHANEQ\xa0\n            | GREATERTHAN\n            | GREATERTHANEQ\n            | EQ\n            | DIFERENTop3aux : op3 mexp\n            | emptyop4 : PLUS\n            | MINUSop4aux : op4 mexp\n            | emptyop5 : MULT\n        | DIV\n        | MODop5aux : op5 term\n            | empty\n        empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,99,],[0,-1,-2,]),'ID':([2,14,15,16,17,18,22,23,24,30,36,43,57,63,65,67,68,69,70,71,72,73,74,76,81,82,83,85,86,87,88,89,90,91,92,93,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,158,160,162,163,164,165,168,169,171,173,177,181,187,188,190,191,192,193,194,196,198,199,201,206,208,209,211,212,214,215,216,218,],[3,26,-27,-3,-4,-5,28,-30,-31,26,-34,26,76,98,76,-39,-40,-41,-42,-43,-44,-45,-46,-107,-68,-69,-107,116,-107,-107,-107,-107,-80,-83,-84,-85,-107,98,98,-82,-78,98,-24,98,98,98,98,-73,98,-87,98,-74,98,-89,-75,98,-97,-90,-91,-92,-93,-94,-95,-76,98,-101,-98,-99,-77,98,-106,-102,-103,-104,76,-79,98,-82,-86,98,-88,-96,-100,-105,-47,-81,98,-107,98,98,-81,-53,98,-23,-26,-54,-55,-59,76,-71,98,76,-25,-107,-70,-65,-67,-72,76,-66,]),'SEMICOLON':([3,25,26,29,31,32,34,40,48,49,50,55,56,83,86,87,88,89,90,91,92,93,96,98,104,106,111,113,117,119,120,122,129,131,134,136,141,143,144,158,162,163,164,165,169,173,174,175,179,187,191,192,208,],[4,-107,-107,39,-13,-17,-19,-107,-12,-14,-107,-18,-21,-107,-107,-107,-107,-107,-80,-83,-84,-85,-20,-107,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,-79,-82,168,-86,-88,-96,-100,-105,188,-107,193,194,196,-81,-23,-26,-25,]),'VAR':([4,42,61,],[7,7,7,]),'FUNC':([4,5,6,8,10,13,39,45,46,47,186,],[-107,12,-6,-10,12,-9,-107,-11,-15,-16,-28,]),'MAIN':([4,5,6,8,9,10,11,13,21,39,45,46,47,186,],[-107,-107,-6,-10,20,-107,-8,-9,-7,-107,-11,-15,-16,-28,]),'INT':([7,12,27,39,44,59,],[16,16,16,16,16,16,]),'FLOAT':([7,12,27,39,44,59,],[17,17,17,17,17,17,]),'CHAR':([7,12,27,39,44,59,],[18,18,18,18,18,18,]),'L_B':([8,13,39,42,45,46,47,51,61,95,183,200,213,],[-10,-9,-107,-107,-11,-15,-16,57,-107,140,198,206,216,]),'VOID':([12,],[23,]),'L_P':([20,28,38,57,63,65,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,158,160,162,163,164,165,168,169,171,173,177,181,187,188,190,191,192,193,194,196,198,199,201,206,208,209,211,212,214,215,216,218,],[27,-29,44,63,63,63,-39,-40,-41,-42,-43,-44,-45,-46,102,107,108,109,110,-68,-69,-107,114,-107,-107,-107,-107,-80,-83,-84,-85,142,63,63,-82,-78,63,-24,63,63,63,63,-73,63,-87,63,-74,63,-89,-75,63,-97,-90,-91,-92,-93,-94,-95,-76,63,-101,-98,-99,-77,63,-106,-102,-103,-104,63,-79,63,-82,-86,63,-88,-96,-100,-105,-47,-81,63,-107,63,63,-81,-53,63,-23,-26,-54,-55,-59,63,-71,63,63,-25,-107,-70,-65,-67,-72,63,-66,]),'COMA':([25,26,32,34,40,50,52,55,56,83,86,87,88,89,90,91,92,93,96,98,104,106,111,113,117,119,120,122,129,131,134,136,141,143,148,152,154,155,156,158,162,163,164,165,173,187,191,192,195,197,208,],[30,-107,-17,-19,30,-107,59,-18,-21,-107,-107,-107,-107,-107,-80,-83,-84,-85,-20,-107,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,-79,-82,171,177,181,-63,-64,-86,-88,-96,-100,-105,-107,-81,-23,-26,177,181,-25,]),'L_SB':([26,50,76,98,116,173,],[33,54,105,105,105,190,]),'R_P':([26,27,32,34,35,37,44,50,52,53,55,56,58,59,60,83,86,87,88,89,90,91,92,93,94,96,97,98,102,104,106,111,113,117,119,120,122,129,131,134,136,141,142,143,145,146,147,148,150,151,152,153,154,155,156,157,158,159,162,163,164,165,167,170,172,173,176,178,180,182,187,189,191,192,195,197,203,204,208,],[-107,-107,-17,-19,42,-33,-107,-107,-107,61,-18,-21,-32,-107,-36,-107,-107,-107,-107,-107,-80,-83,-84,-85,-35,-20,141,-107,-107,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,-79,-107,-82,169,-48,-49,-107,174,175,-107,179,-107,-63,-64,183,-86,184,-88,-96,-100,-105,187,-50,-52,-107,-56,-58,-60,-62,-81,-51,-23,-26,-107,-107,-57,-61,-25,]),'CTE_I':([33,54,57,63,65,67,68,69,70,71,72,73,74,76,81,82,83,86,87,88,89,90,91,92,93,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,158,160,162,163,164,165,168,169,171,173,177,181,187,188,190,191,192,193,194,196,198,199,201,206,208,209,211,212,214,215,216,218,],[41,62,91,91,91,-39,-40,-41,-42,-43,-44,-45,-46,-107,-68,-69,-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,91,91,-82,-78,91,-24,91,91,91,91,-73,91,-87,91,-74,91,-89,-75,91,-97,-90,-91,-92,-93,-94,-95,-76,91,-101,-98,-99,-77,91,-106,-102,-103,-104,91,-79,91,-82,-86,91,-88,-96,-100,-105,-47,-81,91,-107,91,91,-81,-53,91,-23,-26,-54,-55,-59,91,-71,91,91,-25,-107,-70,-65,-67,-72,91,-66,]),'R_SB':([41,62,83,86,87,88,89,90,91,92,93,98,104,106,111,113,117,119,120,122,129,131,134,136,141,143,149,158,162,163,164,165,173,187,191,192,202,208,],[50,96,-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,-79,-82,173,-86,-88,-96,-100,-105,-107,-81,-23,-26,208,-25,]),'R_B':([57,64,65,66,67,68,69,70,71,72,73,74,76,81,82,83,86,87,88,89,90,91,92,93,98,100,103,104,106,111,113,117,119,120,122,129,131,134,136,140,141,143,158,162,163,164,165,166,168,169,173,187,188,191,192,193,194,196,198,199,205,206,208,209,210,211,212,214,215,216,217,218,],[-107,99,-107,-38,-39,-40,-41,-42,-43,-44,-45,-46,-107,-68,-69,-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,-37,-82,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,-107,-79,-82,-86,-88,-96,-100,-105,186,-47,-81,-107,-81,-53,-23,-26,-54,-55,-59,-107,-71,209,-107,-25,-107,215,-70,-65,-67,-72,-107,218,-66,]),'RETURN':([57,65,67,68,69,70,71,72,73,74,76,81,82,83,86,87,88,89,90,91,92,93,98,103,104,106,111,113,117,119,120,122,129,131,134,136,140,141,143,158,162,163,164,165,168,169,173,187,188,191,192,193,194,196,198,199,206,208,209,211,212,214,215,216,218,],[77,77,-39,-40,-41,-42,-43,-44,-45,-46,-107,-68,-69,-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,77,-79,-82,-86,-88,-96,-100,-105,-47,-81,-107,-81,-53,-23,-26,-54,-55,-59,77,-71,77,-25,-107,-70,-65,-67,-72,77,-66,]),'READ':([57,65,67,68,69,70,71,72,73,74,76,81,82,83,86,87,88,89,90,91,92,93,98,103,104,106,111,113,117,119,120,122,129,131,134,136,140,141,143,158,162,163,164,165,168,169,173,187,188,191,192,193,194,196,198,199,206,208,209,211,212,214,215,216,218,],[78,78,-39,-40,-41,-42,-43,-44,-45,-46,-107,-68,-69,-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,78,-79,-82,-86,-88,-96,-100,-105,-47,-81,-107,-81,-53,-23,-26,-54,-55,-59,78,-71,78,-25,-107,-70,-65,-67,-72,78,-66,]),'PRINT':([57,65,67,68,69,70,71,72,73,74,76,81,82,83,86,87,88,89,90,91,92,93,98,103,104,106,111,113,117,119,120,122,129,131,134,136,140,141,143,158,162,163,164,165,168,169,173,187,188,191,192,193,194,196,198,199,206,208,209,211,212,214,215,216,218,],[79,79,-39,-40,-41,-42,-43,-44,-45,-46,-107,-68,-69,-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,79,-79,-82,-86,-88,-96,-100,-105,-47,-81,-107,-81,-53,-23,-26,-54,-55,-59,79,-71,79,-25,-107,-70,-65,-67,-72,79,-66,]),'IF':([57,65,67,68,69,70,71,72,73,74,76,81,82,83,86,87,88,89,90,91,92,93,98,103,104,106,111,113,117,119,120,122,129,131,134,136,140,141,143,158,162,163,164,165,168,169,173,187,188,191,192,193,194,196,198,199,206,208,209,211,212,214,215,216,218,],[80,80,-39,-40,-41,-42,-43,-44,-45,-46,-107,-68,-69,-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,80,-79,-82,-86,-88,-96,-100,-105,-47,-81,-107,-81,-53,-23,-26,-54,-55,-59,80,-71,80,-25,-107,-70,-65,-67,-72,80,-66,]),'WHILE':([57,65,67,68,69,70,71,72,73,74,76,81,82,83,86,87,88,89,90,91,92,93,98,103,104,106,111,113,117,119,120,122,129,131,134,136,140,141,143,158,162,163,164,165,168,169,173,187,188,191,192,193,194,196,198,199,206,208,209,211,212,214,215,216,218,],[84,84,-39,-40,-41,-42,-43,-44,-45,-46,-107,-68,-69,-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,84,-79,-82,-86,-88,-96,-100,-105,-47,-81,-107,-81,-53,-23,-26,-54,-55,-59,84,-71,84,-25,-107,-70,-65,-67,-72,84,-66,]),'FOR':([57,65,67,68,69,70,71,72,73,74,76,81,82,83,86,87,88,89,90,91,92,93,98,103,104,106,111,113,117,119,120,122,129,131,134,136,140,141,143,158,162,163,164,165,168,169,173,187,188,191,192,193,194,196,198,199,206,208,209,211,212,214,215,216,218,],[85,85,-39,-40,-41,-42,-43,-44,-45,-46,-107,-68,-69,-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,85,-79,-82,-86,-88,-96,-100,-105,-47,-81,-107,-81,-53,-23,-26,-54,-55,-59,85,-71,85,-25,-107,-70,-65,-67,-72,85,-66,]),'CTE_F':([57,63,65,67,68,69,70,71,72,73,74,76,81,82,83,86,87,88,89,90,91,92,93,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,158,160,162,163,164,165,168,169,171,173,177,181,187,188,190,191,192,193,194,196,198,199,201,206,208,209,211,212,214,215,216,218,],[92,92,92,-39,-40,-41,-42,-43,-44,-45,-46,-107,-68,-69,-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,92,92,-82,-78,92,-24,92,92,92,92,-73,92,-87,92,-74,92,-89,-75,92,-97,-90,-91,-92,-93,-94,-95,-76,92,-101,-98,-99,-77,92,-106,-102,-103,-104,92,-79,92,-82,-86,92,-88,-96,-100,-105,-47,-81,92,-107,92,92,-81,-53,92,-23,-26,-54,-55,-59,92,-71,92,92,-25,-107,-70,-65,-67,-72,92,-66,]),'CTE_CHAR':([57,63,65,67,68,69,70,71,72,73,74,76,81,82,83,86,87,88,89,90,91,92,93,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,158,160,162,163,164,165,168,169,171,173,177,181,187,188,190,191,192,193,194,196,198,199,201,206,208,209,211,212,214,215,216,218,],[93,93,93,-39,-40,-41,-42,-43,-44,-45,-46,-107,-68,-69,-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,93,93,-82,-78,93,-24,93,93,93,93,-73,93,-87,93,-74,93,-89,-75,93,-97,-90,-91,-92,-93,-94,-95,-76,93,-101,-98,-99,-77,93,-106,-102,-103,-104,93,-79,93,-82,-86,93,-88,-96,-100,-105,-47,-81,93,-107,93,93,-81,-53,93,-23,-26,-54,-55,-59,93,-71,93,93,-25,-107,-70,-65,-67,-72,93,-66,]),'EQUAL':([75,76,103,106,115,116,161,173,191,192,208,],[101,-107,-22,-24,160,-107,-22,-107,-23,-26,-25,]),'MULT':([76,89,90,91,92,93,98,103,104,106,141,143,169,173,187,191,192,208,],[-107,137,-80,-83,-84,-85,-107,-82,-78,-24,-79,-82,-81,-107,-81,-23,-26,-25,]),'DIV':([76,89,90,91,92,93,98,103,104,106,141,143,169,173,187,191,192,208,],[-107,138,-80,-83,-84,-85,-107,-82,-78,-24,-79,-82,-81,-107,-81,-23,-26,-25,]),'MOD':([76,89,90,91,92,93,98,103,104,106,141,143,169,173,187,191,192,208,],[-107,139,-80,-83,-84,-85,-107,-82,-78,-24,-79,-82,-81,-107,-81,-23,-26,-25,]),'PLUS':([76,88,89,90,91,92,93,98,103,104,106,134,136,141,143,165,169,173,187,191,192,208,],[-107,132,-107,-80,-83,-84,-85,-107,-82,-78,-24,-77,-106,-79,-82,-105,-81,-107,-81,-23,-26,-25,]),'MINUS':([76,88,89,90,91,92,93,98,103,104,106,134,136,141,143,165,169,173,187,191,192,208,],[-107,133,-107,-80,-83,-84,-85,-107,-82,-78,-24,-77,-106,-79,-82,-105,-81,-107,-81,-23,-26,-25,]),'LESSTHAN':([76,87,88,89,90,91,92,93,98,103,104,106,129,131,134,136,141,143,164,165,169,173,187,191,192,208,],[-107,123,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-76,-101,-77,-106,-79,-82,-100,-105,-81,-107,-81,-23,-26,-25,]),'LESSTHANEQ':([76,87,88,89,90,91,92,93,98,103,104,106,129,131,134,136,141,143,164,165,169,173,187,191,192,208,],[-107,124,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-76,-101,-77,-106,-79,-82,-100,-105,-81,-107,-81,-23,-26,-25,]),'GREATERTHAN':([76,87,88,89,90,91,92,93,98,103,104,106,129,131,134,136,141,143,164,165,169,173,187,191,192,208,],[-107,125,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-76,-101,-77,-106,-79,-82,-100,-105,-81,-107,-81,-23,-26,-25,]),'GREATERTHANEQ':([76,87,88,89,90,91,92,93,98,103,104,106,129,131,134,136,141,143,164,165,169,173,187,191,192,208,],[-107,126,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-76,-101,-77,-106,-79,-82,-100,-105,-81,-107,-81,-23,-26,-25,]),'EQ':([76,87,88,89,90,91,92,93,98,103,104,106,129,131,134,136,141,143,164,165,169,173,187,191,192,208,],[-107,127,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-76,-101,-77,-106,-79,-82,-100,-105,-81,-107,-81,-23,-26,-25,]),'DIFERENT':([76,87,88,89,90,91,92,93,98,103,104,106,129,131,134,136,141,143,164,165,169,173,187,191,192,208,],[-107,128,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-76,-101,-77,-106,-79,-82,-100,-105,-81,-107,-81,-23,-26,-25,]),'AND':([76,86,87,88,89,90,91,92,93,98,103,104,106,120,122,129,131,134,136,141,143,163,164,165,169,173,187,191,192,208,],[-107,118,-107,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-75,-97,-76,-101,-77,-106,-79,-82,-96,-100,-105,-81,-107,-81,-23,-26,-25,]),'OR':([76,83,86,87,88,89,90,91,92,93,98,103,104,106,117,119,120,122,129,131,134,136,141,143,162,163,164,165,169,173,187,191,192,208,],[-107,112,-107,-107,-107,-107,-80,-83,-84,-85,-107,-82,-78,-24,-74,-89,-75,-97,-76,-101,-77,-106,-79,-82,-88,-96,-100,-105,-81,-107,-81,-23,-26,-25,]),'TO':([83,86,87,88,89,90,91,92,93,98,104,106,111,113,117,119,120,122,129,131,134,136,141,143,158,162,163,164,165,173,185,187,191,192,208,],[-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,-79,-82,-86,-88,-96,-100,-105,-107,201,-81,-23,-26,-25,]),'DO':([83,86,87,88,89,90,91,92,93,98,104,106,111,113,117,119,120,122,129,131,134,136,141,143,158,162,163,164,165,173,184,187,191,192,207,208,],[-107,-107,-107,-107,-107,-80,-83,-84,-85,-107,-78,-24,-73,-87,-74,-89,-75,-97,-76,-101,-77,-106,-79,-82,-86,-88,-96,-100,-105,-107,200,-81,-23,-26,200,-25,]),'CTE_STRING':([109,181,],[156,156,]),'ELSE':([209,],[213,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'g_var':([4,],[5,]),'var_declaration':([4,42,61,],[6,51,95,]),'empty':([4,5,10,25,26,27,39,40,42,44,50,52,57,59,61,65,76,83,86,87,88,89,98,102,116,140,142,148,152,154,173,195,197,198,206,209,216,],[8,11,11,31,34,37,47,31,8,37,56,60,66,37,8,66,106,113,119,122,131,136,106,147,106,66,147,172,178,182,192,178,182,66,66,214,66,]),'funcs':([5,10,],[9,21,]),'function':([5,10,],[10,10,]),'var1':([7,39,],[13,46,]),'var_type':([7,27,39,44,59,],[14,36,14,36,36,]),'type':([7,12,27,39,44,59,],[15,24,15,15,15,15,]),'main':([9,],[19,]),'func_type':([12,],[22,]),'dec_id':([14,30,43,],[25,40,52,]),'var2':([25,40,],[29,49,]),'dec_id1':([26,],[32,]),'params':([27,44,59,],[35,53,94,]),'register_func':([28,],[38,]),'param_type':([36,],[43,]),'var4':([39,],[45,]),'var3':([40,],[48,]),'dec_id2':([50,],[55,]),'params1':([52,],[58,]),'statements':([57,65,140,198,206,216,],[64,100,166,205,210,217,]),'statement':([57,65,140,198,206,216,],[65,65,65,65,65,65,]),'assignation':([57,65,140,198,206,216,],[67,67,67,67,67,67,]),'call_func':([57,65,140,198,206,216,],[68,68,68,68,68,68,]),'return_func':([57,65,140,198,206,216,],[69,69,69,69,69,69,]),'read':([57,65,140,198,206,216,],[70,70,70,70,70,70,]),'write':([57,65,140,198,206,216,],[71,71,71,71,71,71,]),'decision_statement':([57,65,140,198,206,216,],[72,72,72,72,72,72,]),'repetition_statement':([57,65,140,198,206,216,],[73,73,73,73,73,73,]),'expression':([57,63,65,101,102,105,107,108,109,110,112,114,140,142,160,171,177,181,190,198,201,206,216,],[74,97,74,144,148,149,150,152,155,157,158,159,74,148,185,148,195,155,202,74,207,74,74,]),'id':([57,65,85,140,198,206,216,],[75,75,115,75,75,75,75,]),'while_statement':([57,65,140,198,206,216,],[81,81,81,81,81,81,]),'for_statement':([57,65,140,198,206,216,],[82,82,82,82,82,82,]),'texp':([57,63,65,101,102,105,107,108,109,110,112,114,118,140,142,160,171,177,181,190,198,201,206,216,],[83,83,83,83,83,83,83,83,83,83,83,83,162,83,83,83,83,83,83,83,83,83,83,83,]),'gexp':([57,63,65,101,102,105,107,108,109,110,112,114,118,140,142,160,171,177,181,190,198,201,206,216,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'mexp':([57,63,65,101,102,105,107,108,109,110,112,114,118,121,130,140,142,160,171,177,181,190,198,201,206,216,],[87,87,87,87,87,87,87,87,87,87,87,87,87,163,164,87,87,87,87,87,87,87,87,87,87,87,]),'term':([57,63,65,101,102,105,107,108,109,110,112,114,118,121,130,135,140,142,160,171,177,181,190,198,201,206,216,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,165,88,88,88,88,88,88,88,88,88,88,88,]),'fact':([57,63,65,101,102,105,107,108,109,110,112,114,118,121,130,135,140,142,160,171,177,181,190,198,201,206,216,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'cte':([57,63,65,101,102,105,107,108,109,110,112,114,118,121,130,135,140,142,160,171,177,181,190,198,201,206,216,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'id1':([76,98,116,],[103,143,161,]),'fact1':([76,98,],[104,104,]),'op1':([83,],[111,]),'op2':([86,],[117,]),'op3aux':([87,],[120,]),'op3':([87,],[121,]),'op4aux':([88,],[129,]),'op4':([88,],[130,]),'op5aux':([89,],[134,]),'op5':([89,],[135,]),'args':([102,142,],[145,167,]),'args1':([102,142,171,],[146,146,189,]),'read_args':([108,],[151,]),'write_args':([109,],[153,]),'write_args2':([109,181,],[154,197,]),'args2':([148,],[170,]),'read_args1':([152,195,],[176,203,]),'write_args1':([154,197,],[180,204,]),'id2':([173,],[191,]),'do_statement':([184,207,],[199,211,]),'decision_statement1':([209,],[212,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON g_var funcs main','program',6,'p_program','parser-lexer.py',125),
  ('main -> MAIN L_P params R_P var_declaration L_B statements R_B','main',8,'p_main','parser-lexer.py',131),
  ('type -> INT','type',1,'p_type','parser-lexer.py',147),
  ('type -> FLOAT','type',1,'p_type','parser-lexer.py',148),
  ('type -> CHAR','type',1,'p_type','parser-lexer.py',149),
  ('g_var -> var_declaration','g_var',1,'p_g_var','parser-lexer.py',155),
  ('funcs -> function funcs','funcs',2,'p_funcs','parser-lexer.py',163),
  ('funcs -> empty','funcs',1,'p_funcs','parser-lexer.py',164),
  ('var_declaration -> VAR var1','var_declaration',2,'p_var_declaration','parser-lexer.py',168),
  ('var_declaration -> empty','var_declaration',1,'p_var_declaration','parser-lexer.py',169),
  ('var1 -> var_type dec_id var2 SEMICOLON var4','var1',5,'p_var1','parser-lexer.py',173),
  ('var2 -> COMA dec_id var3','var2',3,'p_var2','parser-lexer.py',177),
  ('var2 -> empty','var2',1,'p_var2','parser-lexer.py',178),
  ('var3 -> var2','var3',1,'p_var3','parser-lexer.py',182),
  ('var4 -> var1','var4',1,'p_var4','parser-lexer.py',186),
  ('var4 -> empty','var4',1,'p_var4','parser-lexer.py',187),
  ('dec_id -> ID dec_id1','dec_id',2,'p_dec_id','parser-lexer.py',191),
  ('dec_id1 -> L_SB CTE_I R_SB dec_id2','dec_id1',4,'p_dec_id1','parser-lexer.py',211),
  ('dec_id1 -> empty','dec_id1',1,'p_dec_id1','parser-lexer.py',212),
  ('dec_id2 -> L_SB CTE_I R_SB','dec_id2',3,'p_dec_id2','parser-lexer.py',216),
  ('dec_id2 -> empty','dec_id2',1,'p_dec_id2','parser-lexer.py',217),
  ('id -> ID id1','id',2,'p_id','parser-lexer.py',221),
  ('id1 -> L_SB expression R_SB id2','id1',4,'p_id1','parser-lexer.py',225),
  ('id1 -> empty','id1',1,'p_id1','parser-lexer.py',226),
  ('id2 -> L_SB expression R_SB','id2',3,'p_id2','parser-lexer.py',230),
  ('id2 -> empty','id2',1,'p_id2','parser-lexer.py',231),
  ('var_type -> type','var_type',1,'p_var_type','parser-lexer.py',235),
  ('function -> FUNC func_type ID register_func L_P params R_P var_declaration L_B statements R_B','function',11,'p_function','parser-lexer.py',239),
  ('register_func -> <empty>','register_func',0,'p_register_func','parser-lexer.py',249),
  ('func_type -> VOID','func_type',1,'p_func_type','parser-lexer.py',259),
  ('func_type -> type','func_type',1,'p_func_type','parser-lexer.py',260),
  ('params -> var_type param_type dec_id params1','params',4,'p_params','parser-lexer.py',267),
  ('params -> empty','params',1,'p_params','parser-lexer.py',268),
  ('param_type -> <empty>','param_type',0,'p_param_type','parser-lexer.py',272),
  ('params1 -> COMA params','params1',2,'p_params1','parser-lexer.py',279),
  ('params1 -> empty','params1',1,'p_params1','parser-lexer.py',280),
  ('statements -> statement statements','statements',2,'p_statements','parser-lexer.py',284),
  ('statements -> empty','statements',1,'p_statements','parser-lexer.py',285),
  ('statement -> assignation','statement',1,'p_statement','parser-lexer.py',289),
  ('statement -> call_func','statement',1,'p_statement','parser-lexer.py',290),
  ('statement -> return_func','statement',1,'p_statement','parser-lexer.py',291),
  ('statement -> read','statement',1,'p_statement','parser-lexer.py',292),
  ('statement -> write','statement',1,'p_statement','parser-lexer.py',293),
  ('statement -> decision_statement','statement',1,'p_statement','parser-lexer.py',294),
  ('statement -> repetition_statement','statement',1,'p_statement','parser-lexer.py',295),
  ('statement -> expression','statement',1,'p_statement','parser-lexer.py',296),
  ('assignation -> id EQUAL expression SEMICOLON','assignation',4,'p_assignation','parser-lexer.py',300),
  ('args -> args1','args',1,'p_args','parser-lexer.py',304),
  ('args -> empty','args',1,'p_args','parser-lexer.py',305),
  ('args1 -> expression args2','args1',2,'p_args1','parser-lexer.py',309),
  ('args2 -> COMA args1','args2',2,'p_args2','parser-lexer.py',313),
  ('args2 -> empty','args2',1,'p_args2','parser-lexer.py',314),
  ('call_func -> ID L_P args R_P SEMICOLON','call_func',5,'p_call_func','parser-lexer.py',318),
  ('return_func -> RETURN L_P expression R_P SEMICOLON','return_func',5,'p_return_func','parser-lexer.py',322),
  ('read -> READ L_P read_args R_P SEMICOLON','read',5,'p_read','parser-lexer.py',326),
  ('read_args -> expression read_args1','read_args',2,'p_read_args','parser-lexer.py',330),
  ('read_args1 -> COMA expression read_args1','read_args1',3,'p_read_args1','parser-lexer.py',334),
  ('read_args1 -> empty','read_args1',1,'p_read_args1','parser-lexer.py',335),
  ('write -> PRINT L_P write_args R_P SEMICOLON','write',5,'p_write','parser-lexer.py',339),
  ('write_args -> write_args2 write_args1','write_args',2,'p_write_args','parser-lexer.py',343),
  ('write_args1 -> COMA write_args2 write_args1','write_args1',3,'p_write_args1','parser-lexer.py',347),
  ('write_args1 -> empty','write_args1',1,'p_write_args1','parser-lexer.py',348),
  ('write_args2 -> expression','write_args2',1,'p_write_args2','parser-lexer.py',352),
  ('write_args2 -> CTE_STRING','write_args2',1,'p_write_args2','parser-lexer.py',353),
  ('decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1','decision_statement',8,'p_decision_statement','parser-lexer.py',357),
  ('decision_statement1 -> ELSE L_B statements R_B','decision_statement1',4,'p_decision_statement1','parser-lexer.py',361),
  ('decision_statement1 -> empty','decision_statement1',1,'p_decision_statement1','parser-lexer.py',362),
  ('repetition_statement -> while_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',366),
  ('repetition_statement -> for_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',367),
  ('for_statement -> FOR id EQUAL expression TO expression do_statement','for_statement',7,'p_for_statement','parser-lexer.py',371),
  ('while_statement -> WHILE L_P expression R_P do_statement','while_statement',5,'p_while_statement','parser-lexer.py',375),
  ('do_statement -> DO L_B statements R_B','do_statement',4,'p_do_statement','parser-lexer.py',379),
  ('expression -> texp op1','expression',2,'p_expression','parser-lexer.py',383),
  ('texp -> gexp op2','texp',2,'p_texp','parser-lexer.py',387),
  ('gexp -> mexp op3aux','gexp',2,'p_gexp','parser-lexer.py',391),
  ('mexp -> term op4aux','mexp',2,'p_mexp','parser-lexer.py',395),
  ('term -> fact op5aux','term',2,'p_term','parser-lexer.py',399),
  ('fact -> ID fact1','fact',2,'p_fact','parser-lexer.py',403),
  ('fact -> L_P expression R_P','fact',3,'p_fact','parser-lexer.py',404),
  ('fact -> cte','fact',1,'p_fact','parser-lexer.py',405),
  ('fact1 -> L_P args R_P','fact1',3,'p_fact1','parser-lexer.py',409),
  ('fact1 -> id1','fact1',1,'p_fact1','parser-lexer.py',410),
  ('cte -> CTE_I','cte',1,'p_cte','parser-lexer.py',414),
  ('cte -> CTE_F','cte',1,'p_cte','parser-lexer.py',415),
  ('cte -> CTE_CHAR','cte',1,'p_cte','parser-lexer.py',416),
  ('op1 -> OR expression','op1',2,'p_op1','parser-lexer.py',420),
  ('op1 -> empty','op1',1,'p_op1','parser-lexer.py',421),
  ('op2 -> AND texp','op2',2,'p_op2','parser-lexer.py',425),
  ('op2 -> empty','op2',1,'p_op2','parser-lexer.py',426),
  ('op3 -> LESSTHAN','op3',1,'p_op3','parser-lexer.py',430),
  ('op3 -> LESSTHANEQ','op3',1,'p_op3','parser-lexer.py',431),
  ('op3 -> GREATERTHAN','op3',1,'p_op3','parser-lexer.py',432),
  ('op3 -> GREATERTHANEQ','op3',1,'p_op3','parser-lexer.py',433),
  ('op3 -> EQ','op3',1,'p_op3','parser-lexer.py',434),
  ('op3 -> DIFERENT','op3',1,'p_op3','parser-lexer.py',435),
  ('op3aux -> op3 mexp','op3aux',2,'p_op3aux','parser-lexer.py',439),
  ('op3aux -> empty','op3aux',1,'p_op3aux','parser-lexer.py',440),
  ('op4 -> PLUS','op4',1,'p_op4','parser-lexer.py',444),
  ('op4 -> MINUS','op4',1,'p_op4','parser-lexer.py',445),
  ('op4aux -> op4 mexp','op4aux',2,'p_op4aux','parser-lexer.py',449),
  ('op4aux -> empty','op4aux',1,'p_op4aux','parser-lexer.py',450),
  ('op5 -> MULT','op5',1,'p_op5','parser-lexer.py',454),
  ('op5 -> DIV','op5',1,'p_op5','parser-lexer.py',455),
  ('op5 -> MOD','op5',1,'p_op5','parser-lexer.py',456),
  ('op5aux -> op5 term','op5aux',2,'p_op5aux','parser-lexer.py',460),
  ('op5aux -> empty','op5aux',1,'p_op5aux','parser-lexer.py',461),
  ('empty -> <empty>','empty',0,'p_empty','parser-lexer.py',466),
]
