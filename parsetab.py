
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMP AND CHAR COMA CTE_CHAR CTE_F CTE_I CTE_NEG_F CTE_NEG_I CTE_STRING DIFERENT DIV DO ELSE EQ EQUAL FLOAT FOR FUNC GREATERTHAN GREATERTHANEQ ID IF INT LESSTHAN LESSTHANEQ L_B L_P L_SB MAIN MINUS MOD MULT OR PLUS PRINT PROGRAM READ RETURN R_B R_P R_SB SEMICOLON TO VAR VOID WHILEprogram : PROGRAM ID main_quad SEMICOLON g_var funcs mainmain_quad : main : MAIN L_P params R_P var_declaration L_B main_start statements R_Bmain_start : type : INT\n            | FLOAT\n            | CHARg_var : var_declarationfuncs : function funcs\n            | emptyvar_declaration : VAR var1\n                        | emptyvar1 : var_type dec_id var2 SEMICOLON var4var2 : COMA dec_id var3\n            | emptyvar3 : var2var4 : var1\n            | emptydec_id : ID add_id dec_id1dec_id1 : L_SB CTE_I set_array R_SB dec_id2\n            | emptydec_id2 : L_SB CTE_I set_array_2 R_SB\n        | emptyadd_id : set_array : set_array_2 : id : ID set_id id_quad id1set_id : id1 : verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base\n            | emptyid2 : L_SB add_fake expression remove_fake verify_quad_2 R_SB\n        | emptyverify_dim : verify_quad_1 : verify_quad_2 : add_base : var_type : typefunction : FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_Bregister_func : add_params : start_func : func_type : VOID\n                | typeparams : var_type param_type dec_id params1\n            | emptyparam_type : params1 : COMA params\n                | emptystatements : statement statements\n                | emptystatement : assignation\n                | call_func\n                | return_func\n                | read\n                | write\n                | decision_statement\n                | repetition_statement\n                | expressionassignation : id EQUAL expression SEMICOLONargs : args1\n            | emptyargs1 : add_fake expression param_check remove_fake args2param_check : args2 : COMA next_arg args1\n            | emptynext_arg : call_func : AMP ID call_func_era L_P args R_P SEMICOLONcall_func_exp : AMP ID call_func_era L_P args R_Pcall_func_era : return_func : RETURN L_P expression R_P SEMICOLONread : READ L_P read_args R_P SEMICOLONread_args : add_fake expression remove_fake read_args1read_args1 : COMA add_fake expression remove_fake read_args1\n                | emptywrite : PRINT L_P write_args R_P SEMICOLONwrite_args : write_args2 write_args1write_args1 : COMA write_args2 write_args1\n                    | emptywrite_args2 : add_fake expression remove_fake\n                | CTE_STRING add_cte_stringdecision_statement : IF L_P expression R_P exp_type L_B statements R_B decision_statement1decision_statement1 : ELSE else_jump L_B statements R_B\n                            | emptyexp_type : else_jump : repetition_statement : while_statement\n                            | for_statementfor_statement : FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statementfor_id : for_id_quad : breadcrumb : while_statement : WHILE L_P breadcrumb expression R_P exp_type do_statementdo_statement :  DO L_B statements R_Bexpression : texp generate_quad_1 op1texp : gexp generate_quad_2 op2gexp : mexp generate_quad_3 op3auxmexp : term generate_quad_4 op4auxterm : fact generate_quad_5 op5auxgenerate_quad_1 : generate_quad_2 : generate_quad_3 : generate_quad_4 : generate_quad_5 : fact : call_func_exp\n            | id\n            | L_P add_fake expression R_P remove_fake\n            | cteadd_fake : remove_fake : \n        id_quad :\n    cte : CTE_CHAR add_cte_char\n            | CTE_F add_cte_float\n            | CTE_NEG_F add_cte_float\n            | CTE_I add_cte_int\n            | CTE_NEG_I add_cte_int add_cte_int : add_cte_float : add_cte_char : add_cte_string : add_operator : op1 : OR add_operator expression\n            | emptyop2 : AND add_operator texp\n            | emptyop3 : LESSTHAN\n            | LESSTHANEQ\xa0\n            | GREATERTHAN\n            | GREATERTHANEQ\n            | EQ\n            | DIFERENTop3aux : op3 gexp\n            | emptyop4 : PLUS\n            | MINUSop4aux : op4 mexp\n            | emptyop5 : MULT\n        | DIV\n        | MODop5aux : op5 term\n            | empty\n        empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'main_quad':([3,],[4,]),'g_var':([5,],[6,]),'var_declaration':([5,43,64,],[7,52,103,]),'empty':([5,6,11,26,28,33,38,39,43,45,53,58,61,62,64,70,115,118,119,120,121,134,139,171,176,207,209,217,225,238,241,242,248,255,264,],[9,12,12,32,36,42,48,32,9,36,59,36,67,71,9,71,145,150,153,162,167,179,186,71,202,223,186,202,71,246,251,71,223,263,71,]),'funcs':([6,11,],[10,22,]),'function':([6,11,],[11,11,]),'var1':([8,38,],[14,47,]),'var_type':([8,28,38,45,58,],[15,35,15,35,35,]),'type':([8,13,28,38,45,58,],[16,25,16,16,16,16,]),'main':([10,],[20,]),'func_type':([13,],[23,]),'dec_id':([15,31,44,],[26,39,53,]),'var2':([26,39,],[30,50,]),'add_id':([27,],[33,]),'params':([28,45,58,],[34,54,63,]),'register_func':([29,],[37,]),'dec_id1':([33,],[40,]),'param_type':([35,],[44,]),'var4':([38,],[46,]),'var3':([39,],[49,]),'set_array':([51,],[55,]),'params1':([53,],[57,]),'main_start':([56,],[62,]),'add_params':([60,],[64,]),'dec_id2':([61,],[66,]),'statements':([62,70,171,225,242,264,],[69,107,197,233,252,268,]),'statement':([62,70,171,225,242,264,],[70,70,70,70,70,70,]),'assignation':([62,70,171,225,242,264,],[72,72,72,72,72,72,]),'call_func':([62,70,171,225,242,264,],[73,73,73,73,73,73,]),'return_func':([62,70,171,225,242,264,],[74,74,74,74,74,74,]),'read':([62,70,171,225,242,264,],[75,75,75,75,75,75,]),'write':([62,70,171,225,242,264,],[76,76,76,76,76,76,]),'decision_statement':([62,70,171,225,242,264,],[77,77,77,77,77,77,]),'repetition_statement':([62,70,171,225,242,264,],[78,78,78,78,78,78,]),'expression':([62,70,105,108,111,114,137,140,146,171,190,192,203,220,225,232,242,243,264,266,],[79,79,129,132,135,142,182,187,191,79,212,214,219,231,79,240,79,253,79,269,]),'id':([62,70,91,105,108,111,114,137,140,146,152,161,166,171,190,192,193,203,220,225,232,242,243,264,266,],[80,80,117,130,130,130,130,130,130,130,130,130,130,80,130,130,130,130,130,80,130,80,130,80,130,]),'while_statement':([62,70,171,225,242,264,],[87,87,87,87,87,87,]),'for_statement':([62,70,171,225,242,264,],[88,88,88,88,88,88,]),'texp':([62,70,105,108,111,114,137,140,146,171,190,192,193,203,220,225,232,242,243,264,266,],[89,89,89,89,89,89,89,89,89,89,89,89,215,89,89,89,89,89,89,89,89,]),'gexp':([62,70,105,108,111,114,137,140,146,152,171,190,192,193,203,220,225,232,242,243,264,266,],[92,92,92,92,92,92,92,92,92,194,92,92,92,92,92,92,92,92,92,92,92,92,]),'mexp':([62,70,105,108,111,114,137,140,146,152,161,171,190,192,193,203,220,225,232,242,243,264,266,],[93,93,93,93,93,93,93,93,93,93,195,93,93,93,93,93,93,93,93,93,93,93,93,]),'term':([62,70,105,108,111,114,137,140,146,152,161,166,171,190,192,193,203,220,225,232,242,243,264,266,],[94,94,94,94,94,94,94,94,94,94,94,196,94,94,94,94,94,94,94,94,94,94,94,94,]),'fact':([62,70,105,108,111,114,137,140,146,152,161,166,171,190,192,193,203,220,225,232,242,243,264,266,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'call_func_exp':([62,70,105,108,111,114,137,140,146,152,161,166,171,190,192,193,203,220,225,232,242,243,264,266,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'cte':([62,70,105,108,111,114,137,140,146,152,161,166,171,190,192,193,203,220,225,232,242,243,264,266,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'add_fake':([68,112,113,176,185,204,217,222,254,261,],[105,137,140,203,140,220,203,232,203,266,]),'set_id':([82,],[110,]),'generate_quad_1':([89,],[115,]),'generate_quad_2':([92,],[118,]),'generate_quad_3':([93,],[119,]),'generate_quad_4':([94,],[120,]),'generate_quad_5':([95,],[121,]),'add_cte_char':([98,],[122,]),'add_cte_float':([99,100,],[123,124,]),'add_cte_int':([101,102,],[125,126,]),'start_func':([103,],[127,]),'set_array_2':([104,],[128,]),'call_func_era':([109,174,],[133,199,]),'id_quad':([110,],[134,]),'read_args':([112,],[136,]),'write_args':([113,],[138,]),'write_args2':([113,185,],[139,209,]),'op1':([115,],[143,]),'breadcrumb':([116,236,],[146,243,]),'for_id':([117,],[147,]),'op2':([118,],[148,]),'op3aux':([119,],[151,]),'op3':([119,],[152,]),'op4aux':([120,],[160,]),'op4':([120,],[161,]),'op5aux':([121,],[165,]),'op5':([121,],[166,]),'id1':([134,],[177,]),'verify_dim':([134,],[178,]),'write_args1':([139,209,],[184,224,]),'add_cte_string':([141,],[188,]),'add_operator':([144,149,],[190,193,]),'remove_fake':([173,182,187,230,231,240,269,],[198,207,210,238,239,248,271,]),'args':([176,217,],[200,228,]),'args1':([176,217,254,],[201,201,260,]),'exp_type':([189,213,253,],[211,226,259,]),'read_args1':([207,248,],[221,256,]),'for_id_quad':([214,],[227,]),'param_check':([219,],[230,]),'do_statement':([226,259,],[234,265,]),'args2':([238,],[244,]),'verify_quad_1':([239,],[247,]),'decision_statement1':([241,],[249,]),'next_arg':([245,],[254,]),'else_jump':([250,],[257,]),'id2':([255,],[262,]),'add_base':([262,],[267,]),'verify_quad_2':([271,],[272,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID main_quad SEMICOLON g_var funcs main','program',7,'p_program','parser_lexer.py',226),
  ('main_quad -> <empty>','main_quad',0,'p_main_quad','parser_lexer.py',234),
  ('main -> MAIN L_P params R_P var_declaration L_B main_start statements R_B','main',9,'p_main','parser_lexer.py',240),
  ('main_start -> <empty>','main_start',0,'p_main_start','parser_lexer.py',258),
  ('type -> INT','type',1,'p_type','parser_lexer.py',263),
  ('type -> FLOAT','type',1,'p_type','parser_lexer.py',264),
  ('type -> CHAR','type',1,'p_type','parser_lexer.py',265),
  ('g_var -> var_declaration','g_var',1,'p_g_var','parser_lexer.py',271),
  ('funcs -> function funcs','funcs',2,'p_funcs','parser_lexer.py',278),
  ('funcs -> empty','funcs',1,'p_funcs','parser_lexer.py',279),
  ('var_declaration -> VAR var1','var_declaration',2,'p_var_declaration','parser_lexer.py',283),
  ('var_declaration -> empty','var_declaration',1,'p_var_declaration','parser_lexer.py',284),
  ('var1 -> var_type dec_id var2 SEMICOLON var4','var1',5,'p_var1','parser_lexer.py',288),
  ('var2 -> COMA dec_id var3','var2',3,'p_var2','parser_lexer.py',292),
  ('var2 -> empty','var2',1,'p_var2','parser_lexer.py',293),
  ('var3 -> var2','var3',1,'p_var3','parser_lexer.py',297),
  ('var4 -> var1','var4',1,'p_var4','parser_lexer.py',301),
  ('var4 -> empty','var4',1,'p_var4','parser_lexer.py',302),
  ('dec_id -> ID add_id dec_id1','dec_id',3,'p_dec_id','parser_lexer.py',306),
  ('dec_id1 -> L_SB CTE_I set_array R_SB dec_id2','dec_id1',5,'p_dec_id1','parser_lexer.py',310),
  ('dec_id1 -> empty','dec_id1',1,'p_dec_id1','parser_lexer.py',311),
  ('dec_id2 -> L_SB CTE_I set_array_2 R_SB','dec_id2',4,'p_dec_id2','parser_lexer.py',315),
  ('dec_id2 -> empty','dec_id2',1,'p_dec_id2','parser_lexer.py',316),
  ('add_id -> <empty>','add_id',0,'p_add_id','parser_lexer.py',320),
  ('set_array -> <empty>','set_array',0,'p_set_array','parser_lexer.py',340),
  ('set_array_2 -> <empty>','set_array_2',0,'p_set_array_2','parser_lexer.py',357),
  ('id -> ID set_id id_quad id1','id',4,'p_id','parser_lexer.py',377),
  ('set_id -> <empty>','set_id',0,'p_set_id','parser_lexer.py',381),
  ('id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base','id1',9,'p_id1','parser_lexer.py',387),
  ('id1 -> empty','id1',1,'p_id1','parser_lexer.py',388),
  ('id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB','id2',6,'p_id2','parser_lexer.py',392),
  ('id2 -> empty','id2',1,'p_id2','parser_lexer.py',393),
  ('verify_dim -> <empty>','verify_dim',0,'p_verify_dim','parser_lexer.py',397),
  ('verify_quad_1 -> <empty>','verify_quad_1',0,'p_verify_quad_1','parser_lexer.py',410),
  ('verify_quad_2 -> <empty>','verify_quad_2',0,'p_verify_quad_2','parser_lexer.py',444),
  ('add_base -> <empty>','add_base',0,'p_add_base','parser_lexer.py',477),
  ('var_type -> type','var_type',1,'p_var_type','parser_lexer.py',511),
  ('function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B','function',13,'p_function','parser_lexer.py',515),
  ('register_func -> <empty>','register_func',0,'p_register_func','parser_lexer.py',529),
  ('add_params -> <empty>','add_params',0,'p_add_params','parser_lexer.py',544),
  ('start_func -> <empty>','start_func',0,'p_start_func','parser_lexer.py',550),
  ('func_type -> VOID','func_type',1,'p_func_type','parser_lexer.py',556),
  ('func_type -> type','func_type',1,'p_func_type','parser_lexer.py',557),
  ('params -> var_type param_type dec_id params1','params',4,'p_params','parser_lexer.py',564),
  ('params -> empty','params',1,'p_params','parser_lexer.py',565),
  ('param_type -> <empty>','param_type',0,'p_param_type','parser_lexer.py',569),
  ('params1 -> COMA params','params1',2,'p_params1','parser_lexer.py',576),
  ('params1 -> empty','params1',1,'p_params1','parser_lexer.py',577),
  ('statements -> statement statements','statements',2,'p_statements','parser_lexer.py',581),
  ('statements -> empty','statements',1,'p_statements','parser_lexer.py',582),
  ('statement -> assignation','statement',1,'p_statement','parser_lexer.py',586),
  ('statement -> call_func','statement',1,'p_statement','parser_lexer.py',587),
  ('statement -> return_func','statement',1,'p_statement','parser_lexer.py',588),
  ('statement -> read','statement',1,'p_statement','parser_lexer.py',589),
  ('statement -> write','statement',1,'p_statement','parser_lexer.py',590),
  ('statement -> decision_statement','statement',1,'p_statement','parser_lexer.py',591),
  ('statement -> repetition_statement','statement',1,'p_statement','parser_lexer.py',592),
  ('statement -> expression','statement',1,'p_statement','parser_lexer.py',593),
  ('assignation -> id EQUAL expression SEMICOLON','assignation',4,'p_assignation','parser_lexer.py',597),
  ('args -> args1','args',1,'p_args','parser_lexer.py',612),
  ('args -> empty','args',1,'p_args','parser_lexer.py',613),
  ('args1 -> add_fake expression param_check remove_fake args2','args1',5,'p_args1','parser_lexer.py',617),
  ('param_check -> <empty>','param_check',0,'p_param_check','parser_lexer.py',621),
  ('args2 -> COMA next_arg args1','args2',3,'p_args2','parser_lexer.py',636),
  ('args2 -> empty','args2',1,'p_args2','parser_lexer.py',637),
  ('next_arg -> <empty>','next_arg',0,'p_next_arg','parser_lexer.py',641),
  ('call_func -> AMP ID call_func_era L_P args R_P SEMICOLON','call_func',7,'p_call_func','parser_lexer.py',647),
  ('call_func_exp -> AMP ID call_func_era L_P args R_P','call_func_exp',6,'p_call_func_exp','parser_lexer.py',658),
  ('call_func_era -> <empty>','call_func_era',0,'p_call_func_era','parser_lexer.py',681),
  ('return_func -> RETURN L_P expression R_P SEMICOLON','return_func',5,'p_return_func','parser_lexer.py',692),
  ('read -> READ L_P read_args R_P SEMICOLON','read',5,'p_read','parser_lexer.py',702),
  ('read_args -> add_fake expression remove_fake read_args1','read_args',4,'p_read_args','parser_lexer.py',711),
  ('read_args1 -> COMA add_fake expression remove_fake read_args1','read_args1',5,'p_read_args1','parser_lexer.py',715),
  ('read_args1 -> empty','read_args1',1,'p_read_args1','parser_lexer.py',716),
  ('write -> PRINT L_P write_args R_P SEMICOLON','write',5,'p_write','parser_lexer.py',720),
  ('write_args -> write_args2 write_args1','write_args',2,'p_write_args','parser_lexer.py',724),
  ('write_args1 -> COMA write_args2 write_args1','write_args1',3,'p_write_args1','parser_lexer.py',728),
  ('write_args1 -> empty','write_args1',1,'p_write_args1','parser_lexer.py',729),
  ('write_args2 -> add_fake expression remove_fake','write_args2',3,'p_write_args2','parser_lexer.py',733),
  ('write_args2 -> CTE_STRING add_cte_string','write_args2',2,'p_write_args2','parser_lexer.py',734),
  ('decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1','decision_statement',9,'p_decision_statement','parser_lexer.py',742),
  ('decision_statement1 -> ELSE else_jump L_B statements R_B','decision_statement1',5,'p_decision_statement1','parser_lexer.py',749),
  ('decision_statement1 -> empty','decision_statement1',1,'p_decision_statement1','parser_lexer.py',750),
  ('exp_type -> <empty>','exp_type',0,'p_exp_type','parser_lexer.py',754),
  ('else_jump -> <empty>','else_jump',0,'p_else_jump','parser_lexer.py',766),
  ('repetition_statement -> while_statement','repetition_statement',1,'p_repetition_statement','parser_lexer.py',775),
  ('repetition_statement -> for_statement','repetition_statement',1,'p_repetition_statement','parser_lexer.py',776),
  ('for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement','for_statement',11,'p_for_statement','parser_lexer.py',780),
  ('for_id -> <empty>','for_id',0,'p_for_id','parser_lexer.py',806),
  ('for_id_quad -> <empty>','for_id_quad',0,'p_for_id_quad','parser_lexer.py',811),
  ('breadcrumb -> <empty>','breadcrumb',0,'p_breadcrumb','parser_lexer.py',826),
  ('while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement','while_statement',7,'p_while_statement','parser_lexer.py',832),
  ('do_statement -> DO L_B statements R_B','do_statement',4,'p_do_statement','parser_lexer.py',841),
  ('expression -> texp generate_quad_1 op1','expression',3,'p_expression','parser_lexer.py',845),
  ('texp -> gexp generate_quad_2 op2','texp',3,'p_texp','parser_lexer.py',849),
  ('gexp -> mexp generate_quad_3 op3aux','gexp',3,'p_gexp','parser_lexer.py',853),
  ('mexp -> term generate_quad_4 op4aux','mexp',3,'p_mexp','parser_lexer.py',857),
  ('term -> fact generate_quad_5 op5aux','term',3,'p_term','parser_lexer.py',861),
  ('generate_quad_1 -> <empty>','generate_quad_1',0,'p_generate_quad_1','parser_lexer.py',865),
  ('generate_quad_2 -> <empty>','generate_quad_2',0,'p_generate_quad_2','parser_lexer.py',872),
  ('generate_quad_3 -> <empty>','generate_quad_3',0,'p_generate_quad_3','parser_lexer.py',879),
  ('generate_quad_4 -> <empty>','generate_quad_4',0,'p_generate_quad_4','parser_lexer.py',886),
  ('generate_quad_5 -> <empty>','generate_quad_5',0,'p_generate_quad_5','parser_lexer.py',893),
  ('fact -> call_func_exp','fact',1,'p_fact','parser_lexer.py',900),
  ('fact -> id','fact',1,'p_fact','parser_lexer.py',901),
  ('fact -> L_P add_fake expression R_P remove_fake','fact',5,'p_fact','parser_lexer.py',902),
  ('fact -> cte','fact',1,'p_fact','parser_lexer.py',903),
  ('add_fake -> <empty>','add_fake',0,'p_add_fake','parser_lexer.py',907),
  ('remove_fake -> <empty>','remove_fake',0,'p_remove_fake','parser_lexer.py',913),
  ('id_quad -> <empty>','id_quad',0,'p_id_quad','parser_lexer.py',920),
  ('cte -> CTE_CHAR add_cte_char','cte',2,'p_cte','parser_lexer.py',944),
  ('cte -> CTE_F add_cte_float','cte',2,'p_cte','parser_lexer.py',945),
  ('cte -> CTE_NEG_F add_cte_float','cte',2,'p_cte','parser_lexer.py',946),
  ('cte -> CTE_I add_cte_int','cte',2,'p_cte','parser_lexer.py',947),
  ('cte -> CTE_NEG_I add_cte_int','cte',2,'p_cte','parser_lexer.py',948),
  ('add_cte_int -> <empty>','add_cte_int',0,'p_add_cte_int','parser_lexer.py',952),
  ('add_cte_float -> <empty>','add_cte_float',0,'p_add_cte_float','parser_lexer.py',967),
  ('add_cte_char -> <empty>','add_cte_char',0,'p_add_cte_char','parser_lexer.py',982),
  ('add_cte_string -> <empty>','add_cte_string',0,'p_add_cte_string','parser_lexer.py',997),
  ('add_operator -> <empty>','add_operator',0,'p_add_operator','parser_lexer.py',1012),
  ('op1 -> OR add_operator expression','op1',3,'p_op1','parser_lexer.py',1018),
  ('op1 -> empty','op1',1,'p_op1','parser_lexer.py',1019),
  ('op2 -> AND add_operator texp','op2',3,'p_op2','parser_lexer.py',1023),
  ('op2 -> empty','op2',1,'p_op2','parser_lexer.py',1024),
  ('op3 -> LESSTHAN','op3',1,'p_op3','parser_lexer.py',1028),
  ('op3 -> LESSTHANEQ','op3',1,'p_op3','parser_lexer.py',1029),
  ('op3 -> GREATERTHAN','op3',1,'p_op3','parser_lexer.py',1030),
  ('op3 -> GREATERTHANEQ','op3',1,'p_op3','parser_lexer.py',1031),
  ('op3 -> EQ','op3',1,'p_op3','parser_lexer.py',1032),
  ('op3 -> DIFERENT','op3',1,'p_op3','parser_lexer.py',1033),
  ('op3aux -> op3 gexp','op3aux',2,'p_op3aux','parser_lexer.py',1039),
  ('op3aux -> empty','op3aux',1,'p_op3aux','parser_lexer.py',1040),
  ('op4 -> PLUS','op4',1,'p_op4','parser_lexer.py',1044),
  ('op4 -> MINUS','op4',1,'p_op4','parser_lexer.py',1045),
  ('op4aux -> op4 mexp','op4aux',2,'p_op4aux','parser_lexer.py',1051),
  ('op4aux -> empty','op4aux',1,'p_op4aux','parser_lexer.py',1052),
  ('op5 -> MULT','op5',1,'p_op5','parser_lexer.py',1056),
  ('op5 -> DIV','op5',1,'p_op5','parser_lexer.py',1057),
  ('op5 -> MOD','op5',1,'p_op5','parser_lexer.py',1058),
  ('op5aux -> op5 term','op5aux',2,'p_op5aux','parser_lexer.py',1064),
  ('op5aux -> empty','op5aux',1,'p_op5aux','parser_lexer.py',1065),
  ('empty -> <empty>','empty',0,'p_empty','parser_lexer.py',1070),
]
