
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COMA CTE_CHAR CTE_F CTE_I CTE_STRING DIFERENT DIV DO ELSE EQ EQUAL FLOAT FOR FUNC GREATERTHAN GREATERTHANEQ ID IF INT LESSTHAN LESSTHANEQ L_B L_P L_SB MAIN MINUS MOD MULT OR PLUS PRINT PROGRAM READ RETURN R_B R_P R_SB SEMICOLON TO VAR VOID WHILEprogram : PROGRAM ID SEMICOLON g_var funcs mainmain : MAIN L_P params R_P var_declaration L_B statements R_Btype : INT \n            | FLOAT \n            | CHARg_var : var_declaration\n            | emptyfuncs : function funcs\n            | emptyvar_declaration : VAR var1\n                        | emptyvar1 : var_type dec_id var2 SEMICOLON var4var2 : COMA dec_id var3\n            | emptyvar3 : var2var4 : var1\n            | emptydec_id : ID dec_id1dec_id1 : L_SB CTE_I R_SB dec_id2\n            | emptydec_id2 : L_SB CTE_I R_SB\n        | emptyid : ID id1id1 : L_SB expression R_SB id2\n            | emptyid2 : L_SB expression R_SB\n        | emptyvar_type : typefunction : FUNC func_type ID L_P params R_P var_declaration L_B statements R_Bfunc_type : VOID\n                | typeparams : var_type id params1\n            | emptyparams1 : COMA params\n                | emptystatements : statement statements\n                | emptystatement : assignation\n                | call_func\n                | return_func\n                | read\n                | write\n                | decision_statement\n                | repetition_statement\n                | expressionassignation : id EQUAL expression SEMICOLONargs : args1\n            | emptyargs1 : expression args2args2 : COMA args1\n            | emptycall_func :  ID L_P args R_P SEMICOLONreturn_func : RETURN L_P expression R_P SEMICOLONread : READ L_P read_args R_P SEMICOLONread_args : expression read_args1read_args1 : COMA expression read_args1\n                | emptywrite : PRINT L_P write_args R_P SEMICOLONwrite_args : write_args2 write_args1write_args1 : COMA write_args2 write_args1\n                    | emptywrite_args2 : expression\n                | CTE_STRINGdecision_statement : IF L_P expression R_P L_B statements R_B decision_statement1decision_statement1 : ELSE L_B statements R_B\n                            | emptyrepetition_statement : while_statement\n                            | for_statementfor_statement : FOR id EQUAL expression TO expression do_statementwhile_statement : WHILE L_P expression R_P do_statementdo_statement :  DO L_B statements R_Bexpression : texp op1texp : gexp op2gexp : mexp op3auxmexp : term op4auxterm : fact op5auxfact : ID fact1\n            | L_P expression R_P\n            | ctefact1 : L_P args R_P\n            | id1cte : CTE_I\n            | CTE_F\n            | CTE_CHARop1 : OR expression\n            | emptyop2 : AND texp\n            | emptyop3 : LESSTHAN\n            | LESSTHANEQ\xa0\n            | GREATERTHAN\n            | GREATERTHANEQ\n            | EQ\n            | DIFERENTop3aux : op3 mexp\n            | emptyop4 : PLUS\n            | MINUSop4aux : op4 mexp\n            | emptyop5 : MULT\n        | DIV\n        | MODop5aux : op5 term\n            | empty\n        empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,134,],[0,-1,-2,]),'ID':([2,14,15,16,17,18,22,23,24,30,36,58,59,64,67,68,69,70,71,72,73,74,75,76,77,81,83,84,85,86,87,88,89,90,92,97,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,136,137,138,139,140,141,142,143,145,146,147,148,149,150,151,152,157,170,172,174,177,178,182,186,191,193,194,195,197,199,200,202,206,208,210,211,213,214,215,217,],[3,26,-28,-3,-4,-5,28,-30,-31,26,44,72,-25,92,-106,-106,-106,-106,-106,-106,72,-79,-82,-83,-84,92,-38,-39,-40,-41,-42,-43,-44,-45,-106,-67,-68,44,-106,-72,72,-86,-73,72,-88,-74,72,-96,-89,-90,-91,-92,-93,-94,-75,72,-100,-97,-98,-76,72,-105,-101,-102,-103,-77,72,-81,92,72,72,-81,72,72,72,72,72,72,-24,-27,-85,-87,-95,-99,-104,-78,72,-80,72,-46,-80,72,72,-26,-52,-53,-54,-58,92,-70,72,92,-106,-69,-64,-66,-71,92,-65,]),'SEMICOLON':([3,25,26,29,31,32,34,40,49,50,51,59,62,63,67,68,69,70,71,72,74,75,76,77,101,102,104,105,107,108,110,117,119,122,124,128,130,133,146,147,148,149,150,151,152,157,159,172,178,179,180,184,191,],[4,-106,-106,39,-14,-18,-20,-106,-13,-15,-106,-25,-19,-22,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,-21,-24,-27,-85,-87,-95,-99,-104,-78,177,-80,193,194,195,197,-26,]),'VAR':([4,42,60,],[8,8,8,]),'FUNC':([4,5,6,7,10,13,39,46,47,48,176,],[-106,12,-6,-7,12,-10,-106,-12,-16,-17,-29,]),'MAIN':([4,5,6,7,9,10,11,13,21,39,46,47,48,176,],[-106,-106,-6,-7,20,-106,-9,-10,-8,-106,-12,-16,-17,-29,]),'INT':([8,12,27,38,39,55,],[16,16,16,16,16,16,]),'FLOAT':([8,12,27,38,39,55,],[17,17,17,17,17,17,]),'CHAR':([8,12,27,38,39,55,],[18,18,18,18,18,18,]),'VOID':([12,],[23,]),'L_B':([13,39,42,46,47,48,52,53,60,78,188,201,212,],[-10,-106,-106,-12,-16,-17,64,-11,-106,132,199,206,215,]),'L_P':([20,28,58,59,64,67,68,69,70,71,72,73,74,75,76,77,81,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,136,137,138,139,140,141,142,143,145,146,147,148,149,150,151,152,157,170,172,174,177,178,182,186,191,193,194,195,197,199,200,202,206,208,210,211,213,214,215,217,],[27,38,73,-25,73,-106,-106,-106,-106,-106,129,73,-79,-82,-83,-84,73,-38,-39,-40,-41,-42,-43,-44,-45,137,139,140,141,142,-67,-68,143,-106,-72,73,-86,-73,73,-88,-74,73,-96,-89,-90,-91,-92,-93,-94,-75,73,-100,-97,-98,-76,73,-105,-101,-102,-103,-77,73,-81,73,73,73,-81,73,73,73,73,73,73,-24,-27,-85,-87,-95,-99,-104,-78,73,-80,73,-46,-80,73,73,-26,-52,-53,-54,-58,73,-70,73,73,-106,-69,-64,-66,-71,73,-65,]),'COMA':([25,26,32,34,40,43,44,51,57,59,62,63,67,68,69,70,71,72,74,75,76,77,101,102,104,105,107,108,110,117,119,122,124,128,130,133,146,147,148,149,150,151,152,156,157,163,165,166,167,172,191,196,198,],[30,-106,-18,-20,30,55,-106,-106,-23,-25,-19,-22,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,-21,-24,-27,-85,-87,-95,-99,-104,174,-78,182,186,-62,-63,-80,-26,182,186,]),'L_SB':([26,44,51,72,92,101,],[33,58,61,58,58,145,]),'R_P':([27,35,37,38,43,44,45,54,55,56,57,59,65,67,68,69,70,71,72,74,75,76,77,101,102,104,105,107,108,110,117,119,122,124,128,129,130,131,137,146,147,148,149,150,151,152,153,154,155,156,157,160,161,162,163,164,165,166,167,168,169,172,173,175,181,183,185,187,191,192,196,198,203,204,],[-106,42,-33,-106,-106,-106,60,-32,-106,-35,-23,-25,-34,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-106,-81,157,-106,-24,-27,-85,-87,-95,-99,-104,172,-47,-48,-106,-78,178,179,180,-106,184,-106,-62,-63,188,189,-80,-49,-51,-55,-57,-59,-61,-26,-50,-106,-106,-56,-60,]),'CTE_I':([33,58,59,61,64,67,68,69,70,71,72,73,74,75,76,77,81,83,84,85,86,87,88,89,90,92,97,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,136,137,138,139,140,141,142,143,145,146,147,148,149,150,151,152,157,170,172,174,177,178,182,186,191,193,194,195,197,199,200,202,206,208,210,211,213,214,215,217,],[41,75,-25,79,75,-106,-106,-106,-106,-106,-106,75,-79,-82,-83,-84,75,-38,-39,-40,-41,-42,-43,-44,-45,-106,-67,-68,-106,-72,75,-86,-73,75,-88,-74,75,-96,-89,-90,-91,-92,-93,-94,-75,75,-100,-97,-98,-76,75,-105,-101,-102,-103,-77,75,-81,75,75,75,-81,75,75,75,75,75,75,-24,-27,-85,-87,-95,-99,-104,-78,75,-80,75,-46,-80,75,75,-26,-52,-53,-54,-58,75,-70,75,75,-106,-69,-64,-66,-71,75,-65,]),'R_SB':([41,59,66,67,68,69,70,71,72,74,75,76,77,79,101,102,104,105,107,108,110,117,119,122,124,128,130,146,147,148,149,150,151,152,157,171,172,191,],[51,-25,101,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,133,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,-24,-27,-85,-87,-95,-99,-104,-78,191,-80,-26,]),'EQUAL':([44,57,59,91,92,101,138,144,146,147,191,],[-106,-23,-25,136,-106,-106,-23,170,-24,-27,-26,]),'CTE_F':([58,59,64,67,68,69,70,71,72,73,74,75,76,77,81,83,84,85,86,87,88,89,90,92,97,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,136,137,138,139,140,141,142,143,145,146,147,148,149,150,151,152,157,170,172,174,177,178,182,186,191,193,194,195,197,199,200,202,206,208,210,211,213,214,215,217,],[76,-25,76,-106,-106,-106,-106,-106,-106,76,-79,-82,-83,-84,76,-38,-39,-40,-41,-42,-43,-44,-45,-106,-67,-68,-106,-72,76,-86,-73,76,-88,-74,76,-96,-89,-90,-91,-92,-93,-94,-75,76,-100,-97,-98,-76,76,-105,-101,-102,-103,-77,76,-81,76,76,76,-81,76,76,76,76,76,76,-24,-27,-85,-87,-95,-99,-104,-78,76,-80,76,-46,-80,76,76,-26,-52,-53,-54,-58,76,-70,76,76,-106,-69,-64,-66,-71,76,-65,]),'CTE_CHAR':([58,59,64,67,68,69,70,71,72,73,74,75,76,77,81,83,84,85,86,87,88,89,90,92,97,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,136,137,138,139,140,141,142,143,145,146,147,148,149,150,151,152,157,170,172,174,177,178,182,186,191,193,194,195,197,199,200,202,206,208,210,211,213,214,215,217,],[77,-25,77,-106,-106,-106,-106,-106,-106,77,-79,-82,-83,-84,77,-38,-39,-40,-41,-42,-43,-44,-45,-106,-67,-68,-106,-72,77,-86,-73,77,-88,-74,77,-96,-89,-90,-91,-92,-93,-94,-75,77,-100,-97,-98,-76,77,-105,-101,-102,-103,-77,77,-81,77,77,77,-81,77,77,77,77,77,77,-24,-27,-85,-87,-95,-99,-104,-78,77,-80,77,-46,-80,77,77,-26,-52,-53,-54,-58,77,-70,77,77,-106,-69,-64,-66,-71,77,-65,]),'MULT':([59,71,72,74,75,76,77,92,101,128,130,138,146,147,157,172,178,191,],[-25,125,-106,-79,-82,-83,-84,-106,-106,-77,-81,-81,-24,-27,-78,-80,-80,-26,]),'DIV':([59,71,72,74,75,76,77,92,101,128,130,138,146,147,157,172,178,191,],[-25,126,-106,-79,-82,-83,-84,-106,-106,-77,-81,-81,-24,-27,-78,-80,-80,-26,]),'MOD':([59,71,72,74,75,76,77,92,101,128,130,138,146,147,157,172,178,191,],[-25,127,-106,-79,-82,-83,-84,-106,-106,-77,-81,-81,-24,-27,-78,-80,-80,-26,]),'PLUS':([59,70,71,72,74,75,76,77,92,101,122,124,128,130,138,146,147,152,157,172,178,191,],[-25,120,-106,-106,-79,-82,-83,-84,-106,-106,-76,-105,-77,-81,-81,-24,-27,-104,-78,-80,-80,-26,]),'MINUS':([59,70,71,72,74,75,76,77,92,101,122,124,128,130,138,146,147,152,157,172,178,191,],[-25,121,-106,-106,-79,-82,-83,-84,-106,-106,-76,-105,-77,-81,-81,-24,-27,-104,-78,-80,-80,-26,]),'LESSTHAN':([59,69,70,71,72,74,75,76,77,92,101,117,119,122,124,128,130,138,146,147,151,152,157,172,178,191,],[-25,111,-106,-106,-106,-79,-82,-83,-84,-106,-106,-75,-100,-76,-105,-77,-81,-81,-24,-27,-99,-104,-78,-80,-80,-26,]),'LESSTHANEQ':([59,69,70,71,72,74,75,76,77,92,101,117,119,122,124,128,130,138,146,147,151,152,157,172,178,191,],[-25,112,-106,-106,-106,-79,-82,-83,-84,-106,-106,-75,-100,-76,-105,-77,-81,-81,-24,-27,-99,-104,-78,-80,-80,-26,]),'GREATERTHAN':([59,69,70,71,72,74,75,76,77,92,101,117,119,122,124,128,130,138,146,147,151,152,157,172,178,191,],[-25,113,-106,-106,-106,-79,-82,-83,-84,-106,-106,-75,-100,-76,-105,-77,-81,-81,-24,-27,-99,-104,-78,-80,-80,-26,]),'GREATERTHANEQ':([59,69,70,71,72,74,75,76,77,92,101,117,119,122,124,128,130,138,146,147,151,152,157,172,178,191,],[-25,114,-106,-106,-106,-79,-82,-83,-84,-106,-106,-75,-100,-76,-105,-77,-81,-81,-24,-27,-99,-104,-78,-80,-80,-26,]),'EQ':([59,69,70,71,72,74,75,76,77,92,101,117,119,122,124,128,130,138,146,147,151,152,157,172,178,191,],[-25,115,-106,-106,-106,-79,-82,-83,-84,-106,-106,-75,-100,-76,-105,-77,-81,-81,-24,-27,-99,-104,-78,-80,-80,-26,]),'DIFERENT':([59,69,70,71,72,74,75,76,77,92,101,117,119,122,124,128,130,138,146,147,151,152,157,172,178,191,],[-25,116,-106,-106,-106,-79,-82,-83,-84,-106,-106,-75,-100,-76,-105,-77,-81,-81,-24,-27,-99,-104,-78,-80,-80,-26,]),'AND':([59,68,69,70,71,72,74,75,76,77,92,101,108,110,117,119,122,124,128,130,138,146,147,150,151,152,157,172,178,191,],[-25,106,-106,-106,-106,-106,-79,-82,-83,-84,-106,-106,-74,-96,-75,-100,-76,-105,-77,-81,-81,-24,-27,-95,-99,-104,-78,-80,-80,-26,]),'OR':([59,67,68,69,70,71,72,74,75,76,77,92,101,105,107,108,110,117,119,122,124,128,130,138,146,147,149,150,151,152,157,172,178,191,],[-25,103,-106,-106,-106,-106,-106,-79,-82,-83,-84,-106,-106,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,-81,-24,-27,-87,-95,-99,-104,-78,-80,-80,-26,]),'RETURN':([59,64,67,68,69,70,71,72,74,75,76,77,81,83,84,85,86,87,88,89,90,92,97,98,101,102,104,105,107,108,110,117,119,122,124,128,130,132,138,146,147,148,149,150,151,152,157,172,177,178,191,193,194,195,197,199,200,206,208,210,211,213,214,215,217,],[-25,93,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,93,-38,-39,-40,-41,-42,-43,-44,-45,-106,-67,-68,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,93,-81,-24,-27,-85,-87,-95,-99,-104,-78,-80,-46,-80,-26,-52,-53,-54,-58,93,-70,93,-106,-69,-64,-66,-71,93,-65,]),'READ':([59,64,67,68,69,70,71,72,74,75,76,77,81,83,84,85,86,87,88,89,90,92,97,98,101,102,104,105,107,108,110,117,119,122,124,128,130,132,138,146,147,148,149,150,151,152,157,172,177,178,191,193,194,195,197,199,200,206,208,210,211,213,214,215,217,],[-25,94,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,94,-38,-39,-40,-41,-42,-43,-44,-45,-106,-67,-68,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,94,-81,-24,-27,-85,-87,-95,-99,-104,-78,-80,-46,-80,-26,-52,-53,-54,-58,94,-70,94,-106,-69,-64,-66,-71,94,-65,]),'PRINT':([59,64,67,68,69,70,71,72,74,75,76,77,81,83,84,85,86,87,88,89,90,92,97,98,101,102,104,105,107,108,110,117,119,122,124,128,130,132,138,146,147,148,149,150,151,152,157,172,177,178,191,193,194,195,197,199,200,206,208,210,211,213,214,215,217,],[-25,95,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,95,-38,-39,-40,-41,-42,-43,-44,-45,-106,-67,-68,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,95,-81,-24,-27,-85,-87,-95,-99,-104,-78,-80,-46,-80,-26,-52,-53,-54,-58,95,-70,95,-106,-69,-64,-66,-71,95,-65,]),'IF':([59,64,67,68,69,70,71,72,74,75,76,77,81,83,84,85,86,87,88,89,90,92,97,98,101,102,104,105,107,108,110,117,119,122,124,128,130,132,138,146,147,148,149,150,151,152,157,172,177,178,191,193,194,195,197,199,200,206,208,210,211,213,214,215,217,],[-25,96,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,96,-38,-39,-40,-41,-42,-43,-44,-45,-106,-67,-68,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,96,-81,-24,-27,-85,-87,-95,-99,-104,-78,-80,-46,-80,-26,-52,-53,-54,-58,96,-70,96,-106,-69,-64,-66,-71,96,-65,]),'WHILE':([59,64,67,68,69,70,71,72,74,75,76,77,81,83,84,85,86,87,88,89,90,92,97,98,101,102,104,105,107,108,110,117,119,122,124,128,130,132,138,146,147,148,149,150,151,152,157,172,177,178,191,193,194,195,197,199,200,206,208,210,211,213,214,215,217,],[-25,99,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,99,-38,-39,-40,-41,-42,-43,-44,-45,-106,-67,-68,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,99,-81,-24,-27,-85,-87,-95,-99,-104,-78,-80,-46,-80,-26,-52,-53,-54,-58,99,-70,99,-106,-69,-64,-66,-71,99,-65,]),'FOR':([59,64,67,68,69,70,71,72,74,75,76,77,81,83,84,85,86,87,88,89,90,92,97,98,101,102,104,105,107,108,110,117,119,122,124,128,130,132,138,146,147,148,149,150,151,152,157,172,177,178,191,193,194,195,197,199,200,206,208,210,211,213,214,215,217,],[-25,100,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,100,-38,-39,-40,-41,-42,-43,-44,-45,-106,-67,-68,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,100,-81,-24,-27,-85,-87,-95,-99,-104,-78,-80,-46,-80,-26,-52,-53,-54,-58,100,-70,100,-106,-69,-64,-66,-71,100,-65,]),'R_B':([59,64,67,68,69,70,71,72,74,75,76,77,80,81,82,83,84,85,86,87,88,89,90,92,97,98,101,102,104,105,107,108,110,117,119,122,124,128,130,132,135,138,146,147,148,149,150,151,152,157,158,172,177,178,191,193,194,195,197,199,200,205,206,208,209,210,211,213,214,215,216,217,],[-25,-106,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,134,-106,-37,-38,-39,-40,-41,-42,-43,-44,-45,-106,-67,-68,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,-106,-36,-81,-24,-27,-85,-87,-95,-99,-104,-78,176,-80,-46,-80,-26,-52,-53,-54,-58,-106,-70,208,-106,-106,214,-69,-64,-66,-71,-106,217,-65,]),'TO':([59,67,68,69,70,71,72,74,75,76,77,101,102,104,105,107,108,110,117,119,122,124,128,130,146,147,148,149,150,151,152,157,172,190,191,],[-25,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,-24,-27,-85,-87,-95,-99,-104,-78,-80,202,-26,]),'DO':([59,67,68,69,70,71,72,74,75,76,77,101,102,104,105,107,108,110,117,119,122,124,128,130,146,147,148,149,150,151,152,157,172,189,191,207,],[-25,-106,-106,-106,-106,-106,-106,-79,-82,-83,-84,-106,-72,-86,-73,-88,-74,-96,-75,-100,-76,-105,-77,-81,-24,-27,-85,-87,-95,-99,-104,-78,-80,201,-26,201,]),'CTE_STRING':([141,186,],[167,167,]),'ELSE':([208,],[212,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'g_var':([4,],[5,]),'var_declaration':([4,42,60,],[6,52,78,]),'empty':([4,5,10,25,26,27,38,39,40,42,43,44,51,55,60,64,67,68,69,70,71,72,81,92,101,129,132,137,156,163,165,196,198,199,206,208,215,],[7,11,11,31,34,37,37,48,31,53,56,59,63,37,53,82,104,107,110,119,124,59,82,59,147,155,82,155,175,183,187,183,187,82,82,213,82,]),'funcs':([5,10,],[9,21,]),'function':([5,10,],[10,10,]),'var1':([8,39,],[13,47,]),'var_type':([8,27,38,39,55,],[14,36,36,14,36,]),'type':([8,12,27,38,39,55,],[15,24,15,15,15,15,]),'main':([9,],[19,]),'func_type':([12,],[22,]),'dec_id':([14,30,],[25,40,]),'var2':([25,40,],[29,50,]),'dec_id1':([26,],[32,]),'params':([27,38,55,],[35,45,65,]),'id':([36,64,81,100,132,199,206,215,],[43,91,91,144,91,91,91,91,]),'var4':([39,],[46,]),'var3':([40,],[49,]),'params1':([43,],[54,]),'id1':([44,72,92,],[57,130,138,]),'dec_id2':([51,],[62,]),'expression':([58,64,73,81,103,129,132,136,137,139,140,141,142,143,145,170,174,182,186,199,202,206,215,],[66,90,131,90,148,156,90,159,156,161,163,166,168,169,171,190,156,196,166,90,207,90,90,]),'texp':([58,64,73,81,103,106,129,132,136,137,139,140,141,142,143,145,170,174,182,186,199,202,206,215,],[67,67,67,67,67,149,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'gexp':([58,64,73,81,103,106,129,132,136,137,139,140,141,142,143,145,170,174,182,186,199,202,206,215,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'mexp':([58,64,73,81,103,106,109,118,129,132,136,137,139,140,141,142,143,145,170,174,182,186,199,202,206,215,],[69,69,69,69,69,69,150,151,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'term':([58,64,73,81,103,106,109,118,123,129,132,136,137,139,140,141,142,143,145,170,174,182,186,199,202,206,215,],[70,70,70,70,70,70,70,70,152,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'fact':([58,64,73,81,103,106,109,118,123,129,132,136,137,139,140,141,142,143,145,170,174,182,186,199,202,206,215,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'cte':([58,64,73,81,103,106,109,118,123,129,132,136,137,139,140,141,142,143,145,170,174,182,186,199,202,206,215,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'statements':([64,81,132,199,206,215,],[80,135,158,205,209,216,]),'statement':([64,81,132,199,206,215,],[81,81,81,81,81,81,]),'assignation':([64,81,132,199,206,215,],[83,83,83,83,83,83,]),'call_func':([64,81,132,199,206,215,],[84,84,84,84,84,84,]),'return_func':([64,81,132,199,206,215,],[85,85,85,85,85,85,]),'read':([64,81,132,199,206,215,],[86,86,86,86,86,86,]),'write':([64,81,132,199,206,215,],[87,87,87,87,87,87,]),'decision_statement':([64,81,132,199,206,215,],[88,88,88,88,88,88,]),'repetition_statement':([64,81,132,199,206,215,],[89,89,89,89,89,89,]),'while_statement':([64,81,132,199,206,215,],[97,97,97,97,97,97,]),'for_statement':([64,81,132,199,206,215,],[98,98,98,98,98,98,]),'op1':([67,],[102,]),'op2':([68,],[105,]),'op3aux':([69,],[108,]),'op3':([69,],[109,]),'op4aux':([70,],[117,]),'op4':([70,],[118,]),'op5aux':([71,],[122,]),'op5':([71,],[123,]),'fact1':([72,92,],[128,128,]),'id2':([101,],[146,]),'args':([129,137,],[153,160,]),'args1':([129,137,174,],[154,154,192,]),'read_args':([140,],[162,]),'write_args':([141,],[164,]),'write_args2':([141,186,],[165,198,]),'args2':([156,],[173,]),'read_args1':([163,196,],[181,203,]),'write_args1':([165,198,],[185,204,]),'do_statement':([189,207,],[200,210,]),'decision_statement1':([208,],[211,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON g_var funcs main','program',6,'p_program','parser-lexer.py',114),
  ('main -> MAIN L_P params R_P var_declaration L_B statements R_B','main',8,'p_main','parser-lexer.py',118),
  ('type -> INT','type',1,'p_type','parser-lexer.py',122),
  ('type -> FLOAT','type',1,'p_type','parser-lexer.py',123),
  ('type -> CHAR','type',1,'p_type','parser-lexer.py',124),
  ('g_var -> var_declaration','g_var',1,'p_g_var','parser-lexer.py',128),
  ('g_var -> empty','g_var',1,'p_g_var','parser-lexer.py',129),
  ('funcs -> function funcs','funcs',2,'p_funcs','parser-lexer.py',133),
  ('funcs -> empty','funcs',1,'p_funcs','parser-lexer.py',134),
  ('var_declaration -> VAR var1','var_declaration',2,'p_var_declaration','parser-lexer.py',138),
  ('var_declaration -> empty','var_declaration',1,'p_var_declaration','parser-lexer.py',139),
  ('var1 -> var_type dec_id var2 SEMICOLON var4','var1',5,'p_var1','parser-lexer.py',143),
  ('var2 -> COMA dec_id var3','var2',3,'p_var2','parser-lexer.py',147),
  ('var2 -> empty','var2',1,'p_var2','parser-lexer.py',148),
  ('var3 -> var2','var3',1,'p_var3','parser-lexer.py',152),
  ('var4 -> var1','var4',1,'p_var4','parser-lexer.py',156),
  ('var4 -> empty','var4',1,'p_var4','parser-lexer.py',157),
  ('dec_id -> ID dec_id1','dec_id',2,'p_dec_id','parser-lexer.py',160),
  ('dec_id1 -> L_SB CTE_I R_SB dec_id2','dec_id1',4,'p_dec_id1','parser-lexer.py',164),
  ('dec_id1 -> empty','dec_id1',1,'p_dec_id1','parser-lexer.py',165),
  ('dec_id2 -> L_SB CTE_I R_SB','dec_id2',3,'p_dec_id2','parser-lexer.py',169),
  ('dec_id2 -> empty','dec_id2',1,'p_dec_id2','parser-lexer.py',170),
  ('id -> ID id1','id',2,'p_id','parser-lexer.py',173),
  ('id1 -> L_SB expression R_SB id2','id1',4,'p_id1','parser-lexer.py',177),
  ('id1 -> empty','id1',1,'p_id1','parser-lexer.py',178),
  ('id2 -> L_SB expression R_SB','id2',3,'p_id2','parser-lexer.py',182),
  ('id2 -> empty','id2',1,'p_id2','parser-lexer.py',183),
  ('var_type -> type','var_type',1,'p_var_type','parser-lexer.py',187),
  ('function -> FUNC func_type ID L_P params R_P var_declaration L_B statements R_B','function',10,'p_function','parser-lexer.py',191),
  ('func_type -> VOID','func_type',1,'p_func_type','parser-lexer.py',195),
  ('func_type -> type','func_type',1,'p_func_type','parser-lexer.py',196),
  ('params -> var_type id params1','params',3,'p_params','parser-lexer.py',200),
  ('params -> empty','params',1,'p_params','parser-lexer.py',201),
  ('params1 -> COMA params','params1',2,'p_params1','parser-lexer.py',205),
  ('params1 -> empty','params1',1,'p_params1','parser-lexer.py',206),
  ('statements -> statement statements','statements',2,'p_statements','parser-lexer.py',210),
  ('statements -> empty','statements',1,'p_statements','parser-lexer.py',211),
  ('statement -> assignation','statement',1,'p_statement','parser-lexer.py',215),
  ('statement -> call_func','statement',1,'p_statement','parser-lexer.py',216),
  ('statement -> return_func','statement',1,'p_statement','parser-lexer.py',217),
  ('statement -> read','statement',1,'p_statement','parser-lexer.py',218),
  ('statement -> write','statement',1,'p_statement','parser-lexer.py',219),
  ('statement -> decision_statement','statement',1,'p_statement','parser-lexer.py',220),
  ('statement -> repetition_statement','statement',1,'p_statement','parser-lexer.py',221),
  ('statement -> expression','statement',1,'p_statement','parser-lexer.py',222),
  ('assignation -> id EQUAL expression SEMICOLON','assignation',4,'p_assignation','parser-lexer.py',226),
  ('args -> args1','args',1,'p_args','parser-lexer.py',230),
  ('args -> empty','args',1,'p_args','parser-lexer.py',231),
  ('args1 -> expression args2','args1',2,'p_args1','parser-lexer.py',235),
  ('args2 -> COMA args1','args2',2,'p_args2','parser-lexer.py',239),
  ('args2 -> empty','args2',1,'p_args2','parser-lexer.py',240),
  ('call_func -> ID L_P args R_P SEMICOLON','call_func',5,'p_call_func','parser-lexer.py',244),
  ('return_func -> RETURN L_P expression R_P SEMICOLON','return_func',5,'p_return_func','parser-lexer.py',248),
  ('read -> READ L_P read_args R_P SEMICOLON','read',5,'p_read','parser-lexer.py',252),
  ('read_args -> expression read_args1','read_args',2,'p_read_args','parser-lexer.py',256),
  ('read_args1 -> COMA expression read_args1','read_args1',3,'p_read_args1','parser-lexer.py',260),
  ('read_args1 -> empty','read_args1',1,'p_read_args1','parser-lexer.py',261),
  ('write -> PRINT L_P write_args R_P SEMICOLON','write',5,'p_write','parser-lexer.py',265),
  ('write_args -> write_args2 write_args1','write_args',2,'p_write_args','parser-lexer.py',269),
  ('write_args1 -> COMA write_args2 write_args1','write_args1',3,'p_write_args1','parser-lexer.py',273),
  ('write_args1 -> empty','write_args1',1,'p_write_args1','parser-lexer.py',274),
  ('write_args2 -> expression','write_args2',1,'p_write_args2','parser-lexer.py',278),
  ('write_args2 -> CTE_STRING','write_args2',1,'p_write_args2','parser-lexer.py',279),
  ('decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1','decision_statement',8,'p_decision_statement','parser-lexer.py',283),
  ('decision_statement1 -> ELSE L_B statements R_B','decision_statement1',4,'p_decision_statement1','parser-lexer.py',287),
  ('decision_statement1 -> empty','decision_statement1',1,'p_decision_statement1','parser-lexer.py',288),
  ('repetition_statement -> while_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',292),
  ('repetition_statement -> for_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',293),
  ('for_statement -> FOR id EQUAL expression TO expression do_statement','for_statement',7,'p_for_statement','parser-lexer.py',297),
  ('while_statement -> WHILE L_P expression R_P do_statement','while_statement',5,'p_while_statement','parser-lexer.py',301),
  ('do_statement -> DO L_B statements R_B','do_statement',4,'p_do_statement','parser-lexer.py',305),
  ('expression -> texp op1','expression',2,'p_expression','parser-lexer.py',309),
  ('texp -> gexp op2','texp',2,'p_texp','parser-lexer.py',313),
  ('gexp -> mexp op3aux','gexp',2,'p_gexp','parser-lexer.py',317),
  ('mexp -> term op4aux','mexp',2,'p_mexp','parser-lexer.py',321),
  ('term -> fact op5aux','term',2,'p_term','parser-lexer.py',325),
  ('fact -> ID fact1','fact',2,'p_fact','parser-lexer.py',329),
  ('fact -> L_P expression R_P','fact',3,'p_fact','parser-lexer.py',330),
  ('fact -> cte','fact',1,'p_fact','parser-lexer.py',331),
  ('fact1 -> L_P args R_P','fact1',3,'p_fact1','parser-lexer.py',335),
  ('fact1 -> id1','fact1',1,'p_fact1','parser-lexer.py',336),
  ('cte -> CTE_I','cte',1,'p_cte','parser-lexer.py',340),
  ('cte -> CTE_F','cte',1,'p_cte','parser-lexer.py',341),
  ('cte -> CTE_CHAR','cte',1,'p_cte','parser-lexer.py',342),
  ('op1 -> OR expression','op1',2,'p_op1','parser-lexer.py',346),
  ('op1 -> empty','op1',1,'p_op1','parser-lexer.py',347),
  ('op2 -> AND texp','op2',2,'p_op2','parser-lexer.py',351),
  ('op2 -> empty','op2',1,'p_op2','parser-lexer.py',352),
  ('op3 -> LESSTHAN','op3',1,'p_op3','parser-lexer.py',356),
  ('op3 -> LESSTHANEQ','op3',1,'p_op3','parser-lexer.py',357),
  ('op3 -> GREATERTHAN','op3',1,'p_op3','parser-lexer.py',358),
  ('op3 -> GREATERTHANEQ','op3',1,'p_op3','parser-lexer.py',359),
  ('op3 -> EQ','op3',1,'p_op3','parser-lexer.py',360),
  ('op3 -> DIFERENT','op3',1,'p_op3','parser-lexer.py',361),
  ('op3aux -> op3 mexp','op3aux',2,'p_op3aux','parser-lexer.py',365),
  ('op3aux -> empty','op3aux',1,'p_op3aux','parser-lexer.py',366),
  ('op4 -> PLUS','op4',1,'p_op4','parser-lexer.py',370),
  ('op4 -> MINUS','op4',1,'p_op4','parser-lexer.py',371),
  ('op4aux -> op4 mexp','op4aux',2,'p_op4aux','parser-lexer.py',375),
  ('op4aux -> empty','op4aux',1,'p_op4aux','parser-lexer.py',376),
  ('op5 -> MULT','op5',1,'p_op5','parser-lexer.py',380),
  ('op5 -> DIV','op5',1,'p_op5','parser-lexer.py',381),
  ('op5 -> MOD','op5',1,'p_op5','parser-lexer.py',382),
  ('op5aux -> op5 term','op5aux',2,'p_op5aux','parser-lexer.py',386),
  ('op5aux -> empty','op5aux',1,'p_op5aux','parser-lexer.py',387),
  ('empty -> <empty>','empty',0,'p_empty','parser-lexer.py',392),
]
