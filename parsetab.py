
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COMA CTE_CHAR CTE_F CTE_I CTE_STRING DIFERENT DIV DO ELSE EQ EQUAL FLOAT FOR FUNC GREATERTHAN GREATERTHANEQ ID IF INT LESSTHAN LESSTHANEQ L_B L_P L_SB MAIN MINUS MOD MULT OR PLUS PRINT PROGRAM READ RETURN R_B R_P R_SB SEMICOLON TO VAR VOID WHILEprogram : PROGRAM ID SEMICOLON g_var funcs mainmain : MAIN L_P params R_P var_declaration L_B statements R_Btype : INT\n            | FLOAT\n            | CHARg_var : var_declarationfuncs : function funcs\n            | emptyvar_declaration : VAR var1\n                        | emptyvar1 : var_type dec_id var2 SEMICOLON var4var2 : COMA dec_id var3\n            | emptyvar3 : var2var4 : var1\n            | emptydec_id : ID dec_id1dec_id1 : L_SB CTE_I R_SB dec_id2\n            | emptydec_id2 : L_SB CTE_I R_SB\n        | emptyid : ID id1id1 : L_SB expression R_SB id2\n            | emptyid2 : L_SB expression R_SB\n        | emptyvar_type : typefunction : FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_Bregister_func : add_params : start_func : func_type : VOID\n                | typeparams : var_type param_type dec_id params1\n            | emptyparam_type : params1 : COMA params\n                | emptystatements : statement statements\n                | emptystatement : assignation\n                | call_func\n                | return_func\n                | read\n                | write\n                | decision_statement\n                | repetition_statement\n                | expressionassignation : id id_quad EQUAL expression SEMICOLONargs : args1\n            | emptyargs1 : expression param_check args2param_check : args2 : COMA next_arg args1\n            | emptynext_arg : call_func :  ID call_func_era L_P args R_P SEMICOLONcall_func_exp :  ID call_func_era L_P args R_Pcall_func_era : return_func : RETURN L_P expression R_P SEMICOLONread : READ L_P read_args R_P SEMICOLONread_args : expression read_args1read_args1 : COMA expression read_args1\n                | emptywrite : PRINT L_P write_args R_P SEMICOLONwrite_args : write_args2 write_args1write_args1 : COMA write_args2 write_args1\n                    | emptywrite_args2 : expression\n                | CTE_STRINGdecision_statement : IF L_P expression R_P exp_type L_B statements R_B decision_statement1decision_statement1 : ELSE else_jump L_B statements R_B\n                            | emptyexp_type : else_jump : repetition_statement : while_statement\n                            | for_statementfor_statement : FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statementfor_id : breadcrumb : while_statement : WHILE L_P breadcrumb expression R_P exp_type do_statementdo_statement :  DO L_B statements R_Bexpression : texp generate_quad op1texp : gexp generate_quad op2gexp : mexp generate_quad op3auxmexp : term generate_quad op4auxterm : fact generate_quad op5auxgenerate_quad : fact : id id_quad\n            | call_func_exp\n            | L_P add_fake expression R_P remove_fake\n            | cteadd_fake : remove_fake : \n        id_quad :\n    cte : CTE_F add_cte_float\n            | CTE_I add_cte_int\n            | CTE_CHAR add_cte_charadd_cte_int : add_cte_float : add_cte_char : op1 : OR expression\n            | emptyop2 : AND texp\n            | emptyop3 : LESSTHAN\n            | LESSTHANEQ\xa0\n            | GREATERTHAN\n            | GREATERTHANEQ\n            | EQ\n            | DIFERENTop3aux : op3 mexp\n            | emptyop4 : PLUS\n            | MINUSop4aux : op4 mexp\n            | emptyop5 : MULT\n        | DIV\n        | MODop5aux : op5 term\n            | empty\n        empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'g_var':([4,],[5,]),'var_declaration':([4,42,96,],[6,51,121,]),'empty':([4,5,10,25,26,27,39,40,42,44,50,52,57,59,65,76,96,110,113,114,115,116,117,124,126,130,132,173,191,193,196,202,204,217,229,230,240,],[8,11,11,31,34,37,47,31,8,37,56,60,66,37,66,105,8,138,105,143,146,155,160,105,171,178,182,199,66,171,213,178,182,66,234,66,66,]),'funcs':([5,10,],[9,21,]),'function':([5,10,],[10,10,]),'var1':([7,39,],[13,46,]),'var_type':([7,27,39,44,59,],[14,36,14,36,36,]),'type':([7,12,27,39,44,59,],[15,24,15,15,15,15,]),'main':([9,],[19,]),'func_type':([12,],[22,]),'dec_id':([14,30,43,],[25,40,52,]),'var2':([25,40,],[29,49,]),'dec_id1':([26,],[32,]),'params':([27,44,59,],[35,53,95,]),'register_func':([28,],[38,]),'param_type':([36,],[43,]),'var4':([39,],[45,]),'var3':([40,],[48,]),'dec_id2':([50,],[55,]),'params1':([52,],[58,]),'statements':([57,65,191,217,230,240,],[64,100,208,224,235,242,]),'statement':([57,65,191,217,230,240,],[65,65,65,65,65,65,]),'assignation':([57,65,191,217,230,240,],[67,67,67,67,67,67,]),'call_func':([57,65,191,217,230,240,],[68,68,68,68,68,68,]),'return_func':([57,65,191,217,230,240,],[69,69,69,69,69,69,]),'read':([57,65,191,217,230,240,],[70,70,70,70,70,70,]),'write':([57,65,191,217,230,240,],[71,71,71,71,71,71,]),'decision_statement':([57,65,191,217,230,240,],[72,72,72,72,72,72,]),'repetition_statement':([57,65,191,217,230,240,],[73,73,73,73,73,73,]),'expression':([57,65,98,104,106,107,108,109,125,126,137,139,177,181,186,191,193,197,217,222,230,231,240,],[74,74,122,127,128,130,133,135,168,172,184,185,202,133,207,74,172,214,74,172,74,236,74,]),'id':([57,65,85,98,104,106,107,108,109,125,126,137,139,142,145,154,159,177,181,186,191,193,197,217,222,230,231,240,],[75,75,112,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,75,123,123,75,123,75,123,75,]),'while_statement':([57,65,191,217,230,240,],[81,81,81,81,81,81,]),'for_statement':([57,65,191,217,230,240,],[82,82,82,82,82,82,]),'texp':([57,65,98,104,106,107,108,109,125,126,137,139,142,177,181,186,191,193,197,217,222,230,231,240,],[83,83,83,83,83,83,83,83,83,83,83,83,187,83,83,83,83,83,83,83,83,83,83,83,]),'gexp':([57,65,98,104,106,107,108,109,125,126,137,139,142,177,181,186,191,193,197,217,222,230,231,240,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'mexp':([57,65,98,104,106,107,108,109,125,126,137,139,142,145,154,177,181,186,191,193,197,217,222,230,231,240,],[87,87,87,87,87,87,87,87,87,87,87,87,87,188,189,87,87,87,87,87,87,87,87,87,87,87,]),'term':([57,65,98,104,106,107,108,109,125,126,137,139,142,145,154,159,177,181,186,191,193,197,217,222,230,231,240,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,190,88,88,88,88,88,88,88,88,88,88,88,]),'fact':([57,65,98,104,106,107,108,109,125,126,137,139,142,145,154,159,177,181,186,191,193,197,217,222,230,231,240,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'call_func_exp':([57,65,98,104,106,107,108,109,125,126,137,139,142,145,154,159,177,181,186,191,193,197,217,222,230,231,240,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'cte':([57,65,98,104,106,107,108,109,125,126,137,139,142,145,154,159,177,181,186,191,193,197,217,222,230,231,240,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'add_params':([61,],[96,]),'add_fake':([63,],[98,]),'id_quad':([75,112,123,],[101,140,166,]),'call_func_era':([76,124,],[102,167,]),'id1':([76,113,124,],[103,103,103,]),'generate_quad':([83,86,87,88,89,],[110,114,115,116,117,]),'add_cte_float':([92,],[118,]),'add_cte_int':([93,],[119,]),'add_cte_char':([94,],[120,]),'read_args':([107,],[129,]),'write_args':([108,],[131,]),'write_args2':([108,181,],[132,204,]),'op1':([110,],[136,]),'breadcrumb':([111,227,],[139,231,]),'op2':([114,],[141,]),'op3aux':([115,],[144,]),'op3':([115,],[145,]),'op4aux':([116,],[153,]),'op4':([116,],[154,]),'op5aux':([117,],[158,]),'op5':([117,],[159,]),'start_func':([121,],[164,]),'args':([126,193,],[169,209,]),'args1':([126,193,222,],[170,170,228,]),'read_args1':([130,202,],[176,215,]),'write_args1':([132,204,],[180,216,]),'remove_fake':([165,],[192,]),'param_check':([172,],[196,]),'id2':([173,],[198,]),'exp_type':([183,206,236,],[205,218,239,]),'args2':([196,],[211,]),'for_id':([207,],[219,]),'next_arg':([212,],[222,]),'do_statement':([218,239,],[225,241,]),'decision_statement1':([229,],[232,]),'else_jump':([233,],[237,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON g_var funcs main','program',6,'p_program','parser-lexer.py',214),
  ('main -> MAIN L_P params R_P var_declaration L_B statements R_B','main',8,'p_main','parser-lexer.py',221),
  ('type -> INT','type',1,'p_type','parser-lexer.py',238),
  ('type -> FLOAT','type',1,'p_type','parser-lexer.py',239),
  ('type -> CHAR','type',1,'p_type','parser-lexer.py',240),
  ('g_var -> var_declaration','g_var',1,'p_g_var','parser-lexer.py',246),
  ('funcs -> function funcs','funcs',2,'p_funcs','parser-lexer.py',253),
  ('funcs -> empty','funcs',1,'p_funcs','parser-lexer.py',254),
  ('var_declaration -> VAR var1','var_declaration',2,'p_var_declaration','parser-lexer.py',258),
  ('var_declaration -> empty','var_declaration',1,'p_var_declaration','parser-lexer.py',259),
  ('var1 -> var_type dec_id var2 SEMICOLON var4','var1',5,'p_var1','parser-lexer.py',263),
  ('var2 -> COMA dec_id var3','var2',3,'p_var2','parser-lexer.py',267),
  ('var2 -> empty','var2',1,'p_var2','parser-lexer.py',268),
  ('var3 -> var2','var3',1,'p_var3','parser-lexer.py',272),
  ('var4 -> var1','var4',1,'p_var4','parser-lexer.py',276),
  ('var4 -> empty','var4',1,'p_var4','parser-lexer.py',277),
  ('dec_id -> ID dec_id1','dec_id',2,'p_dec_id','parser-lexer.py',281),
  ('dec_id1 -> L_SB CTE_I R_SB dec_id2','dec_id1',4,'p_dec_id1','parser-lexer.py',301),
  ('dec_id1 -> empty','dec_id1',1,'p_dec_id1','parser-lexer.py',302),
  ('dec_id2 -> L_SB CTE_I R_SB','dec_id2',3,'p_dec_id2','parser-lexer.py',306),
  ('dec_id2 -> empty','dec_id2',1,'p_dec_id2','parser-lexer.py',307),
  ('id -> ID id1','id',2,'p_id','parser-lexer.py',311),
  ('id1 -> L_SB expression R_SB id2','id1',4,'p_id1','parser-lexer.py',317),
  ('id1 -> empty','id1',1,'p_id1','parser-lexer.py',318),
  ('id2 -> L_SB expression R_SB','id2',3,'p_id2','parser-lexer.py',322),
  ('id2 -> empty','id2',1,'p_id2','parser-lexer.py',323),
  ('var_type -> type','var_type',1,'p_var_type','parser-lexer.py',327),
  ('function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B','function',13,'p_function','parser-lexer.py',331),
  ('register_func -> <empty>','register_func',0,'p_register_func','parser-lexer.py',345),
  ('add_params -> <empty>','add_params',0,'p_add_params','parser-lexer.py',355),
  ('start_func -> <empty>','start_func',0,'p_start_func','parser-lexer.py',361),
  ('func_type -> VOID','func_type',1,'p_func_type','parser-lexer.py',367),
  ('func_type -> type','func_type',1,'p_func_type','parser-lexer.py',368),
  ('params -> var_type param_type dec_id params1','params',4,'p_params','parser-lexer.py',375),
  ('params -> empty','params',1,'p_params','parser-lexer.py',376),
  ('param_type -> <empty>','param_type',0,'p_param_type','parser-lexer.py',380),
  ('params1 -> COMA params','params1',2,'p_params1','parser-lexer.py',387),
  ('params1 -> empty','params1',1,'p_params1','parser-lexer.py',388),
  ('statements -> statement statements','statements',2,'p_statements','parser-lexer.py',392),
  ('statements -> empty','statements',1,'p_statements','parser-lexer.py',393),
  ('statement -> assignation','statement',1,'p_statement','parser-lexer.py',397),
  ('statement -> call_func','statement',1,'p_statement','parser-lexer.py',398),
  ('statement -> return_func','statement',1,'p_statement','parser-lexer.py',399),
  ('statement -> read','statement',1,'p_statement','parser-lexer.py',400),
  ('statement -> write','statement',1,'p_statement','parser-lexer.py',401),
  ('statement -> decision_statement','statement',1,'p_statement','parser-lexer.py',402),
  ('statement -> repetition_statement','statement',1,'p_statement','parser-lexer.py',403),
  ('statement -> expression','statement',1,'p_statement','parser-lexer.py',404),
  ('assignation -> id id_quad EQUAL expression SEMICOLON','assignation',5,'p_assignation','parser-lexer.py',408),
  ('args -> args1','args',1,'p_args','parser-lexer.py',423),
  ('args -> empty','args',1,'p_args','parser-lexer.py',424),
  ('args1 -> expression param_check args2','args1',3,'p_args1','parser-lexer.py',428),
  ('param_check -> <empty>','param_check',0,'p_param_check','parser-lexer.py',432),
  ('args2 -> COMA next_arg args1','args2',3,'p_args2','parser-lexer.py',444),
  ('args2 -> empty','args2',1,'p_args2','parser-lexer.py',445),
  ('next_arg -> <empty>','next_arg',0,'p_next_arg','parser-lexer.py',449),
  ('call_func -> ID call_func_era L_P args R_P SEMICOLON','call_func',6,'p_call_func','parser-lexer.py',455),
  ('call_func_exp -> ID call_func_era L_P args R_P','call_func_exp',5,'p_call_func_exp','parser-lexer.py',464),
  ('call_func_era -> <empty>','call_func_era',0,'p_call_func_era','parser-lexer.py',472),
  ('return_func -> RETURN L_P expression R_P SEMICOLON','return_func',5,'p_return_func','parser-lexer.py',483),
  ('read -> READ L_P read_args R_P SEMICOLON','read',5,'p_read','parser-lexer.py',492),
  ('read_args -> expression read_args1','read_args',2,'p_read_args','parser-lexer.py',500),
  ('read_args1 -> COMA expression read_args1','read_args1',3,'p_read_args1','parser-lexer.py',504),
  ('read_args1 -> empty','read_args1',1,'p_read_args1','parser-lexer.py',505),
  ('write -> PRINT L_P write_args R_P SEMICOLON','write',5,'p_write','parser-lexer.py',509),
  ('write_args -> write_args2 write_args1','write_args',2,'p_write_args','parser-lexer.py',517),
  ('write_args1 -> COMA write_args2 write_args1','write_args1',3,'p_write_args1','parser-lexer.py',521),
  ('write_args1 -> empty','write_args1',1,'p_write_args1','parser-lexer.py',522),
  ('write_args2 -> expression','write_args2',1,'p_write_args2','parser-lexer.py',526),
  ('write_args2 -> CTE_STRING','write_args2',1,'p_write_args2','parser-lexer.py',527),
  ('decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1','decision_statement',9,'p_decision_statement','parser-lexer.py',531),
  ('decision_statement1 -> ELSE else_jump L_B statements R_B','decision_statement1',5,'p_decision_statement1','parser-lexer.py',538),
  ('decision_statement1 -> empty','decision_statement1',1,'p_decision_statement1','parser-lexer.py',539),
  ('exp_type -> <empty>','exp_type',0,'p_exp_type','parser-lexer.py',543),
  ('else_jump -> <empty>','else_jump',0,'p_else_jump','parser-lexer.py',555),
  ('repetition_statement -> while_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',564),
  ('repetition_statement -> for_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',565),
  ('for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement','for_statement',11,'p_for_statement','parser-lexer.py',569),
  ('for_id -> <empty>','for_id',0,'p_for_id','parser-lexer.py',595),
  ('breadcrumb -> <empty>','breadcrumb',0,'p_breadcrumb','parser-lexer.py',611),
  ('while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement','while_statement',7,'p_while_statement','parser-lexer.py',617),
  ('do_statement -> DO L_B statements R_B','do_statement',4,'p_do_statement','parser-lexer.py',626),
  ('expression -> texp generate_quad op1','expression',3,'p_expression','parser-lexer.py',630),
  ('texp -> gexp generate_quad op2','texp',3,'p_texp','parser-lexer.py',634),
  ('gexp -> mexp generate_quad op3aux','gexp',3,'p_gexp','parser-lexer.py',638),
  ('mexp -> term generate_quad op4aux','mexp',3,'p_mexp','parser-lexer.py',642),
  ('term -> fact generate_quad op5aux','term',3,'p_term','parser-lexer.py',646),
  ('generate_quad -> <empty>','generate_quad',0,'p_generate_quad','parser-lexer.py',650),
  ('fact -> id id_quad','fact',2,'p_fact','parser-lexer.py',657),
  ('fact -> call_func_exp','fact',1,'p_fact','parser-lexer.py',658),
  ('fact -> L_P add_fake expression R_P remove_fake','fact',5,'p_fact','parser-lexer.py',659),
  ('fact -> cte','fact',1,'p_fact','parser-lexer.py',660),
  ('add_fake -> <empty>','add_fake',0,'p_add_fake','parser-lexer.py',664),
  ('remove_fake -> <empty>','remove_fake',0,'p_remove_fake','parser-lexer.py',670),
  ('id_quad -> <empty>','id_quad',0,'p_id_quad','parser-lexer.py',677),
  ('cte -> CTE_F add_cte_float','cte',2,'p_cte','parser-lexer.py',694),
  ('cte -> CTE_I add_cte_int','cte',2,'p_cte','parser-lexer.py',695),
  ('cte -> CTE_CHAR add_cte_char','cte',2,'p_cte','parser-lexer.py',696),
  ('add_cte_int -> <empty>','add_cte_int',0,'p_add_cte_int','parser-lexer.py',700),
  ('add_cte_float -> <empty>','add_cte_float',0,'p_add_cte_float','parser-lexer.py',715),
  ('add_cte_char -> <empty>','add_cte_char',0,'p_add_cte_char','parser-lexer.py',730),
  ('op1 -> OR expression','op1',2,'p_op1','parser-lexer.py',745),
  ('op1 -> empty','op1',1,'p_op1','parser-lexer.py',746),
  ('op2 -> AND texp','op2',2,'p_op2','parser-lexer.py',753),
  ('op2 -> empty','op2',1,'p_op2','parser-lexer.py',754),
  ('op3 -> LESSTHAN','op3',1,'p_op3','parser-lexer.py',761),
  ('op3 -> LESSTHANEQ','op3',1,'p_op3','parser-lexer.py',762),
  ('op3 -> GREATERTHAN','op3',1,'p_op3','parser-lexer.py',763),
  ('op3 -> GREATERTHANEQ','op3',1,'p_op3','parser-lexer.py',764),
  ('op3 -> EQ','op3',1,'p_op3','parser-lexer.py',765),
  ('op3 -> DIFERENT','op3',1,'p_op3','parser-lexer.py',766),
  ('op3aux -> op3 mexp','op3aux',2,'p_op3aux','parser-lexer.py',772),
  ('op3aux -> empty','op3aux',1,'p_op3aux','parser-lexer.py',773),
  ('op4 -> PLUS','op4',1,'p_op4','parser-lexer.py',777),
  ('op4 -> MINUS','op4',1,'p_op4','parser-lexer.py',778),
  ('op4aux -> op4 mexp','op4aux',2,'p_op4aux','parser-lexer.py',784),
  ('op4aux -> empty','op4aux',1,'p_op4aux','parser-lexer.py',785),
  ('op5 -> MULT','op5',1,'p_op5','parser-lexer.py',789),
  ('op5 -> DIV','op5',1,'p_op5','parser-lexer.py',790),
  ('op5 -> MOD','op5',1,'p_op5','parser-lexer.py',791),
  ('op5aux -> op5 term','op5aux',2,'p_op5aux','parser-lexer.py',797),
  ('op5aux -> empty','op5aux',1,'p_op5aux','parser-lexer.py',798),
  ('empty -> <empty>','empty',0,'p_empty','parser-lexer.py',803),
]
