
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COMA CTE_CHAR CTE_F CTE_I CTE_STRING DIFERENT DIV DO ELSE EQ EQUAL FLOAT FOR FUNC GREATERTHAN GREATERTHANEQ ID IF INT LESSTHAN LESSTHANEQ L_B L_P L_SB MAIN MINUS MOD MULT OR PLUS PRINT PROGRAM READ RETURN R_B R_P R_SB SEMICOLON TO VAR VOID WHILEprogram : PROGRAM ID SEMICOLON g_var funcs mainmain : MAIN L_P params R_P var_declaration L_B statements R_Btype : INT\n            | FLOAT\n            | CHARg_var : var_declarationfuncs : function funcs\n            | emptyvar_declaration : VAR var1\n                        | emptyvar1 : var_type dec_id var2 SEMICOLON var4var2 : COMA dec_id var3\n            | emptyvar3 : var2var4 : var1\n            | emptydec_id : ID dec_id1dec_id1 : L_SB CTE_I R_SB dec_id2\n            | emptydec_id2 : L_SB CTE_I R_SB\n        | emptyid : ID id1id1 : L_SB expression R_SB id2\n            | emptyid2 : L_SB expression R_SB\n        | emptyvar_type : typefunction : FUNC func_type ID register_func L_P params R_P var_declaration L_B statements R_Bregister_func : func_type : VOID\n                | typeparams : var_type param_type dec_id params1\n            | emptyparam_type : params1 : COMA params\n                | emptystatements : statement statements\n                | emptystatement : assignation\n                | call_func\n                | return_func\n                | read\n                | write\n                | decision_statement\n                | repetition_statement\n                | expressionassignation : id EQUAL expression SEMICOLONargs : args1\n            | emptyargs1 : expression args2args2 : COMA args1\n            | emptycall_func :  ID L_P args R_P SEMICOLONcall_func_exp :  ID L_P args R_Preturn_func : RETURN L_P expression R_P SEMICOLONread : READ L_P read_args R_P SEMICOLONread_args : expression read_args1read_args1 : COMA expression read_args1\n                | emptywrite : PRINT L_P write_args R_P SEMICOLONwrite_args : write_args2 write_args1write_args1 : COMA write_args2 write_args1\n                    | emptywrite_args2 : expression\n                | CTE_STRINGdecision_statement : IF L_P expression R_P L_B statements R_B decision_statement1decision_statement1 : ELSE L_B statements R_B\n                            | emptyrepetition_statement : while_statement\n                            | for_statementfor_statement : FOR id EQUAL expression TO expression do_statementwhile_statement : WHILE L_P expression R_P do_statementdo_statement :  DO L_B statements R_Bexpression : texp op1texp : gexp op2gexp : mexp op3auxmexp : term op4auxterm : fact op5auxfact : id\n            | call_func_exp\n            | L_P expression R_P\n            | ctecte : CTE_I\n            | CTE_F\n            | CTE_CHARop1 : OR expression\n            | emptyop2 : AND texp\n            | emptyop3 : LESSTHAN\n            | LESSTHANEQ\xa0\n            | GREATERTHAN\n            | GREATERTHANEQ\n            | EQ\n            | DIFERENTop3aux : op3 mexp\n            | emptyop4 : PLUS\n            | MINUSop4aux : op4 mexp\n            | emptyop5 : MULT\n        | DIV\n        | MODop5aux : op5 term\n            | empty\n        empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,101,],[0,-1,-2,]),'ID':([2,14,15,16,17,18,22,23,24,30,36,43,57,63,65,67,68,69,70,71,72,73,74,75,76,81,82,83,85,86,87,88,89,90,91,92,93,94,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,158,160,161,162,163,164,167,168,170,172,176,180,186,187,189,190,191,192,193,195,197,198,200,205,207,208,210,211,213,214,215,217,],[3,26,-27,-3,-4,-5,28,-30,-31,26,-34,26,76,100,76,-39,-40,-41,-42,-43,-44,-45,-46,-79,-107,-69,-70,-107,117,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,100,100,-22,100,-24,100,100,100,100,-74,100,-87,100,-75,100,-89,-76,100,-97,-90,-91,-92,-93,-94,-95,-77,100,-101,-98,-99,-78,100,-106,-102,-103,-104,76,-81,100,-86,100,-88,-96,-100,-105,-47,-54,100,-107,100,100,-54,-53,100,-23,-26,-55,-56,-60,76,-72,100,76,-25,-107,-71,-66,-68,-73,76,-67,]),'SEMICOLON':([3,25,26,29,31,32,34,40,48,49,50,55,56,83,86,87,88,89,90,91,92,93,94,97,99,100,105,107,112,114,118,120,121,123,130,132,135,137,142,144,158,161,162,163,164,168,172,173,174,178,186,190,191,207,],[4,-107,-107,39,-13,-17,-19,-107,-12,-14,-107,-18,-21,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-20,-79,-107,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,-81,167,-86,-88,-96,-100,-105,187,-107,192,193,195,-54,-23,-26,-25,]),'VAR':([4,42,61,],[7,7,7,]),'FUNC':([4,5,6,8,10,13,39,45,46,47,185,],[-107,12,-6,-10,12,-9,-107,-11,-15,-16,-28,]),'MAIN':([4,5,6,8,9,10,11,13,21,39,45,46,47,185,],[-107,-107,-6,-10,20,-107,-8,-9,-7,-107,-11,-15,-16,-28,]),'INT':([7,12,27,39,44,59,],[16,16,16,16,16,16,]),'FLOAT':([7,12,27,39,44,59,],[17,17,17,17,17,17,]),'CHAR':([7,12,27,39,44,59,],[18,18,18,18,18,18,]),'L_B':([8,13,39,42,45,46,47,51,61,96,182,199,212,],[-10,-9,-107,-107,-11,-15,-16,57,-107,141,197,205,215,]),'VOID':([12,],[23,]),'L_P':([20,28,38,57,63,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,158,160,161,162,163,164,167,168,170,172,176,180,186,187,189,190,191,192,193,195,197,198,200,205,207,208,210,211,213,214,215,217,],[27,-29,44,63,63,63,-39,-40,-41,-42,-43,-44,-45,-46,-79,104,108,109,110,111,-69,-70,-107,115,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,143,63,63,-22,63,-24,63,63,63,63,-74,63,-87,63,-75,63,-89,-76,63,-97,-90,-91,-92,-93,-94,-95,-77,63,-101,-98,-99,-78,63,-106,-102,-103,-104,63,-81,63,-86,63,-88,-96,-100,-105,-47,-54,63,-107,63,63,-54,-53,63,-23,-26,-55,-56,-60,63,-72,63,63,-25,-107,-71,-66,-68,-73,63,-67,]),'COMA':([25,26,32,34,40,50,52,55,56,83,86,87,88,89,90,91,92,93,94,97,99,100,105,107,112,114,118,120,121,123,130,132,135,137,142,148,152,154,155,156,158,161,162,163,164,172,186,190,191,194,196,207,],[30,-107,-17,-19,30,-107,59,-18,-21,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-20,-79,-107,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,-81,170,176,180,-64,-65,-86,-88,-96,-100,-105,-107,-54,-23,-26,176,180,-25,]),'L_SB':([26,50,76,100,117,172,],[33,54,106,106,106,189,]),'R_P':([26,27,32,34,35,37,44,50,52,53,55,56,58,59,60,83,86,87,88,89,90,91,92,93,94,95,97,98,99,100,104,105,107,112,114,118,120,121,123,130,132,135,137,142,143,145,146,147,148,150,151,152,153,154,155,156,157,158,159,161,162,163,164,166,169,171,172,175,177,179,181,186,188,190,191,194,196,202,203,207,],[-107,-107,-17,-19,42,-33,-107,-107,-107,61,-18,-21,-32,-107,-36,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-35,-20,142,-79,-107,-107,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,-81,-107,168,-48,-49,-107,173,174,-107,178,-107,-64,-65,182,-86,183,-88,-96,-100,-105,186,-50,-52,-107,-57,-59,-61,-63,-54,-51,-23,-26,-107,-107,-58,-62,-25,]),'CTE_I':([33,54,57,63,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,158,160,161,162,163,164,167,168,170,172,176,180,186,187,189,190,191,192,193,195,197,198,200,205,207,208,210,211,213,214,215,217,],[41,62,92,92,92,-39,-40,-41,-42,-43,-44,-45,-46,-79,-107,-69,-70,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,92,92,-22,92,-24,92,92,92,92,-74,92,-87,92,-75,92,-89,-76,92,-97,-90,-91,-92,-93,-94,-95,-77,92,-101,-98,-99,-78,92,-106,-102,-103,-104,92,-81,92,-86,92,-88,-96,-100,-105,-47,-54,92,-107,92,92,-54,-53,92,-23,-26,-55,-56,-60,92,-72,92,92,-25,-107,-71,-66,-68,-73,92,-67,]),'R_SB':([41,62,83,86,87,88,89,90,91,92,93,94,99,100,105,107,112,114,118,120,121,123,130,132,135,137,142,149,158,161,162,163,164,172,186,190,191,201,207,],[50,97,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,-81,172,-86,-88,-96,-100,-105,-107,-54,-23,-26,207,-25,]),'R_B':([57,64,65,66,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,102,105,107,112,114,118,120,121,123,130,132,135,137,141,142,158,161,162,163,164,165,167,168,172,186,187,190,191,192,193,195,197,198,204,205,207,208,209,210,211,213,214,215,216,217,],[-107,101,-107,-38,-39,-40,-41,-42,-43,-44,-45,-46,-79,-107,-69,-70,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,-37,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,-107,-81,-86,-88,-96,-100,-105,185,-47,-54,-107,-54,-53,-23,-26,-55,-56,-60,-107,-72,208,-107,-25,-107,214,-71,-66,-68,-73,-107,217,-67,]),'RETURN':([57,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,105,107,112,114,118,120,121,123,130,132,135,137,141,142,158,161,162,163,164,167,168,172,186,187,190,191,192,193,195,197,198,205,207,208,210,211,213,214,215,217,],[77,77,-39,-40,-41,-42,-43,-44,-45,-46,-79,-107,-69,-70,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,77,-81,-86,-88,-96,-100,-105,-47,-54,-107,-54,-53,-23,-26,-55,-56,-60,77,-72,77,-25,-107,-71,-66,-68,-73,77,-67,]),'READ':([57,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,105,107,112,114,118,120,121,123,130,132,135,137,141,142,158,161,162,163,164,167,168,172,186,187,190,191,192,193,195,197,198,205,207,208,210,211,213,214,215,217,],[78,78,-39,-40,-41,-42,-43,-44,-45,-46,-79,-107,-69,-70,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,78,-81,-86,-88,-96,-100,-105,-47,-54,-107,-54,-53,-23,-26,-55,-56,-60,78,-72,78,-25,-107,-71,-66,-68,-73,78,-67,]),'PRINT':([57,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,105,107,112,114,118,120,121,123,130,132,135,137,141,142,158,161,162,163,164,167,168,172,186,187,190,191,192,193,195,197,198,205,207,208,210,211,213,214,215,217,],[79,79,-39,-40,-41,-42,-43,-44,-45,-46,-79,-107,-69,-70,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,79,-81,-86,-88,-96,-100,-105,-47,-54,-107,-54,-53,-23,-26,-55,-56,-60,79,-72,79,-25,-107,-71,-66,-68,-73,79,-67,]),'IF':([57,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,105,107,112,114,118,120,121,123,130,132,135,137,141,142,158,161,162,163,164,167,168,172,186,187,190,191,192,193,195,197,198,205,207,208,210,211,213,214,215,217,],[80,80,-39,-40,-41,-42,-43,-44,-45,-46,-79,-107,-69,-70,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,80,-81,-86,-88,-96,-100,-105,-47,-54,-107,-54,-53,-23,-26,-55,-56,-60,80,-72,80,-25,-107,-71,-66,-68,-73,80,-67,]),'WHILE':([57,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,105,107,112,114,118,120,121,123,130,132,135,137,141,142,158,161,162,163,164,167,168,172,186,187,190,191,192,193,195,197,198,205,207,208,210,211,213,214,215,217,],[84,84,-39,-40,-41,-42,-43,-44,-45,-46,-79,-107,-69,-70,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,84,-81,-86,-88,-96,-100,-105,-47,-54,-107,-54,-53,-23,-26,-55,-56,-60,84,-72,84,-25,-107,-71,-66,-68,-73,84,-67,]),'FOR':([57,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,105,107,112,114,118,120,121,123,130,132,135,137,141,142,158,161,162,163,164,167,168,172,186,187,190,191,192,193,195,197,198,205,207,208,210,211,213,214,215,217,],[85,85,-39,-40,-41,-42,-43,-44,-45,-46,-79,-107,-69,-70,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,85,-81,-86,-88,-96,-100,-105,-47,-54,-107,-54,-53,-23,-26,-55,-56,-60,85,-72,85,-25,-107,-71,-66,-68,-73,85,-67,]),'CTE_F':([57,63,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,158,160,161,162,163,164,167,168,170,172,176,180,186,187,189,190,191,192,193,195,197,198,200,205,207,208,210,211,213,214,215,217,],[93,93,93,-39,-40,-41,-42,-43,-44,-45,-46,-79,-107,-69,-70,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,93,93,-22,93,-24,93,93,93,93,-74,93,-87,93,-75,93,-89,-76,93,-97,-90,-91,-92,-93,-94,-95,-77,93,-101,-98,-99,-78,93,-106,-102,-103,-104,93,-81,93,-86,93,-88,-96,-100,-105,-47,-54,93,-107,93,93,-54,-53,93,-23,-26,-55,-56,-60,93,-72,93,93,-25,-107,-71,-66,-68,-73,93,-67,]),'CTE_CHAR':([57,63,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,158,160,161,162,163,164,167,168,170,172,176,180,186,187,189,190,191,192,193,195,197,198,200,205,207,208,210,211,213,214,215,217,],[94,94,94,-39,-40,-41,-42,-43,-44,-45,-46,-79,-107,-69,-70,-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,94,94,-22,94,-24,94,94,94,94,-74,94,-87,94,-75,94,-89,-76,94,-97,-90,-91,-92,-93,-94,-95,-77,94,-101,-98,-99,-78,94,-106,-102,-103,-104,94,-81,94,-86,94,-88,-96,-100,-105,-47,-54,94,-107,94,94,-54,-53,94,-23,-26,-55,-56,-60,94,-72,94,94,-25,-107,-71,-66,-68,-73,94,-67,]),'EQUAL':([75,76,105,107,116,117,172,190,191,207,],[103,-107,-22,-24,160,-107,-107,-23,-26,-25,]),'MULT':([75,76,89,90,91,92,93,94,99,100,105,107,142,168,172,186,190,191,207,],[-79,-107,138,-80,-82,-83,-84,-85,-79,-107,-22,-24,-81,-54,-107,-54,-23,-26,-25,]),'DIV':([75,76,89,90,91,92,93,94,99,100,105,107,142,168,172,186,190,191,207,],[-79,-107,139,-80,-82,-83,-84,-85,-79,-107,-22,-24,-81,-54,-107,-54,-23,-26,-25,]),'MOD':([75,76,89,90,91,92,93,94,99,100,105,107,142,168,172,186,190,191,207,],[-79,-107,140,-80,-82,-83,-84,-85,-79,-107,-22,-24,-81,-54,-107,-54,-23,-26,-25,]),'PLUS':([75,76,88,89,90,91,92,93,94,99,100,105,107,135,137,142,164,168,172,186,190,191,207,],[-79,-107,133,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-78,-106,-81,-105,-54,-107,-54,-23,-26,-25,]),'MINUS':([75,76,88,89,90,91,92,93,94,99,100,105,107,135,137,142,164,168,172,186,190,191,207,],[-79,-107,134,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-78,-106,-81,-105,-54,-107,-54,-23,-26,-25,]),'LESSTHAN':([75,76,87,88,89,90,91,92,93,94,99,100,105,107,130,132,135,137,142,163,164,168,172,186,190,191,207,],[-79,-107,124,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-77,-101,-78,-106,-81,-100,-105,-54,-107,-54,-23,-26,-25,]),'LESSTHANEQ':([75,76,87,88,89,90,91,92,93,94,99,100,105,107,130,132,135,137,142,163,164,168,172,186,190,191,207,],[-79,-107,125,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-77,-101,-78,-106,-81,-100,-105,-54,-107,-54,-23,-26,-25,]),'GREATERTHAN':([75,76,87,88,89,90,91,92,93,94,99,100,105,107,130,132,135,137,142,163,164,168,172,186,190,191,207,],[-79,-107,126,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-77,-101,-78,-106,-81,-100,-105,-54,-107,-54,-23,-26,-25,]),'GREATERTHANEQ':([75,76,87,88,89,90,91,92,93,94,99,100,105,107,130,132,135,137,142,163,164,168,172,186,190,191,207,],[-79,-107,127,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-77,-101,-78,-106,-81,-100,-105,-54,-107,-54,-23,-26,-25,]),'EQ':([75,76,87,88,89,90,91,92,93,94,99,100,105,107,130,132,135,137,142,163,164,168,172,186,190,191,207,],[-79,-107,128,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-77,-101,-78,-106,-81,-100,-105,-54,-107,-54,-23,-26,-25,]),'DIFERENT':([75,76,87,88,89,90,91,92,93,94,99,100,105,107,130,132,135,137,142,163,164,168,172,186,190,191,207,],[-79,-107,129,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-77,-101,-78,-106,-81,-100,-105,-54,-107,-54,-23,-26,-25,]),'AND':([75,76,86,87,88,89,90,91,92,93,94,99,100,105,107,121,123,130,132,135,137,142,162,163,164,168,172,186,190,191,207,],[-79,-107,119,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-76,-97,-77,-101,-78,-106,-81,-96,-100,-105,-54,-107,-54,-23,-26,-25,]),'OR':([75,76,83,86,87,88,89,90,91,92,93,94,99,100,105,107,118,120,121,123,130,132,135,137,142,161,162,163,164,168,172,186,190,191,207,],[-79,-107,113,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-75,-89,-76,-97,-77,-101,-78,-106,-81,-88,-96,-100,-105,-54,-107,-54,-23,-26,-25,]),'TO':([83,86,87,88,89,90,91,92,93,94,99,100,105,107,112,114,118,120,121,123,130,132,135,137,142,158,161,162,163,164,172,184,186,190,191,207,],[-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,-81,-86,-88,-96,-100,-105,-107,200,-54,-23,-26,-25,]),'DO':([83,86,87,88,89,90,91,92,93,94,99,100,105,107,112,114,118,120,121,123,130,132,135,137,142,158,161,162,163,164,172,183,186,190,191,206,207,],[-107,-107,-107,-107,-107,-80,-82,-83,-84,-85,-79,-107,-22,-24,-74,-87,-75,-89,-76,-97,-77,-101,-78,-106,-81,-86,-88,-96,-100,-105,-107,199,-54,-23,-26,199,-25,]),'CTE_STRING':([110,180,],[156,156,]),'ELSE':([208,],[212,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'g_var':([4,],[5,]),'var_declaration':([4,42,61,],[6,51,96,]),'empty':([4,5,10,25,26,27,39,40,42,44,50,52,57,59,61,65,76,83,86,87,88,89,100,104,117,141,143,148,152,154,172,194,196,197,205,208,215,],[8,11,11,31,34,37,47,31,8,37,56,60,66,37,8,66,107,114,120,123,132,137,107,147,107,66,147,171,177,181,191,177,181,66,66,213,66,]),'funcs':([5,10,],[9,21,]),'function':([5,10,],[10,10,]),'var1':([7,39,],[13,46,]),'var_type':([7,27,39,44,59,],[14,36,14,36,36,]),'type':([7,12,27,39,44,59,],[15,24,15,15,15,15,]),'main':([9,],[19,]),'func_type':([12,],[22,]),'dec_id':([14,30,43,],[25,40,52,]),'var2':([25,40,],[29,49,]),'dec_id1':([26,],[32,]),'params':([27,44,59,],[35,53,95,]),'register_func':([28,],[38,]),'param_type':([36,],[43,]),'var4':([39,],[45,]),'var3':([40,],[48,]),'dec_id2':([50,],[55,]),'params1':([52,],[58,]),'statements':([57,65,141,197,205,215,],[64,102,165,204,209,216,]),'statement':([57,65,141,197,205,215,],[65,65,65,65,65,65,]),'assignation':([57,65,141,197,205,215,],[67,67,67,67,67,67,]),'call_func':([57,65,141,197,205,215,],[68,68,68,68,68,68,]),'return_func':([57,65,141,197,205,215,],[69,69,69,69,69,69,]),'read':([57,65,141,197,205,215,],[70,70,70,70,70,70,]),'write':([57,65,141,197,205,215,],[71,71,71,71,71,71,]),'decision_statement':([57,65,141,197,205,215,],[72,72,72,72,72,72,]),'repetition_statement':([57,65,141,197,205,215,],[73,73,73,73,73,73,]),'expression':([57,63,65,103,104,106,108,109,110,111,113,115,141,143,160,170,176,180,189,197,200,205,215,],[74,98,74,144,148,149,150,152,155,157,158,159,74,148,184,148,194,155,201,74,206,74,74,]),'id':([57,63,65,85,103,104,106,108,109,110,111,113,115,119,122,131,136,141,143,160,170,176,180,189,197,200,205,215,],[75,99,75,116,99,99,99,99,99,99,99,99,99,99,99,99,99,75,99,99,99,99,99,99,75,99,75,75,]),'while_statement':([57,65,141,197,205,215,],[81,81,81,81,81,81,]),'for_statement':([57,65,141,197,205,215,],[82,82,82,82,82,82,]),'texp':([57,63,65,103,104,106,108,109,110,111,113,115,119,141,143,160,170,176,180,189,197,200,205,215,],[83,83,83,83,83,83,83,83,83,83,83,83,161,83,83,83,83,83,83,83,83,83,83,83,]),'gexp':([57,63,65,103,104,106,108,109,110,111,113,115,119,141,143,160,170,176,180,189,197,200,205,215,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'mexp':([57,63,65,103,104,106,108,109,110,111,113,115,119,122,131,141,143,160,170,176,180,189,197,200,205,215,],[87,87,87,87,87,87,87,87,87,87,87,87,87,162,163,87,87,87,87,87,87,87,87,87,87,87,]),'term':([57,63,65,103,104,106,108,109,110,111,113,115,119,122,131,136,141,143,160,170,176,180,189,197,200,205,215,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,164,88,88,88,88,88,88,88,88,88,88,88,]),'fact':([57,63,65,103,104,106,108,109,110,111,113,115,119,122,131,136,141,143,160,170,176,180,189,197,200,205,215,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'call_func_exp':([57,63,65,103,104,106,108,109,110,111,113,115,119,122,131,136,141,143,160,170,176,180,189,197,200,205,215,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'cte':([57,63,65,103,104,106,108,109,110,111,113,115,119,122,131,136,141,143,160,170,176,180,189,197,200,205,215,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'id1':([76,100,117,],[105,105,105,]),'op1':([83,],[112,]),'op2':([86,],[118,]),'op3aux':([87,],[121,]),'op3':([87,],[122,]),'op4aux':([88,],[130,]),'op4':([88,],[131,]),'op5aux':([89,],[135,]),'op5':([89,],[136,]),'args':([104,143,],[145,166,]),'args1':([104,143,170,],[146,146,188,]),'read_args':([109,],[151,]),'write_args':([110,],[153,]),'write_args2':([110,180,],[154,196,]),'args2':([148,],[169,]),'read_args1':([152,194,],[175,202,]),'write_args1':([154,196,],[179,203,]),'id2':([172,],[190,]),'do_statement':([183,206,],[198,210,]),'decision_statement1':([208,],[211,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON g_var funcs main','program',6,'p_program','parser-lexer.py',212),
  ('main -> MAIN L_P params R_P var_declaration L_B statements R_B','main',8,'p_main','parser-lexer.py',218),
  ('type -> INT','type',1,'p_type','parser-lexer.py',234),
  ('type -> FLOAT','type',1,'p_type','parser-lexer.py',235),
  ('type -> CHAR','type',1,'p_type','parser-lexer.py',236),
  ('g_var -> var_declaration','g_var',1,'p_g_var','parser-lexer.py',242),
  ('funcs -> function funcs','funcs',2,'p_funcs','parser-lexer.py',250),
  ('funcs -> empty','funcs',1,'p_funcs','parser-lexer.py',251),
  ('var_declaration -> VAR var1','var_declaration',2,'p_var_declaration','parser-lexer.py',255),
  ('var_declaration -> empty','var_declaration',1,'p_var_declaration','parser-lexer.py',256),
  ('var1 -> var_type dec_id var2 SEMICOLON var4','var1',5,'p_var1','parser-lexer.py',260),
  ('var2 -> COMA dec_id var3','var2',3,'p_var2','parser-lexer.py',264),
  ('var2 -> empty','var2',1,'p_var2','parser-lexer.py',265),
  ('var3 -> var2','var3',1,'p_var3','parser-lexer.py',269),
  ('var4 -> var1','var4',1,'p_var4','parser-lexer.py',273),
  ('var4 -> empty','var4',1,'p_var4','parser-lexer.py',274),
  ('dec_id -> ID dec_id1','dec_id',2,'p_dec_id','parser-lexer.py',278),
  ('dec_id1 -> L_SB CTE_I R_SB dec_id2','dec_id1',4,'p_dec_id1','parser-lexer.py',300),
  ('dec_id1 -> empty','dec_id1',1,'p_dec_id1','parser-lexer.py',301),
  ('dec_id2 -> L_SB CTE_I R_SB','dec_id2',3,'p_dec_id2','parser-lexer.py',305),
  ('dec_id2 -> empty','dec_id2',1,'p_dec_id2','parser-lexer.py',306),
  ('id -> ID id1','id',2,'p_id','parser-lexer.py',310),
  ('id1 -> L_SB expression R_SB id2','id1',4,'p_id1','parser-lexer.py',316),
  ('id1 -> empty','id1',1,'p_id1','parser-lexer.py',317),
  ('id2 -> L_SB expression R_SB','id2',3,'p_id2','parser-lexer.py',321),
  ('id2 -> empty','id2',1,'p_id2','parser-lexer.py',322),
  ('var_type -> type','var_type',1,'p_var_type','parser-lexer.py',326),
  ('function -> FUNC func_type ID register_func L_P params R_P var_declaration L_B statements R_B','function',11,'p_function','parser-lexer.py',330),
  ('register_func -> <empty>','register_func',0,'p_register_func','parser-lexer.py',341),
  ('func_type -> VOID','func_type',1,'p_func_type','parser-lexer.py',351),
  ('func_type -> type','func_type',1,'p_func_type','parser-lexer.py',352),
  ('params -> var_type param_type dec_id params1','params',4,'p_params','parser-lexer.py',359),
  ('params -> empty','params',1,'p_params','parser-lexer.py',360),
  ('param_type -> <empty>','param_type',0,'p_param_type','parser-lexer.py',364),
  ('params1 -> COMA params','params1',2,'p_params1','parser-lexer.py',371),
  ('params1 -> empty','params1',1,'p_params1','parser-lexer.py',372),
  ('statements -> statement statements','statements',2,'p_statements','parser-lexer.py',376),
  ('statements -> empty','statements',1,'p_statements','parser-lexer.py',377),
  ('statement -> assignation','statement',1,'p_statement','parser-lexer.py',381),
  ('statement -> call_func','statement',1,'p_statement','parser-lexer.py',382),
  ('statement -> return_func','statement',1,'p_statement','parser-lexer.py',383),
  ('statement -> read','statement',1,'p_statement','parser-lexer.py',384),
  ('statement -> write','statement',1,'p_statement','parser-lexer.py',385),
  ('statement -> decision_statement','statement',1,'p_statement','parser-lexer.py',386),
  ('statement -> repetition_statement','statement',1,'p_statement','parser-lexer.py',387),
  ('statement -> expression','statement',1,'p_statement','parser-lexer.py',388),
  ('assignation -> id EQUAL expression SEMICOLON','assignation',4,'p_assignation','parser-lexer.py',392),
  ('args -> args1','args',1,'p_args','parser-lexer.py',396),
  ('args -> empty','args',1,'p_args','parser-lexer.py',397),
  ('args1 -> expression args2','args1',2,'p_args1','parser-lexer.py',401),
  ('args2 -> COMA args1','args2',2,'p_args2','parser-lexer.py',405),
  ('args2 -> empty','args2',1,'p_args2','parser-lexer.py',406),
  ('call_func -> ID L_P args R_P SEMICOLON','call_func',5,'p_call_func','parser-lexer.py',410),
  ('call_func_exp -> ID L_P args R_P','call_func_exp',4,'p_call_func_exp','parser-lexer.py',413),
  ('return_func -> RETURN L_P expression R_P SEMICOLON','return_func',5,'p_return_func','parser-lexer.py',416),
  ('read -> READ L_P read_args R_P SEMICOLON','read',5,'p_read','parser-lexer.py',420),
  ('read_args -> expression read_args1','read_args',2,'p_read_args','parser-lexer.py',424),
  ('read_args1 -> COMA expression read_args1','read_args1',3,'p_read_args1','parser-lexer.py',428),
  ('read_args1 -> empty','read_args1',1,'p_read_args1','parser-lexer.py',429),
  ('write -> PRINT L_P write_args R_P SEMICOLON','write',5,'p_write','parser-lexer.py',433),
  ('write_args -> write_args2 write_args1','write_args',2,'p_write_args','parser-lexer.py',437),
  ('write_args1 -> COMA write_args2 write_args1','write_args1',3,'p_write_args1','parser-lexer.py',441),
  ('write_args1 -> empty','write_args1',1,'p_write_args1','parser-lexer.py',442),
  ('write_args2 -> expression','write_args2',1,'p_write_args2','parser-lexer.py',446),
  ('write_args2 -> CTE_STRING','write_args2',1,'p_write_args2','parser-lexer.py',447),
  ('decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1','decision_statement',8,'p_decision_statement','parser-lexer.py',451),
  ('decision_statement1 -> ELSE L_B statements R_B','decision_statement1',4,'p_decision_statement1','parser-lexer.py',455),
  ('decision_statement1 -> empty','decision_statement1',1,'p_decision_statement1','parser-lexer.py',456),
  ('repetition_statement -> while_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',460),
  ('repetition_statement -> for_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',461),
  ('for_statement -> FOR id EQUAL expression TO expression do_statement','for_statement',7,'p_for_statement','parser-lexer.py',465),
  ('while_statement -> WHILE L_P expression R_P do_statement','while_statement',5,'p_while_statement','parser-lexer.py',469),
  ('do_statement -> DO L_B statements R_B','do_statement',4,'p_do_statement','parser-lexer.py',473),
  ('expression -> texp op1','expression',2,'p_expression','parser-lexer.py',477),
  ('texp -> gexp op2','texp',2,'p_texp','parser-lexer.py',481),
  ('gexp -> mexp op3aux','gexp',2,'p_gexp','parser-lexer.py',485),
  ('mexp -> term op4aux','mexp',2,'p_mexp','parser-lexer.py',489),
  ('term -> fact op5aux','term',2,'p_term','parser-lexer.py',493),
  ('fact -> id','fact',1,'p_fact','parser-lexer.py',497),
  ('fact -> call_func_exp','fact',1,'p_fact','parser-lexer.py',498),
  ('fact -> L_P expression R_P','fact',3,'p_fact','parser-lexer.py',499),
  ('fact -> cte','fact',1,'p_fact','parser-lexer.py',500),
  ('cte -> CTE_I','cte',1,'p_cte','parser-lexer.py',505),
  ('cte -> CTE_F','cte',1,'p_cte','parser-lexer.py',506),
  ('cte -> CTE_CHAR','cte',1,'p_cte','parser-lexer.py',507),
  ('op1 -> OR expression','op1',2,'p_op1','parser-lexer.py',511),
  ('op1 -> empty','op1',1,'p_op1','parser-lexer.py',512),
  ('op2 -> AND texp','op2',2,'p_op2','parser-lexer.py',516),
  ('op2 -> empty','op2',1,'p_op2','parser-lexer.py',517),
  ('op3 -> LESSTHAN','op3',1,'p_op3','parser-lexer.py',521),
  ('op3 -> LESSTHANEQ','op3',1,'p_op3','parser-lexer.py',522),
  ('op3 -> GREATERTHAN','op3',1,'p_op3','parser-lexer.py',523),
  ('op3 -> GREATERTHANEQ','op3',1,'p_op3','parser-lexer.py',524),
  ('op3 -> EQ','op3',1,'p_op3','parser-lexer.py',525),
  ('op3 -> DIFERENT','op3',1,'p_op3','parser-lexer.py',526),
  ('op3aux -> op3 mexp','op3aux',2,'p_op3aux','parser-lexer.py',530),
  ('op3aux -> empty','op3aux',1,'p_op3aux','parser-lexer.py',531),
  ('op4 -> PLUS','op4',1,'p_op4','parser-lexer.py',535),
  ('op4 -> MINUS','op4',1,'p_op4','parser-lexer.py',536),
  ('op4aux -> op4 mexp','op4aux',2,'p_op4aux','parser-lexer.py',540),
  ('op4aux -> empty','op4aux',1,'p_op4aux','parser-lexer.py',541),
  ('op5 -> MULT','op5',1,'p_op5','parser-lexer.py',545),
  ('op5 -> DIV','op5',1,'p_op5','parser-lexer.py',546),
  ('op5 -> MOD','op5',1,'p_op5','parser-lexer.py',547),
  ('op5aux -> op5 term','op5aux',2,'p_op5aux','parser-lexer.py',551),
  ('op5aux -> empty','op5aux',1,'p_op5aux','parser-lexer.py',552),
  ('empty -> <empty>','empty',0,'p_empty','parser-lexer.py',557),
]
