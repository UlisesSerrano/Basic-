
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COMA CTE_CHAR CTE_F CTE_I CTE_STRING DIFERENT DIV DO ELSE EQ EQUAL FLOAT FOR FUNC GREATERTHAN GREATERTHANEQ ID IF INT LESSTHAN LESSTHANEQ L_B L_P L_SB MAIN MINUS MOD MULT OR PLUS PRINT PROGRAM READ RETURN R_B R_P R_SB SEMICOLON TO VAR VOID WHILEprogram : PROGRAM ID SEMICOLON g_var funcs mainmain : MAIN L_P params R_P var_declaration L_B statements R_Btype : INT\n            | FLOAT\n            | CHARg_var : var_declarationfuncs : function funcs\n            | emptyvar_declaration : VAR var1\n                        | emptyvar1 : var_type dec_id var2 SEMICOLON var4var2 : COMA dec_id var3\n            | emptyvar3 : var2var4 : var1\n            | emptydec_id : ID dec_id1dec_id1 : L_SB CTE_I R_SB dec_id2\n            | emptydec_id2 : L_SB CTE_I R_SB\n        | emptyid : ID id1id1 : L_SB expression R_SB id2\n            | emptyid2 : L_SB expression R_SB\n        | emptyvar_type : typefunction : FUNC func_type ID register_func L_P params R_P var_declaration start_func L_B statements R_Bregister_func : start_func : func_type : VOID\n                | typeparams : var_type param_type dec_id params1\n            | emptyparam_type : params1 : COMA params\n                | emptystatements : statement statements\n                | emptystatement : assignation\n                | call_func\n                | return_func\n                | read\n                | write\n                | decision_statement\n                | repetition_statement\n                | expressionassignation : id id_quad EQUAL expression SEMICOLONargs : args1\n            | emptyargs1 : expression args2args2 : COMA args1\n            | emptycall_func :  ID L_P args R_P SEMICOLONcall_func_exp :  ID L_P args R_Preturn_func : RETURN L_P expression R_P SEMICOLONread : READ L_P read_args R_P SEMICOLONread_args : expression read_args1read_args1 : COMA expression read_args1\n                | emptywrite : PRINT L_P write_args R_P SEMICOLONwrite_args : write_args2 write_args1write_args1 : COMA write_args2 write_args1\n                    | emptywrite_args2 : expression\n                | CTE_STRINGdecision_statement : IF L_P expression R_P exp_type L_B statements R_B decision_statement1decision_statement1 : ELSE else_jump L_B statements R_B\n                            | emptyexp_type : else_jump : repetition_statement : while_statement\n                            | for_statementfor_statement : FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statementfor_id : breadcrumb : while_statement : WHILE L_P breadcrumb expression R_P exp_type do_statementdo_statement :  DO L_B statements R_Bexpression : texp generate_quad op1texp : gexp generate_quad op2gexp : mexp generate_quad op3auxmexp : term generate_quad op4auxterm : fact generate_quad op5auxgenerate_quad : fact : id id_quad\n            | call_func_exp\n            | L_P add_fake expression R_P remove_fake\n            | cteadd_fake : remove_fake : \n        id_quad :\n    cte : CTE_F add_cte_float\n            | CTE_I add_cte_int\n            | CTE_CHAR add_cte_charadd_cte_int : add_cte_float : add_cte_char : op1 : OR expression\n            | emptyop2 : AND texp\n            | emptyop3 : LESSTHAN\n            | LESSTHANEQ\xa0\n            | GREATERTHAN\n            | GREATERTHANEQ\n            | EQ\n            | DIFERENTop3aux : op3 mexp\n            | emptyop4 : PLUS\n            | MINUSop4aux : op4 mexp\n            | emptyop5 : MULT\n        | DIV\n        | MODop5aux : op5 term\n            | empty\n        empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'g_var':([4,],[5,]),'var_declaration':([4,42,61,],[6,51,96,]),'empty':([4,5,10,25,26,27,39,40,42,44,50,52,57,59,61,65,76,102,110,113,114,115,116,117,124,129,133,135,167,170,176,205,207,216,224,225,235,],[8,11,11,31,34,37,47,31,8,37,56,60,66,37,8,66,105,128,141,105,146,149,158,163,105,175,181,185,66,128,202,181,185,66,229,66,66,]),'funcs':([5,10,],[9,21,]),'function':([5,10,],[10,10,]),'var1':([7,39,],[13,46,]),'var_type':([7,27,39,44,59,],[14,36,14,36,36,]),'type':([7,12,27,39,44,59,],[15,24,15,15,15,15,]),'main':([9,],[19,]),'func_type':([12,],[22,]),'dec_id':([14,30,43,],[25,40,52,]),'var2':([25,40,],[29,49,]),'dec_id1':([26,],[32,]),'params':([27,44,59,],[35,53,95,]),'register_func':([28,],[38,]),'param_type':([36,],[43,]),'var4':([39,],[45,]),'var3':([40,],[48,]),'dec_id2':([50,],[55,]),'params1':([52,],[58,]),'statements':([57,65,167,216,225,235,],[64,100,194,220,230,237,]),'statement':([57,65,167,216,225,235,],[65,65,65,65,65,65,]),'assignation':([57,65,167,216,225,235,],[67,67,67,67,67,67,]),'call_func':([57,65,167,216,225,235,],[68,68,68,68,68,68,]),'return_func':([57,65,167,216,225,235,],[69,69,69,69,69,69,]),'read':([57,65,167,216,225,235,],[70,70,70,70,70,70,]),'write':([57,65,167,216,225,235,],[71,71,71,71,71,71,]),'decision_statement':([57,65,167,216,225,235,],[72,72,72,72,72,72,]),'repetition_statement':([57,65,167,216,225,235,],[73,73,73,73,73,73,]),'expression':([57,65,98,102,104,106,107,108,109,125,140,142,167,170,174,180,184,189,200,216,225,226,235,],[74,74,122,129,130,131,133,136,138,171,187,188,74,129,129,205,136,210,213,74,74,231,74,]),'id':([57,65,85,98,102,104,106,107,108,109,125,140,142,145,148,157,162,167,170,174,180,184,189,200,216,225,226,235,],[75,75,112,123,123,123,123,123,123,123,123,123,123,123,123,123,123,75,123,123,123,123,123,123,75,75,123,75,]),'while_statement':([57,65,167,216,225,235,],[81,81,81,81,81,81,]),'for_statement':([57,65,167,216,225,235,],[82,82,82,82,82,82,]),'texp':([57,65,98,102,104,106,107,108,109,125,140,142,145,167,170,174,180,184,189,200,216,225,226,235,],[83,83,83,83,83,83,83,83,83,83,83,83,190,83,83,83,83,83,83,83,83,83,83,83,]),'gexp':([57,65,98,102,104,106,107,108,109,125,140,142,145,167,170,174,180,184,189,200,216,225,226,235,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'mexp':([57,65,98,102,104,106,107,108,109,125,140,142,145,148,157,167,170,174,180,184,189,200,216,225,226,235,],[87,87,87,87,87,87,87,87,87,87,87,87,87,191,192,87,87,87,87,87,87,87,87,87,87,87,]),'term':([57,65,98,102,104,106,107,108,109,125,140,142,145,148,157,162,167,170,174,180,184,189,200,216,225,226,235,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,193,88,88,88,88,88,88,88,88,88,88,88,]),'fact':([57,65,98,102,104,106,107,108,109,125,140,142,145,148,157,162,167,170,174,180,184,189,200,216,225,226,235,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'call_func_exp':([57,65,98,102,104,106,107,108,109,125,140,142,145,148,157,162,167,170,174,180,184,189,200,216,225,226,235,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'cte':([57,65,98,102,104,106,107,108,109,125,140,142,145,148,157,162,167,170,174,180,184,189,200,216,225,226,235,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'add_fake':([63,],[98,]),'id_quad':([75,112,123,],[101,143,169,]),'id1':([76,113,124,],[103,103,103,]),'generate_quad':([83,86,87,88,89,],[110,114,115,116,117,]),'add_cte_float':([92,],[118,]),'add_cte_int':([93,],[119,]),'add_cte_char':([94,],[120,]),'start_func':([96,],[121,]),'args':([102,170,],[126,196,]),'args1':([102,170,174,],[127,127,199,]),'read_args':([107,],[132,]),'write_args':([108,],[134,]),'write_args2':([108,184,],[135,207,]),'op1':([110,],[139,]),'breadcrumb':([111,223,],[142,226,]),'op2':([114,],[144,]),'op3aux':([115,],[147,]),'op3':([115,],[148,]),'op4aux':([116,],[156,]),'op4':([116,],[157,]),'op5aux':([117,],[161,]),'op5':([117,],[162,]),'args2':([129,],[173,]),'read_args1':([133,205,],[179,214,]),'write_args1':([135,207,],[183,215,]),'remove_fake':([168,],[195,]),'id2':([176,],[201,]),'exp_type':([186,209,231,],[208,217,234,]),'for_id':([210,],[218,]),'do_statement':([217,234,],[221,236,]),'decision_statement1':([224,],[227,]),'else_jump':([228,],[232,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON g_var funcs main','program',6,'p_program','parser-lexer.py',217),
  ('main -> MAIN L_P params R_P var_declaration L_B statements R_B','main',8,'p_main','parser-lexer.py',224),
  ('type -> INT','type',1,'p_type','parser-lexer.py',241),
  ('type -> FLOAT','type',1,'p_type','parser-lexer.py',242),
  ('type -> CHAR','type',1,'p_type','parser-lexer.py',243),
  ('g_var -> var_declaration','g_var',1,'p_g_var','parser-lexer.py',249),
  ('funcs -> function funcs','funcs',2,'p_funcs','parser-lexer.py',256),
  ('funcs -> empty','funcs',1,'p_funcs','parser-lexer.py',257),
  ('var_declaration -> VAR var1','var_declaration',2,'p_var_declaration','parser-lexer.py',261),
  ('var_declaration -> empty','var_declaration',1,'p_var_declaration','parser-lexer.py',262),
  ('var1 -> var_type dec_id var2 SEMICOLON var4','var1',5,'p_var1','parser-lexer.py',266),
  ('var2 -> COMA dec_id var3','var2',3,'p_var2','parser-lexer.py',270),
  ('var2 -> empty','var2',1,'p_var2','parser-lexer.py',271),
  ('var3 -> var2','var3',1,'p_var3','parser-lexer.py',275),
  ('var4 -> var1','var4',1,'p_var4','parser-lexer.py',279),
  ('var4 -> empty','var4',1,'p_var4','parser-lexer.py',280),
  ('dec_id -> ID dec_id1','dec_id',2,'p_dec_id','parser-lexer.py',284),
  ('dec_id1 -> L_SB CTE_I R_SB dec_id2','dec_id1',4,'p_dec_id1','parser-lexer.py',304),
  ('dec_id1 -> empty','dec_id1',1,'p_dec_id1','parser-lexer.py',305),
  ('dec_id2 -> L_SB CTE_I R_SB','dec_id2',3,'p_dec_id2','parser-lexer.py',309),
  ('dec_id2 -> empty','dec_id2',1,'p_dec_id2','parser-lexer.py',310),
  ('id -> ID id1','id',2,'p_id','parser-lexer.py',314),
  ('id1 -> L_SB expression R_SB id2','id1',4,'p_id1','parser-lexer.py',320),
  ('id1 -> empty','id1',1,'p_id1','parser-lexer.py',321),
  ('id2 -> L_SB expression R_SB','id2',3,'p_id2','parser-lexer.py',325),
  ('id2 -> empty','id2',1,'p_id2','parser-lexer.py',326),
  ('var_type -> type','var_type',1,'p_var_type','parser-lexer.py',330),
  ('function -> FUNC func_type ID register_func L_P params R_P var_declaration start_func L_B statements R_B','function',12,'p_function','parser-lexer.py',334),
  ('register_func -> <empty>','register_func',0,'p_register_func','parser-lexer.py',346),
  ('start_func -> <empty>','start_func',0,'p_start_func','parser-lexer.py',356),
  ('func_type -> VOID','func_type',1,'p_func_type','parser-lexer.py',362),
  ('func_type -> type','func_type',1,'p_func_type','parser-lexer.py',363),
  ('params -> var_type param_type dec_id params1','params',4,'p_params','parser-lexer.py',370),
  ('params -> empty','params',1,'p_params','parser-lexer.py',371),
  ('param_type -> <empty>','param_type',0,'p_param_type','parser-lexer.py',375),
  ('params1 -> COMA params','params1',2,'p_params1','parser-lexer.py',382),
  ('params1 -> empty','params1',1,'p_params1','parser-lexer.py',383),
  ('statements -> statement statements','statements',2,'p_statements','parser-lexer.py',387),
  ('statements -> empty','statements',1,'p_statements','parser-lexer.py',388),
  ('statement -> assignation','statement',1,'p_statement','parser-lexer.py',392),
  ('statement -> call_func','statement',1,'p_statement','parser-lexer.py',393),
  ('statement -> return_func','statement',1,'p_statement','parser-lexer.py',394),
  ('statement -> read','statement',1,'p_statement','parser-lexer.py',395),
  ('statement -> write','statement',1,'p_statement','parser-lexer.py',396),
  ('statement -> decision_statement','statement',1,'p_statement','parser-lexer.py',397),
  ('statement -> repetition_statement','statement',1,'p_statement','parser-lexer.py',398),
  ('statement -> expression','statement',1,'p_statement','parser-lexer.py',399),
  ('assignation -> id id_quad EQUAL expression SEMICOLON','assignation',5,'p_assignation','parser-lexer.py',403),
  ('args -> args1','args',1,'p_args','parser-lexer.py',418),
  ('args -> empty','args',1,'p_args','parser-lexer.py',419),
  ('args1 -> expression args2','args1',2,'p_args1','parser-lexer.py',423),
  ('args2 -> COMA args1','args2',2,'p_args2','parser-lexer.py',427),
  ('args2 -> empty','args2',1,'p_args2','parser-lexer.py',428),
  ('call_func -> ID L_P args R_P SEMICOLON','call_func',5,'p_call_func','parser-lexer.py',432),
  ('call_func_exp -> ID L_P args R_P','call_func_exp',4,'p_call_func_exp','parser-lexer.py',436),
  ('return_func -> RETURN L_P expression R_P SEMICOLON','return_func',5,'p_return_func','parser-lexer.py',440),
  ('read -> READ L_P read_args R_P SEMICOLON','read',5,'p_read','parser-lexer.py',448),
  ('read_args -> expression read_args1','read_args',2,'p_read_args','parser-lexer.py',456),
  ('read_args1 -> COMA expression read_args1','read_args1',3,'p_read_args1','parser-lexer.py',460),
  ('read_args1 -> empty','read_args1',1,'p_read_args1','parser-lexer.py',461),
  ('write -> PRINT L_P write_args R_P SEMICOLON','write',5,'p_write','parser-lexer.py',465),
  ('write_args -> write_args2 write_args1','write_args',2,'p_write_args','parser-lexer.py',473),
  ('write_args1 -> COMA write_args2 write_args1','write_args1',3,'p_write_args1','parser-lexer.py',477),
  ('write_args1 -> empty','write_args1',1,'p_write_args1','parser-lexer.py',478),
  ('write_args2 -> expression','write_args2',1,'p_write_args2','parser-lexer.py',482),
  ('write_args2 -> CTE_STRING','write_args2',1,'p_write_args2','parser-lexer.py',483),
  ('decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1','decision_statement',9,'p_decision_statement','parser-lexer.py',487),
  ('decision_statement1 -> ELSE else_jump L_B statements R_B','decision_statement1',5,'p_decision_statement1','parser-lexer.py',494),
  ('decision_statement1 -> empty','decision_statement1',1,'p_decision_statement1','parser-lexer.py',495),
  ('exp_type -> <empty>','exp_type',0,'p_exp_type','parser-lexer.py',499),
  ('else_jump -> <empty>','else_jump',0,'p_else_jump','parser-lexer.py',511),
  ('repetition_statement -> while_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',520),
  ('repetition_statement -> for_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',521),
  ('for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement','for_statement',11,'p_for_statement','parser-lexer.py',525),
  ('for_id -> <empty>','for_id',0,'p_for_id','parser-lexer.py',550),
  ('breadcrumb -> <empty>','breadcrumb',0,'p_breadcrumb','parser-lexer.py',566),
  ('while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement','while_statement',7,'p_while_statement','parser-lexer.py',572),
  ('do_statement -> DO L_B statements R_B','do_statement',4,'p_do_statement','parser-lexer.py',581),
  ('expression -> texp generate_quad op1','expression',3,'p_expression','parser-lexer.py',585),
  ('texp -> gexp generate_quad op2','texp',3,'p_texp','parser-lexer.py',589),
  ('gexp -> mexp generate_quad op3aux','gexp',3,'p_gexp','parser-lexer.py',593),
  ('mexp -> term generate_quad op4aux','mexp',3,'p_mexp','parser-lexer.py',597),
  ('term -> fact generate_quad op5aux','term',3,'p_term','parser-lexer.py',601),
  ('generate_quad -> <empty>','generate_quad',0,'p_generate_quad','parser-lexer.py',605),
  ('fact -> id id_quad','fact',2,'p_fact','parser-lexer.py',612),
  ('fact -> call_func_exp','fact',1,'p_fact','parser-lexer.py',613),
  ('fact -> L_P add_fake expression R_P remove_fake','fact',5,'p_fact','parser-lexer.py',614),
  ('fact -> cte','fact',1,'p_fact','parser-lexer.py',615),
  ('add_fake -> <empty>','add_fake',0,'p_add_fake','parser-lexer.py',619),
  ('remove_fake -> <empty>','remove_fake',0,'p_remove_fake','parser-lexer.py',625),
  ('id_quad -> <empty>','id_quad',0,'p_id_quad','parser-lexer.py',632),
  ('cte -> CTE_F add_cte_float','cte',2,'p_cte','parser-lexer.py',649),
  ('cte -> CTE_I add_cte_int','cte',2,'p_cte','parser-lexer.py',650),
  ('cte -> CTE_CHAR add_cte_char','cte',2,'p_cte','parser-lexer.py',651),
  ('add_cte_int -> <empty>','add_cte_int',0,'p_add_cte_int','parser-lexer.py',655),
  ('add_cte_float -> <empty>','add_cte_float',0,'p_add_cte_float','parser-lexer.py',670),
  ('add_cte_char -> <empty>','add_cte_char',0,'p_add_cte_char','parser-lexer.py',685),
  ('op1 -> OR expression','op1',2,'p_op1','parser-lexer.py',700),
  ('op1 -> empty','op1',1,'p_op1','parser-lexer.py',701),
  ('op2 -> AND texp','op2',2,'p_op2','parser-lexer.py',708),
  ('op2 -> empty','op2',1,'p_op2','parser-lexer.py',709),
  ('op3 -> LESSTHAN','op3',1,'p_op3','parser-lexer.py',716),
  ('op3 -> LESSTHANEQ','op3',1,'p_op3','parser-lexer.py',717),
  ('op3 -> GREATERTHAN','op3',1,'p_op3','parser-lexer.py',718),
  ('op3 -> GREATERTHANEQ','op3',1,'p_op3','parser-lexer.py',719),
  ('op3 -> EQ','op3',1,'p_op3','parser-lexer.py',720),
  ('op3 -> DIFERENT','op3',1,'p_op3','parser-lexer.py',721),
  ('op3aux -> op3 mexp','op3aux',2,'p_op3aux','parser-lexer.py',727),
  ('op3aux -> empty','op3aux',1,'p_op3aux','parser-lexer.py',728),
  ('op4 -> PLUS','op4',1,'p_op4','parser-lexer.py',732),
  ('op4 -> MINUS','op4',1,'p_op4','parser-lexer.py',733),
  ('op4aux -> op4 mexp','op4aux',2,'p_op4aux','parser-lexer.py',739),
  ('op4aux -> empty','op4aux',1,'p_op4aux','parser-lexer.py',740),
  ('op5 -> MULT','op5',1,'p_op5','parser-lexer.py',744),
  ('op5 -> DIV','op5',1,'p_op5','parser-lexer.py',745),
  ('op5 -> MOD','op5',1,'p_op5','parser-lexer.py',746),
  ('op5aux -> op5 term','op5aux',2,'p_op5aux','parser-lexer.py',752),
  ('op5aux -> empty','op5aux',1,'p_op5aux','parser-lexer.py',753),
  ('empty -> <empty>','empty',0,'p_empty','parser-lexer.py',758),
]
