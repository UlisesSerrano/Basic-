
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COMA CTE_CHAR CTE_F CTE_I CTE_NEG_I CTE_STRING DIFERENT DIV DO ELSE EQ EQUAL FLOAT FOR FUNC GREATERTHAN GREATERTHANEQ ID IF INT LESSTHAN LESSTHANEQ L_B L_P L_SB MAIN MINUS MOD MULT OR PLUS PRINT PROGRAM READ RETURN R_B R_P R_SB SEMICOLON TO VAR VOID WHILEprogram : PROGRAM ID main_quad SEMICOLON g_var funcs mainmain_quad : main : MAIN L_P params R_P var_declaration L_B main_start statements R_Bmain_start : type : INT\n            | FLOAT\n            | CHARg_var : var_declarationfuncs : function funcs\n            | emptyvar_declaration : VAR var1\n                        | emptyvar1 : var_type dec_id var2 SEMICOLON var4var2 : COMA dec_id var3\n            | emptyvar3 : var2var4 : var1\n            | emptydec_id : ID add_id dec_id1dec_id1 : L_SB CTE_I set_array R_SB dec_id2\n            | emptydec_id2 : L_SB CTE_I set_array R_SB\n        | emptyadd_id : set_array : id : ID set_id id1set_id : id1 : verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base\n            | emptyid2 : L_SB add_fake expression remove_fake verify_quad_2 R_SB\n        | emptyverify_dim : verify_quad_1 : verify_quad_2 : add_base : var_type : typefunction : FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_Bregister_func : add_params : start_func : func_type : VOID\n                | typeparams : var_type param_type dec_id params1\n            | emptyparam_type : params1 : COMA params\n                | emptystatements : statement statements\n                | emptystatement : assignation\n                | call_func\n                | return_func\n                | read\n                | write\n                | decision_statement\n                | repetition_statement\n                | expressionassignation : id id_quad EQUAL expression SEMICOLONargs : args1\n            | emptyargs1 : add_fake expression param_check remove_fake args2param_check : args2 : COMA next_arg args1\n            | emptynext_arg : call_func :  ID call_func_era L_P args R_P SEMICOLONcall_func_exp :  ID call_func_era L_P args R_Pcall_func_era : return_func : RETURN L_P expression R_P SEMICOLONread : READ L_P read_args R_P SEMICOLONread_args : add_fake expression remove_fake read_args1read_args1 : COMA add_fake expression remove_fake read_args1\n                | emptywrite : PRINT L_P write_args R_P SEMICOLONwrite_args : write_args2 write_args1write_args1 : COMA write_args2 write_args1\n                    | emptywrite_args2 : add_fake expression remove_fake\n                | CTE_STRING add_cte_stringdecision_statement : IF L_P expression R_P exp_type L_B statements R_B decision_statement1decision_statement1 : ELSE else_jump L_B statements R_B\n                            | emptyexp_type : else_jump : repetition_statement : while_statement\n                            | for_statementfor_statement : FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statementfor_id : breadcrumb : while_statement : WHILE L_P breadcrumb expression R_P exp_type do_statementdo_statement :  DO L_B statements R_Bexpression : texp generate_quad_1 op1texp : gexp generate_quad_2 op2gexp : mexp generate_quad_3 op3auxmexp : term generate_quad_4 op4auxterm : fact generate_quad_5 op5auxgenerate_quad_1 : generate_quad_2 : generate_quad_3 : generate_quad_4 : generate_quad_5 : fact : id id_quad\n            | call_func_exp\n            | L_P add_fake expression R_P remove_fake\n            | cteadd_fake : remove_fake : \n        id_quad :\n    cte : CTE_CHAR add_cte_char\n            | CTE_F add_cte_float\n            | CTE_I add_cte_int\n            | CTE_NEG_I add_cte_int add_cte_int : add_cte_float : add_cte_char : add_cte_string : add_operator : op1 : OR add_operator expression\n            | emptyop2 : AND add_operator texp\n            | emptyop3 : LESSTHAN\n            | LESSTHANEQ\xa0\n            | GREATERTHAN\n            | GREATERTHANEQ\n            | EQ\n            | DIFERENTop3aux : op3 mexp\n            | emptyop4 : PLUS\n            | MINUSop4aux : op4 mexp\n            | emptyop5 : MULT\n        | DIV\n        | MODop5aux : op5 term\n            | empty\n        empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'main_quad':([3,],[4,]),'g_var':([5,],[6,]),'var_declaration':([5,43,64,],[7,52,101,]),'empty':([5,6,11,26,28,33,38,39,43,45,53,58,61,62,64,70,108,113,117,118,119,120,131,139,171,201,208,210,226,230,242,243,246,247,263,],[9,12,12,32,36,42,48,32,9,36,59,36,67,71,9,71,134,145,150,153,162,167,179,188,71,179,224,188,71,239,250,71,256,224,71,]),'funcs':([6,11,],[10,22,]),'function':([6,11,],[11,11,]),'var1':([8,38,],[14,47,]),'var_type':([8,28,38,45,58,],[15,35,15,35,35,]),'type':([8,13,28,38,45,58,],[16,25,16,16,16,16,]),'main':([10,],[20,]),'func_type':([13,],[23,]),'dec_id':([15,31,44,],[26,39,53,]),'var2':([26,39,],[30,50,]),'add_id':([27,],[33,]),'params':([28,45,58,],[34,54,63,]),'register_func':([29,],[37,]),'dec_id1':([33,],[40,]),'param_type':([35,],[44,]),'var4':([38,],[46,]),'var3':([39,],[49,]),'set_array':([51,102,],[55,126,]),'params1':([53,],[57,]),'main_start':([56,],[62,]),'add_params':([60,],[64,]),'dec_id2':([61,],[66,]),'statements':([62,70,171,226,243,263,],[69,105,199,233,251,266,]),'statement':([62,70,171,226,243,263,],[70,70,70,70,70,70,]),'assignation':([62,70,171,226,243,263,],[72,72,72,72,72,72,]),'call_func':([62,70,171,226,243,263,],[73,73,73,73,73,73,]),'return_func':([62,70,171,226,243,263,],[74,74,74,74,74,74,]),'read':([62,70,171,226,243,263,],[75,75,75,75,75,75,]),'write':([62,70,171,226,243,263,],[76,76,76,76,76,76,]),'decision_statement':([62,70,171,226,243,263,],[77,77,77,77,77,77,]),'repetition_statement':([62,70,171,226,243,263,],[78,78,78,78,78,78,]),'expression':([62,70,103,109,112,130,137,140,146,171,180,192,194,205,226,232,243,244,261,263,],[79,79,127,135,142,176,184,189,193,79,204,213,215,221,79,241,79,252,265,79,]),'id':([62,70,90,103,109,112,130,137,140,146,152,161,166,171,180,192,194,195,205,226,232,243,244,261,263,],[80,80,115,128,128,128,128,128,128,128,128,128,128,80,128,128,128,128,128,80,128,80,128,128,80,]),'while_statement':([62,70,171,226,243,263,],[86,86,86,86,86,86,]),'for_statement':([62,70,171,226,243,263,],[87,87,87,87,87,87,]),'texp':([62,70,103,109,112,130,137,140,146,171,180,192,194,195,205,226,232,243,244,261,263,],[88,88,88,88,88,88,88,88,88,88,88,88,88,216,88,88,88,88,88,88,88,]),'gexp':([62,70,103,109,112,130,137,140,146,171,180,192,194,195,205,226,232,243,244,261,263,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'mexp':([62,70,103,109,112,130,137,140,146,152,161,171,180,192,194,195,205,226,232,243,244,261,263,],[92,92,92,92,92,92,92,92,92,196,197,92,92,92,92,92,92,92,92,92,92,92,92,]),'term':([62,70,103,109,112,130,137,140,146,152,161,166,171,180,192,194,195,205,226,232,243,244,261,263,],[93,93,93,93,93,93,93,93,93,93,93,198,93,93,93,93,93,93,93,93,93,93,93,93,]),'fact':([62,70,103,109,112,130,137,140,146,152,161,166,171,180,192,194,195,205,226,232,243,244,261,263,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'call_func_exp':([62,70,103,109,112,130,137,140,146,152,161,166,171,180,192,194,195,205,226,232,243,244,261,263,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'cte':([62,70,103,109,112,130,137,140,146,152,161,166,171,180,192,194,195,205,226,232,243,244,261,263,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'add_fake':([68,110,111,131,181,187,201,223,245,254,],[103,137,140,180,205,140,180,232,180,261,]),'id_quad':([80,115,128,],[106,147,174,]),'call_func_era':([81,129,],[107,175,]),'set_id':([81,116,129,],[108,108,108,]),'generate_quad_1':([88,],[113,]),'generate_quad_2':([91,],[117,]),'generate_quad_3':([92,],[118,]),'generate_quad_4':([93,],[119,]),'generate_quad_5':([94,],[120,]),'add_cte_char':([97,],[121,]),'add_cte_float':([98,],[122,]),'add_cte_int':([99,100,],[123,124,]),'start_func':([101,],[125,]),'id1':([108,],[132,]),'verify_dim':([108,],[133,]),'read_args':([110,],[136,]),'write_args':([111,],[138,]),'write_args2':([111,187,],[139,210,]),'op1':([113,],[143,]),'breadcrumb':([114,236,],[146,244,]),'op2':([117,],[148,]),'op3aux':([118,],[151,]),'op3':([118,],[152,]),'op4aux':([119,],[160,]),'op4':([119,],[161,]),'op5aux':([120,],[165,]),'op5':([120,],[166,]),'args':([131,201,],[177,218,]),'args1':([131,201,245,],[178,178,253,]),'write_args1':([139,210,],[186,225,]),'add_cte_string':([141,],[190,]),'add_operator':([144,149,],[192,195,]),'remove_fake':([173,184,189,220,221,241,265,],[200,208,211,230,231,247,267,]),'exp_type':([191,214,252,],[212,227,260,]),'param_check':([204,],[220,]),'read_args1':([208,247,],[222,257,]),'for_id':([215,],[228,]),'do_statement':([227,260,],[234,264,]),'args2':([230,],[237,]),'verify_quad_1':([231,],[240,]),'next_arg':([238,],[245,]),'decision_statement1':([242,],[248,]),'id2':([246,],[255,]),'else_jump':([249,],[258,]),'add_base':([255,],[262,]),'verify_quad_2':([267,],[269,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID main_quad SEMICOLON g_var funcs main','program',7,'p_program','parser_lexer.py',236),
  ('main_quad -> <empty>','main_quad',0,'p_main_quad','parser_lexer.py',244),
  ('main -> MAIN L_P params R_P var_declaration L_B main_start statements R_B','main',9,'p_main','parser_lexer.py',250),
  ('main_start -> <empty>','main_start',0,'p_main_start','parser_lexer.py',267),
  ('type -> INT','type',1,'p_type','parser_lexer.py',272),
  ('type -> FLOAT','type',1,'p_type','parser_lexer.py',273),
  ('type -> CHAR','type',1,'p_type','parser_lexer.py',274),
  ('g_var -> var_declaration','g_var',1,'p_g_var','parser_lexer.py',280),
  ('funcs -> function funcs','funcs',2,'p_funcs','parser_lexer.py',287),
  ('funcs -> empty','funcs',1,'p_funcs','parser_lexer.py',288),
  ('var_declaration -> VAR var1','var_declaration',2,'p_var_declaration','parser_lexer.py',292),
  ('var_declaration -> empty','var_declaration',1,'p_var_declaration','parser_lexer.py',293),
  ('var1 -> var_type dec_id var2 SEMICOLON var4','var1',5,'p_var1','parser_lexer.py',297),
  ('var2 -> COMA dec_id var3','var2',3,'p_var2','parser_lexer.py',301),
  ('var2 -> empty','var2',1,'p_var2','parser_lexer.py',302),
  ('var3 -> var2','var3',1,'p_var3','parser_lexer.py',306),
  ('var4 -> var1','var4',1,'p_var4','parser_lexer.py',310),
  ('var4 -> empty','var4',1,'p_var4','parser_lexer.py',311),
  ('dec_id -> ID add_id dec_id1','dec_id',3,'p_dec_id','parser_lexer.py',315),
  ('dec_id1 -> L_SB CTE_I set_array R_SB dec_id2','dec_id1',5,'p_dec_id1','parser_lexer.py',319),
  ('dec_id1 -> empty','dec_id1',1,'p_dec_id1','parser_lexer.py',320),
  ('dec_id2 -> L_SB CTE_I set_array R_SB','dec_id2',4,'p_dec_id2','parser_lexer.py',324),
  ('dec_id2 -> empty','dec_id2',1,'p_dec_id2','parser_lexer.py',325),
  ('add_id -> <empty>','add_id',0,'p_add_id','parser_lexer.py',329),
  ('set_array -> <empty>','set_array',0,'p_set_array','parser_lexer.py',349),
  ('id -> ID set_id id1','id',3,'p_id','parser_lexer.py',361),
  ('set_id -> <empty>','set_id',0,'p_set_id','parser_lexer.py',364),
  ('id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base','id1',9,'p_id1','parser_lexer.py',370),
  ('id1 -> empty','id1',1,'p_id1','parser_lexer.py',371),
  ('id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB','id2',6,'p_id2','parser_lexer.py',375),
  ('id2 -> empty','id2',1,'p_id2','parser_lexer.py',376),
  ('verify_dim -> <empty>','verify_dim',0,'p_verify_dim','parser_lexer.py',379),
  ('verify_quad_1 -> <empty>','verify_quad_1',0,'p_verify_quad_1','parser_lexer.py',391),
  ('verify_quad_2 -> <empty>','verify_quad_2',0,'p_verify_quad_2','parser_lexer.py',423),
  ('add_base -> <empty>','add_base',0,'p_add_base','parser_lexer.py',469),
  ('var_type -> type','var_type',1,'p_var_type','parser_lexer.py',493),
  ('function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B','function',13,'p_function','parser_lexer.py',497),
  ('register_func -> <empty>','register_func',0,'p_register_func','parser_lexer.py',511),
  ('add_params -> <empty>','add_params',0,'p_add_params','parser_lexer.py',525),
  ('start_func -> <empty>','start_func',0,'p_start_func','parser_lexer.py',531),
  ('func_type -> VOID','func_type',1,'p_func_type','parser_lexer.py',537),
  ('func_type -> type','func_type',1,'p_func_type','parser_lexer.py',538),
  ('params -> var_type param_type dec_id params1','params',4,'p_params','parser_lexer.py',545),
  ('params -> empty','params',1,'p_params','parser_lexer.py',546),
  ('param_type -> <empty>','param_type',0,'p_param_type','parser_lexer.py',550),
  ('params1 -> COMA params','params1',2,'p_params1','parser_lexer.py',557),
  ('params1 -> empty','params1',1,'p_params1','parser_lexer.py',558),
  ('statements -> statement statements','statements',2,'p_statements','parser_lexer.py',562),
  ('statements -> empty','statements',1,'p_statements','parser_lexer.py',563),
  ('statement -> assignation','statement',1,'p_statement','parser_lexer.py',567),
  ('statement -> call_func','statement',1,'p_statement','parser_lexer.py',568),
  ('statement -> return_func','statement',1,'p_statement','parser_lexer.py',569),
  ('statement -> read','statement',1,'p_statement','parser_lexer.py',570),
  ('statement -> write','statement',1,'p_statement','parser_lexer.py',571),
  ('statement -> decision_statement','statement',1,'p_statement','parser_lexer.py',572),
  ('statement -> repetition_statement','statement',1,'p_statement','parser_lexer.py',573),
  ('statement -> expression','statement',1,'p_statement','parser_lexer.py',574),
  ('assignation -> id id_quad EQUAL expression SEMICOLON','assignation',5,'p_assignation','parser_lexer.py',578),
  ('args -> args1','args',1,'p_args','parser_lexer.py',593),
  ('args -> empty','args',1,'p_args','parser_lexer.py',594),
  ('args1 -> add_fake expression param_check remove_fake args2','args1',5,'p_args1','parser_lexer.py',598),
  ('param_check -> <empty>','param_check',0,'p_param_check','parser_lexer.py',602),
  ('args2 -> COMA next_arg args1','args2',3,'p_args2','parser_lexer.py',617),
  ('args2 -> empty','args2',1,'p_args2','parser_lexer.py',618),
  ('next_arg -> <empty>','next_arg',0,'p_next_arg','parser_lexer.py',622),
  ('call_func -> ID call_func_era L_P args R_P SEMICOLON','call_func',6,'p_call_func','parser_lexer.py',628),
  ('call_func_exp -> ID call_func_era L_P args R_P','call_func_exp',5,'p_call_func_exp','parser_lexer.py',639),
  ('call_func_era -> <empty>','call_func_era',0,'p_call_func_era','parser_lexer.py',662),
  ('return_func -> RETURN L_P expression R_P SEMICOLON','return_func',5,'p_return_func','parser_lexer.py',673),
  ('read -> READ L_P read_args R_P SEMICOLON','read',5,'p_read','parser_lexer.py',683),
  ('read_args -> add_fake expression remove_fake read_args1','read_args',4,'p_read_args','parser_lexer.py',692),
  ('read_args1 -> COMA add_fake expression remove_fake read_args1','read_args1',5,'p_read_args1','parser_lexer.py',696),
  ('read_args1 -> empty','read_args1',1,'p_read_args1','parser_lexer.py',697),
  ('write -> PRINT L_P write_args R_P SEMICOLON','write',5,'p_write','parser_lexer.py',701),
  ('write_args -> write_args2 write_args1','write_args',2,'p_write_args','parser_lexer.py',705),
  ('write_args1 -> COMA write_args2 write_args1','write_args1',3,'p_write_args1','parser_lexer.py',709),
  ('write_args1 -> empty','write_args1',1,'p_write_args1','parser_lexer.py',710),
  ('write_args2 -> add_fake expression remove_fake','write_args2',3,'p_write_args2','parser_lexer.py',714),
  ('write_args2 -> CTE_STRING add_cte_string','write_args2',2,'p_write_args2','parser_lexer.py',715),
  ('decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1','decision_statement',9,'p_decision_statement','parser_lexer.py',723),
  ('decision_statement1 -> ELSE else_jump L_B statements R_B','decision_statement1',5,'p_decision_statement1','parser_lexer.py',730),
  ('decision_statement1 -> empty','decision_statement1',1,'p_decision_statement1','parser_lexer.py',731),
  ('exp_type -> <empty>','exp_type',0,'p_exp_type','parser_lexer.py',735),
  ('else_jump -> <empty>','else_jump',0,'p_else_jump','parser_lexer.py',747),
  ('repetition_statement -> while_statement','repetition_statement',1,'p_repetition_statement','parser_lexer.py',756),
  ('repetition_statement -> for_statement','repetition_statement',1,'p_repetition_statement','parser_lexer.py',757),
  ('for_statement -> FOR id id_quad EQUAL expression for_id TO breadcrumb expression exp_type do_statement','for_statement',11,'p_for_statement','parser_lexer.py',761),
  ('for_id -> <empty>','for_id',0,'p_for_id','parser_lexer.py',787),
  ('breadcrumb -> <empty>','breadcrumb',0,'p_breadcrumb','parser_lexer.py',803),
  ('while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement','while_statement',7,'p_while_statement','parser_lexer.py',809),
  ('do_statement -> DO L_B statements R_B','do_statement',4,'p_do_statement','parser_lexer.py',818),
  ('expression -> texp generate_quad_1 op1','expression',3,'p_expression','parser_lexer.py',822),
  ('texp -> gexp generate_quad_2 op2','texp',3,'p_texp','parser_lexer.py',826),
  ('gexp -> mexp generate_quad_3 op3aux','gexp',3,'p_gexp','parser_lexer.py',830),
  ('mexp -> term generate_quad_4 op4aux','mexp',3,'p_mexp','parser_lexer.py',834),
  ('term -> fact generate_quad_5 op5aux','term',3,'p_term','parser_lexer.py',838),
  ('generate_quad_1 -> <empty>','generate_quad_1',0,'p_generate_quad_1','parser_lexer.py',842),
  ('generate_quad_2 -> <empty>','generate_quad_2',0,'p_generate_quad_2','parser_lexer.py',849),
  ('generate_quad_3 -> <empty>','generate_quad_3',0,'p_generate_quad_3','parser_lexer.py',856),
  ('generate_quad_4 -> <empty>','generate_quad_4',0,'p_generate_quad_4','parser_lexer.py',863),
  ('generate_quad_5 -> <empty>','generate_quad_5',0,'p_generate_quad_5','parser_lexer.py',870),
  ('fact -> id id_quad','fact',2,'p_fact','parser_lexer.py',877),
  ('fact -> call_func_exp','fact',1,'p_fact','parser_lexer.py',878),
  ('fact -> L_P add_fake expression R_P remove_fake','fact',5,'p_fact','parser_lexer.py',879),
  ('fact -> cte','fact',1,'p_fact','parser_lexer.py',880),
  ('add_fake -> <empty>','add_fake',0,'p_add_fake','parser_lexer.py',884),
  ('remove_fake -> <empty>','remove_fake',0,'p_remove_fake','parser_lexer.py',890),
  ('id_quad -> <empty>','id_quad',0,'p_id_quad','parser_lexer.py',897),
  ('cte -> CTE_CHAR add_cte_char','cte',2,'p_cte','parser_lexer.py',917),
  ('cte -> CTE_F add_cte_float','cte',2,'p_cte','parser_lexer.py',918),
  ('cte -> CTE_I add_cte_int','cte',2,'p_cte','parser_lexer.py',919),
  ('cte -> CTE_NEG_I add_cte_int','cte',2,'p_cte','parser_lexer.py',920),
  ('add_cte_int -> <empty>','add_cte_int',0,'p_add_cte_int','parser_lexer.py',924),
  ('add_cte_float -> <empty>','add_cte_float',0,'p_add_cte_float','parser_lexer.py',939),
  ('add_cte_char -> <empty>','add_cte_char',0,'p_add_cte_char','parser_lexer.py',954),
  ('add_cte_string -> <empty>','add_cte_string',0,'p_add_cte_string','parser_lexer.py',969),
  ('add_operator -> <empty>','add_operator',0,'p_add_operator','parser_lexer.py',984),
  ('op1 -> OR add_operator expression','op1',3,'p_op1','parser_lexer.py',990),
  ('op1 -> empty','op1',1,'p_op1','parser_lexer.py',991),
  ('op2 -> AND add_operator texp','op2',3,'p_op2','parser_lexer.py',995),
  ('op2 -> empty','op2',1,'p_op2','parser_lexer.py',996),
  ('op3 -> LESSTHAN','op3',1,'p_op3','parser_lexer.py',1000),
  ('op3 -> LESSTHANEQ','op3',1,'p_op3','parser_lexer.py',1001),
  ('op3 -> GREATERTHAN','op3',1,'p_op3','parser_lexer.py',1002),
  ('op3 -> GREATERTHANEQ','op3',1,'p_op3','parser_lexer.py',1003),
  ('op3 -> EQ','op3',1,'p_op3','parser_lexer.py',1004),
  ('op3 -> DIFERENT','op3',1,'p_op3','parser_lexer.py',1005),
  ('op3aux -> op3 mexp','op3aux',2,'p_op3aux','parser_lexer.py',1011),
  ('op3aux -> empty','op3aux',1,'p_op3aux','parser_lexer.py',1012),
  ('op4 -> PLUS','op4',1,'p_op4','parser_lexer.py',1016),
  ('op4 -> MINUS','op4',1,'p_op4','parser_lexer.py',1017),
  ('op4aux -> op4 mexp','op4aux',2,'p_op4aux','parser_lexer.py',1023),
  ('op4aux -> empty','op4aux',1,'p_op4aux','parser_lexer.py',1024),
  ('op5 -> MULT','op5',1,'p_op5','parser_lexer.py',1028),
  ('op5 -> DIV','op5',1,'p_op5','parser_lexer.py',1029),
  ('op5 -> MOD','op5',1,'p_op5','parser_lexer.py',1030),
  ('op5aux -> op5 term','op5aux',2,'p_op5aux','parser_lexer.py',1036),
  ('op5aux -> empty','op5aux',1,'p_op5aux','parser_lexer.py',1037),
  ('empty -> <empty>','empty',0,'p_empty','parser_lexer.py',1042),
]
