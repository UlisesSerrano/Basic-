
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COMA CTE_CHAR CTE_F CTE_I CTE_STRING DIFERENT DIV DO ELSE EQ EQUAL FLOAT FOR FUNC GREATERTHAN GREATERTHANEQ ID IF INT LESSTHAN LESSTHANEQ L_B L_P L_SB MAIN MINUS MOD MULT OR PLUS PRINT PROGRAM READ RETURN R_B R_P R_SB SEMICOLON TO VAR VOID WHILEprogram : PROGRAM ID SEMICOLON g_var funcs mainmain : MAIN L_P params R_P var_declaration L_B statements R_Btype : INT\n            | FLOAT\n            | CHARg_var : var_declarationfuncs : function funcs\n            | emptyvar_declaration : VAR var1\n                        | emptyvar1 : var_type dec_id var2 SEMICOLON var4var2 : COMA dec_id var3\n            | emptyvar3 : var2var4 : var1\n            | emptydec_id : ID dec_id1dec_id1 : L_SB CTE_I R_SB dec_id2\n            | emptydec_id2 : L_SB CTE_I R_SB\n        | emptyid : ID id1id1 : L_SB expression R_SB id2\n            | emptyid2 : L_SB expression R_SB\n        | emptyvar_type : typefunction : FUNC func_type ID register_func L_P params R_P var_declaration L_B statements R_Bregister_func : func_type : VOID\n                | typeparams : var_type param_type dec_id params1\n            | emptyparam_type : params1 : COMA params\n                | emptystatements : statement statements\n                | emptystatement : assignation\n                | call_func\n                | return_func\n                | read\n                | write\n                | decision_statement\n                | repetition_statement\n                | expressionassignation : id id_quad EQUAL expression SEMICOLONargs : args1\n            | emptyargs1 : expression args2args2 : COMA args1\n            | emptycall_func :  ID L_P args R_P SEMICOLONcall_func_exp :  ID L_P args R_Preturn_func : RETURN L_P expression R_P SEMICOLONread : READ L_P read_args R_P SEMICOLONread_args : expression read_args1read_args1 : COMA expression read_args1\n                | emptywrite : PRINT L_P write_args R_P SEMICOLONwrite_args : write_args2 write_args1write_args1 : COMA write_args2 write_args1\n                    | emptywrite_args2 : expression\n                | CTE_STRINGdecision_statement : IF L_P expression R_P L_B statements R_B decision_statement1decision_statement1 : ELSE L_B statements R_B\n                            | emptyrepetition_statement : while_statement\n                            | for_statementfor_statement : FOR id EQUAL expression TO expression do_statementwhile_statement : WHILE L_P expression R_P do_statementdo_statement :  DO L_B statements R_Bexpression : texp generate_quad op1texp : gexp generate_quad op2gexp : mexp generate_quad op3auxmexp : term generate_quad op4auxterm : fact generate_quad op5auxgenerate_quad : fact : id id_quad\n            | call_func_exp\n            | L_P expression R_P\n            | cte\n        id_quad :\n    cte : CTE_F add_cte_float\n            | CTE_I add_cte_int\n            | CTE_CHAR add_cte_charadd_cte_int : add_cte_float : add_cte_char : op1 : OR expression\n            | emptyop2 : AND texp\n            | emptyop3 : LESSTHAN\n            | LESSTHANEQ\xa0\n            | GREATERTHAN\n            | GREATERTHANEQ\n            | EQ\n            | DIFERENTop3aux : op3 mexp\n            | emptyop4 : PLUS\n            | MINUSop4aux : op4 mexp\n            | emptyop5 : MULT\n        | DIV\n        | MODop5aux : op5 term\n            | empty\n        empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,19,101,],[0,-1,-2,]),'ID':([2,14,15,16,17,18,22,23,24,30,36,43,57,63,65,67,68,69,70,71,72,73,74,75,76,81,82,83,85,86,87,88,89,90,91,92,93,94,99,100,103,104,105,106,107,108,109,110,111,112,113,116,117,118,119,120,121,122,123,124,125,126,127,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,172,174,176,180,184,187,190,191,192,193,195,196,197,199,200,201,202,203,205,207,208,210,215,217,218,220,221,223,224,225,227,],[3,26,-27,-3,-4,-5,28,-30,-31,26,-34,26,76,100,76,-39,-40,-41,-42,-43,-44,-45,-46,-84,-112,-69,-70,-79,115,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,100,-22,100,-24,100,100,100,100,-112,100,-112,-112,-112,-112,-85,-86,-87,76,-82,-80,100,100,-74,100,-92,100,-75,100,-94,-76,100,-102,-95,-96,-97,-98,-99,-100,-77,100,-106,-103,-104,-78,100,-111,-107,-108,-109,-54,100,-112,100,100,-91,-93,-101,-105,-110,-54,-47,-53,100,-23,-26,-55,-56,-60,76,-72,100,76,-25,-112,-71,-66,-68,-73,76,-67,]),'SEMICOLON':([3,25,26,29,31,32,34,40,48,49,50,55,56,83,86,87,88,89,90,91,92,93,94,97,99,100,105,107,112,116,117,118,119,120,121,122,124,125,141,143,146,148,149,151,158,160,163,165,171,172,176,177,178,182,187,190,191,192,193,195,200,201,217,],[4,-112,-112,39,-13,-17,-19,-112,-12,-14,-112,-18,-21,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-20,-84,-112,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,-82,-80,-74,-92,-75,-94,-76,-102,-77,-106,-78,-111,196,197,-112,202,203,205,-91,-93,-101,-105,-110,-54,-23,-26,-25,]),'VAR':([4,42,61,],[7,7,7,]),'FUNC':([4,5,6,8,10,13,39,45,46,47,194,],[-112,12,-6,-10,12,-9,-112,-11,-15,-16,-28,]),'MAIN':([4,5,6,8,9,10,11,13,21,39,45,46,47,194,],[-112,-112,-6,-10,20,-112,-8,-9,-7,-112,-11,-15,-16,-28,]),'INT':([7,12,27,39,44,59,],[16,16,16,16,16,16,]),'FLOAT':([7,12,27,39,44,59,],[17,17,17,17,17,17,]),'CHAR':([7,12,27,39,44,59,],[18,18,18,18,18,18,]),'L_B':([8,13,39,42,45,46,47,51,61,96,186,209,222,],[-10,-9,-112,-112,-11,-15,-16,57,-112,123,207,215,225,]),'VOID':([12,],[23,]),'L_P':([20,28,38,57,63,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,94,99,100,103,104,105,106,107,108,109,110,111,112,113,116,117,118,119,120,121,122,123,124,125,126,127,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,172,174,176,180,184,187,190,191,192,193,195,196,197,199,200,201,202,203,205,207,208,210,215,217,218,220,221,223,224,225,227,],[27,-29,44,63,63,63,-39,-40,-41,-42,-43,-44,-45,-46,-84,104,108,109,110,111,-69,-70,-79,113,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,126,-80,63,-22,63,-24,63,63,63,63,-112,63,-112,-112,-112,-112,-85,-86,-87,63,-82,-80,63,63,-74,63,-92,63,-75,63,-94,-76,63,-102,-95,-96,-97,-98,-99,-100,-77,63,-106,-103,-104,-78,63,-111,-107,-108,-109,-54,63,-112,63,63,-91,-93,-101,-105,-110,-54,-47,-53,63,-23,-26,-55,-56,-60,63,-72,63,63,-25,-112,-71,-66,-68,-73,63,-67,]),'COMA':([25,26,32,34,40,50,52,55,56,83,86,87,88,89,90,91,92,93,94,97,99,100,105,107,112,116,117,118,119,120,121,122,124,125,131,135,137,138,139,141,143,146,148,149,151,158,160,163,165,176,187,190,191,192,193,195,200,201,204,206,217,],[30,-112,-17,-19,30,-112,59,-18,-21,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-20,-84,-112,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,-82,-80,174,180,184,-64,-65,-74,-92,-75,-94,-76,-102,-77,-106,-78,-111,-112,-91,-93,-101,-105,-110,-54,-23,-26,180,184,-25,]),'L_SB':([26,50,76,100,115,176,],[33,54,106,106,106,199,]),'R_P':([26,27,32,34,35,37,44,50,52,53,55,56,58,59,60,83,86,87,88,89,90,91,92,93,94,95,97,98,99,100,104,105,107,112,116,117,118,119,120,121,122,124,125,126,128,129,130,131,133,134,135,136,137,138,139,140,141,143,144,146,148,149,151,158,160,163,165,170,173,175,176,179,181,183,185,187,190,191,192,193,195,198,200,201,204,206,212,213,217,],[-112,-112,-17,-19,42,-33,-112,-112,-112,61,-18,-21,-32,-112,-36,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-35,-20,124,-84,-112,-112,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,-82,-80,-112,172,-48,-49,-112,177,178,-112,182,-112,-64,-65,186,-74,-92,188,-75,-94,-76,-102,-77,-106,-78,-111,195,-50,-52,-112,-57,-59,-61,-63,-91,-93,-101,-105,-110,-54,-51,-23,-26,-112,-112,-58,-62,-25,]),'CTE_I':([33,54,57,63,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,103,104,105,106,107,108,109,110,111,112,113,116,117,118,119,120,121,122,123,124,125,126,127,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,172,174,176,180,184,187,190,191,192,193,195,196,197,199,200,201,202,203,205,207,208,210,215,217,218,220,221,223,224,225,227,],[41,62,93,93,93,-39,-40,-41,-42,-43,-44,-45,-46,-84,-112,-69,-70,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,93,-22,93,-24,93,93,93,93,-112,93,-112,-112,-112,-112,-85,-86,-87,93,-82,-80,93,93,-74,93,-92,93,-75,93,-94,-76,93,-102,-95,-96,-97,-98,-99,-100,-77,93,-106,-103,-104,-78,93,-111,-107,-108,-109,-54,93,-112,93,93,-91,-93,-101,-105,-110,-54,-47,-53,93,-23,-26,-55,-56,-60,93,-72,93,93,-25,-112,-71,-66,-68,-73,93,-67,]),'R_SB':([41,62,83,86,87,88,89,90,91,92,93,94,99,100,105,107,112,116,117,118,119,120,121,122,124,125,132,141,143,146,148,149,151,158,160,163,165,176,187,190,191,192,193,195,200,201,211,217,],[50,97,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,-82,-80,176,-74,-92,-75,-94,-76,-102,-77,-106,-78,-111,-112,-91,-93,-101,-105,-110,-54,-23,-26,217,-25,]),'R_B':([57,64,65,66,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,102,103,105,107,112,116,117,118,119,120,121,122,123,124,125,141,143,146,148,149,151,158,160,163,165,169,172,176,187,190,191,192,193,195,196,197,200,201,202,203,205,207,208,214,215,217,218,219,220,221,223,224,225,226,227,],[-112,101,-112,-38,-39,-40,-41,-42,-43,-44,-45,-46,-84,-112,-69,-70,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-37,-80,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,-112,-82,-80,-74,-92,-75,-94,-76,-102,-77,-106,-78,-111,194,-54,-112,-91,-93,-101,-105,-110,-54,-47,-53,-23,-26,-55,-56,-60,-112,-72,218,-112,-25,-112,224,-71,-66,-68,-73,-112,227,-67,]),'RETURN':([57,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,103,105,107,112,116,117,118,119,120,121,122,123,124,125,141,143,146,148,149,151,158,160,163,165,172,176,187,190,191,192,193,195,196,197,200,201,202,203,205,207,208,215,217,218,220,221,223,224,225,227,],[77,77,-39,-40,-41,-42,-43,-44,-45,-46,-84,-112,-69,-70,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,77,-82,-80,-74,-92,-75,-94,-76,-102,-77,-106,-78,-111,-54,-112,-91,-93,-101,-105,-110,-54,-47,-53,-23,-26,-55,-56,-60,77,-72,77,-25,-112,-71,-66,-68,-73,77,-67,]),'READ':([57,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,103,105,107,112,116,117,118,119,120,121,122,123,124,125,141,143,146,148,149,151,158,160,163,165,172,176,187,190,191,192,193,195,196,197,200,201,202,203,205,207,208,215,217,218,220,221,223,224,225,227,],[78,78,-39,-40,-41,-42,-43,-44,-45,-46,-84,-112,-69,-70,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,78,-82,-80,-74,-92,-75,-94,-76,-102,-77,-106,-78,-111,-54,-112,-91,-93,-101,-105,-110,-54,-47,-53,-23,-26,-55,-56,-60,78,-72,78,-25,-112,-71,-66,-68,-73,78,-67,]),'PRINT':([57,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,103,105,107,112,116,117,118,119,120,121,122,123,124,125,141,143,146,148,149,151,158,160,163,165,172,176,187,190,191,192,193,195,196,197,200,201,202,203,205,207,208,215,217,218,220,221,223,224,225,227,],[79,79,-39,-40,-41,-42,-43,-44,-45,-46,-84,-112,-69,-70,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,79,-82,-80,-74,-92,-75,-94,-76,-102,-77,-106,-78,-111,-54,-112,-91,-93,-101,-105,-110,-54,-47,-53,-23,-26,-55,-56,-60,79,-72,79,-25,-112,-71,-66,-68,-73,79,-67,]),'IF':([57,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,103,105,107,112,116,117,118,119,120,121,122,123,124,125,141,143,146,148,149,151,158,160,163,165,172,176,187,190,191,192,193,195,196,197,200,201,202,203,205,207,208,215,217,218,220,221,223,224,225,227,],[80,80,-39,-40,-41,-42,-43,-44,-45,-46,-84,-112,-69,-70,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,80,-82,-80,-74,-92,-75,-94,-76,-102,-77,-106,-78,-111,-54,-112,-91,-93,-101,-105,-110,-54,-47,-53,-23,-26,-55,-56,-60,80,-72,80,-25,-112,-71,-66,-68,-73,80,-67,]),'WHILE':([57,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,103,105,107,112,116,117,118,119,120,121,122,123,124,125,141,143,146,148,149,151,158,160,163,165,172,176,187,190,191,192,193,195,196,197,200,201,202,203,205,207,208,215,217,218,220,221,223,224,225,227,],[84,84,-39,-40,-41,-42,-43,-44,-45,-46,-84,-112,-69,-70,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,84,-82,-80,-74,-92,-75,-94,-76,-102,-77,-106,-78,-111,-54,-112,-91,-93,-101,-105,-110,-54,-47,-53,-23,-26,-55,-56,-60,84,-72,84,-25,-112,-71,-66,-68,-73,84,-67,]),'FOR':([57,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,103,105,107,112,116,117,118,119,120,121,122,123,124,125,141,143,146,148,149,151,158,160,163,165,172,176,187,190,191,192,193,195,196,197,200,201,202,203,205,207,208,215,217,218,220,221,223,224,225,227,],[85,85,-39,-40,-41,-42,-43,-44,-45,-46,-84,-112,-69,-70,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,85,-82,-80,-74,-92,-75,-94,-76,-102,-77,-106,-78,-111,-54,-112,-91,-93,-101,-105,-110,-54,-47,-53,-23,-26,-55,-56,-60,85,-72,85,-25,-112,-71,-66,-68,-73,85,-67,]),'CTE_F':([57,63,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,103,104,105,106,107,108,109,110,111,112,113,116,117,118,119,120,121,122,123,124,125,126,127,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,172,174,176,180,184,187,190,191,192,193,195,196,197,199,200,201,202,203,205,207,208,210,215,217,218,220,221,223,224,225,227,],[92,92,92,-39,-40,-41,-42,-43,-44,-45,-46,-84,-112,-69,-70,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,92,-22,92,-24,92,92,92,92,-112,92,-112,-112,-112,-112,-85,-86,-87,92,-82,-80,92,92,-74,92,-92,92,-75,92,-94,-76,92,-102,-95,-96,-97,-98,-99,-100,-77,92,-106,-103,-104,-78,92,-111,-107,-108,-109,-54,92,-112,92,92,-91,-93,-101,-105,-110,-54,-47,-53,92,-23,-26,-55,-56,-60,92,-72,92,92,-25,-112,-71,-66,-68,-73,92,-67,]),'CTE_CHAR':([57,63,65,67,68,69,70,71,72,73,74,75,76,81,82,83,86,87,88,89,90,91,92,93,94,99,100,103,104,105,106,107,108,109,110,111,112,113,116,117,118,119,120,121,122,123,124,125,126,127,141,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,172,174,176,180,184,187,190,191,192,193,195,196,197,199,200,201,202,203,205,207,208,210,215,217,218,220,221,223,224,225,227,],[94,94,94,-39,-40,-41,-42,-43,-44,-45,-46,-84,-112,-69,-70,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,94,-22,94,-24,94,94,94,94,-112,94,-112,-112,-112,-112,-85,-86,-87,94,-82,-80,94,94,-74,94,-92,94,-75,94,-94,-76,94,-102,-95,-96,-97,-98,-99,-100,-77,94,-106,-103,-104,-78,94,-111,-107,-108,-109,-54,94,-112,94,94,-91,-93,-101,-105,-110,-54,-47,-53,94,-23,-26,-55,-56,-60,94,-72,94,94,-25,-112,-71,-66,-68,-73,94,-67,]),'EQUAL':([75,76,103,105,107,114,115,176,200,201,217,],[-84,-112,127,-22,-24,145,-112,-112,-23,-26,-25,]),'MULT':([75,76,89,90,91,92,93,94,99,100,103,105,107,119,120,121,122,124,125,172,176,195,200,201,217,],[-84,-112,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,166,-85,-86,-87,-82,-80,-54,-112,-54,-23,-26,-25,]),'DIV':([75,76,89,90,91,92,93,94,99,100,103,105,107,119,120,121,122,124,125,172,176,195,200,201,217,],[-84,-112,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,167,-85,-86,-87,-82,-80,-54,-112,-54,-23,-26,-25,]),'MOD':([75,76,89,90,91,92,93,94,99,100,103,105,107,119,120,121,122,124,125,172,176,195,200,201,217,],[-84,-112,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,168,-85,-86,-87,-82,-80,-54,-112,-54,-23,-26,-25,]),'PLUS':([75,76,88,89,90,91,92,93,94,99,100,103,105,107,118,119,120,121,122,124,125,163,165,172,176,193,195,200,201,217,],[-84,-112,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,161,-112,-85,-86,-87,-82,-80,-78,-111,-54,-112,-110,-54,-23,-26,-25,]),'MINUS':([75,76,88,89,90,91,92,93,94,99,100,103,105,107,118,119,120,121,122,124,125,163,165,172,176,193,195,200,201,217,],[-84,-112,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,162,-112,-85,-86,-87,-82,-80,-78,-111,-54,-112,-110,-54,-23,-26,-25,]),'LESSTHAN':([75,76,87,88,89,90,91,92,93,94,99,100,103,105,107,117,118,119,120,121,122,124,125,158,160,163,165,172,176,192,193,195,200,201,217,],[-84,-112,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,152,-112,-112,-85,-86,-87,-82,-80,-77,-106,-78,-111,-54,-112,-105,-110,-54,-23,-26,-25,]),'LESSTHANEQ':([75,76,87,88,89,90,91,92,93,94,99,100,103,105,107,117,118,119,120,121,122,124,125,158,160,163,165,172,176,192,193,195,200,201,217,],[-84,-112,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,153,-112,-112,-85,-86,-87,-82,-80,-77,-106,-78,-111,-54,-112,-105,-110,-54,-23,-26,-25,]),'GREATERTHAN':([75,76,87,88,89,90,91,92,93,94,99,100,103,105,107,117,118,119,120,121,122,124,125,158,160,163,165,172,176,192,193,195,200,201,217,],[-84,-112,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,154,-112,-112,-85,-86,-87,-82,-80,-77,-106,-78,-111,-54,-112,-105,-110,-54,-23,-26,-25,]),'GREATERTHANEQ':([75,76,87,88,89,90,91,92,93,94,99,100,103,105,107,117,118,119,120,121,122,124,125,158,160,163,165,172,176,192,193,195,200,201,217,],[-84,-112,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,155,-112,-112,-85,-86,-87,-82,-80,-77,-106,-78,-111,-54,-112,-105,-110,-54,-23,-26,-25,]),'EQ':([75,76,87,88,89,90,91,92,93,94,99,100,103,105,107,117,118,119,120,121,122,124,125,158,160,163,165,172,176,192,193,195,200,201,217,],[-84,-112,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,156,-112,-112,-85,-86,-87,-82,-80,-77,-106,-78,-111,-54,-112,-105,-110,-54,-23,-26,-25,]),'DIFERENT':([75,76,87,88,89,90,91,92,93,94,99,100,103,105,107,117,118,119,120,121,122,124,125,158,160,163,165,172,176,192,193,195,200,201,217,],[-84,-112,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,157,-112,-112,-85,-86,-87,-82,-80,-77,-106,-78,-111,-54,-112,-105,-110,-54,-23,-26,-25,]),'AND':([75,76,86,87,88,89,90,91,92,93,94,99,100,103,105,107,116,117,118,119,120,121,122,124,125,149,151,158,160,163,165,172,176,191,192,193,195,200,201,217,],[-84,-112,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,147,-112,-112,-112,-85,-86,-87,-82,-80,-76,-102,-77,-106,-78,-111,-54,-112,-101,-105,-110,-54,-23,-26,-25,]),'OR':([75,76,83,86,87,88,89,90,91,92,93,94,99,100,103,105,107,112,116,117,118,119,120,121,122,124,125,146,148,149,151,158,160,163,165,172,176,190,191,192,193,195,200,201,217,],[-84,-112,-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-80,-22,-24,142,-112,-112,-112,-112,-85,-86,-87,-82,-80,-75,-94,-76,-102,-77,-106,-78,-111,-54,-112,-93,-101,-105,-110,-54,-23,-26,-25,]),'TO':([83,86,87,88,89,90,91,92,93,94,99,100,105,107,112,116,117,118,119,120,121,122,124,125,141,143,146,148,149,151,158,160,163,165,176,187,189,190,191,192,193,195,200,201,217,],[-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,-82,-80,-74,-92,-75,-94,-76,-102,-77,-106,-78,-111,-112,-91,210,-93,-101,-105,-110,-54,-23,-26,-25,]),'DO':([83,86,87,88,89,90,91,92,93,94,99,100,105,107,112,116,117,118,119,120,121,122,124,125,141,143,146,148,149,151,158,160,163,165,176,187,188,190,191,192,193,195,200,201,216,217,],[-79,-79,-79,-79,-79,-81,-83,-89,-88,-90,-84,-112,-22,-24,-112,-112,-112,-112,-112,-85,-86,-87,-82,-80,-74,-92,-75,-94,-76,-102,-77,-106,-78,-111,-112,-91,209,-93,-101,-105,-110,-54,-23,-26,209,-25,]),'CTE_STRING':([110,184,],[139,139,]),'ELSE':([218,],[222,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'g_var':([4,],[5,]),'var_declaration':([4,42,61,],[6,51,96,]),'empty':([4,5,10,25,26,27,39,40,42,44,50,52,57,59,61,65,76,100,104,112,115,116,117,118,119,123,126,131,135,137,176,204,206,207,215,218,225,],[8,11,11,31,34,37,47,31,8,37,56,60,66,37,8,66,107,107,130,143,107,148,151,160,165,66,130,175,181,185,201,181,185,66,66,223,66,]),'funcs':([5,10,],[9,21,]),'function':([5,10,],[10,10,]),'var1':([7,39,],[13,46,]),'var_type':([7,27,39,44,59,],[14,36,14,36,36,]),'type':([7,12,27,39,44,59,],[15,24,15,15,15,15,]),'main':([9,],[19,]),'func_type':([12,],[22,]),'dec_id':([14,30,43,],[25,40,52,]),'var2':([25,40,],[29,49,]),'dec_id1':([26,],[32,]),'params':([27,44,59,],[35,53,95,]),'register_func':([28,],[38,]),'param_type':([36,],[43,]),'var4':([39,],[45,]),'var3':([40,],[48,]),'dec_id2':([50,],[55,]),'params1':([52,],[58,]),'statements':([57,65,123,207,215,225,],[64,102,169,214,219,226,]),'statement':([57,65,123,207,215,225,],[65,65,65,65,65,65,]),'assignation':([57,65,123,207,215,225,],[67,67,67,67,67,67,]),'call_func':([57,65,123,207,215,225,],[68,68,68,68,68,68,]),'return_func':([57,65,123,207,215,225,],[69,69,69,69,69,69,]),'read':([57,65,123,207,215,225,],[70,70,70,70,70,70,]),'write':([57,65,123,207,215,225,],[71,71,71,71,71,71,]),'decision_statement':([57,65,123,207,215,225,],[72,72,72,72,72,72,]),'repetition_statement':([57,65,123,207,215,225,],[73,73,73,73,73,73,]),'expression':([57,63,65,104,106,108,109,110,111,113,123,126,127,142,145,174,180,184,199,207,210,215,225,],[74,98,74,131,132,133,135,138,140,144,74,131,171,187,189,131,204,138,211,74,216,74,74,]),'id':([57,63,65,85,104,106,108,109,110,111,113,123,126,127,142,145,147,150,159,164,174,180,184,199,207,210,215,225,],[75,99,75,114,99,99,99,99,99,99,99,75,99,99,99,99,99,99,99,99,99,99,99,99,75,99,75,75,]),'while_statement':([57,65,123,207,215,225,],[81,81,81,81,81,81,]),'for_statement':([57,65,123,207,215,225,],[82,82,82,82,82,82,]),'texp':([57,63,65,104,106,108,109,110,111,113,123,126,127,142,145,147,174,180,184,199,207,210,215,225,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,190,83,83,83,83,83,83,83,83,]),'gexp':([57,63,65,104,106,108,109,110,111,113,123,126,127,142,145,147,174,180,184,199,207,210,215,225,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'mexp':([57,63,65,104,106,108,109,110,111,113,123,126,127,142,145,147,150,159,174,180,184,199,207,210,215,225,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,191,192,87,87,87,87,87,87,87,87,]),'term':([57,63,65,104,106,108,109,110,111,113,123,126,127,142,145,147,150,159,164,174,180,184,199,207,210,215,225,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,193,88,88,88,88,88,88,88,88,]),'fact':([57,63,65,104,106,108,109,110,111,113,123,126,127,142,145,147,150,159,164,174,180,184,199,207,210,215,225,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'call_func_exp':([57,63,65,104,106,108,109,110,111,113,123,126,127,142,145,147,150,159,164,174,180,184,199,207,210,215,225,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'cte':([57,63,65,104,106,108,109,110,111,113,123,126,127,142,145,147,150,159,164,174,180,184,199,207,210,215,225,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'id_quad':([75,99,],[103,125,]),'id1':([76,100,115,],[105,105,105,]),'generate_quad':([83,86,87,88,89,],[112,116,117,118,119,]),'add_cte_float':([92,],[120,]),'add_cte_int':([93,],[121,]),'add_cte_char':([94,],[122,]),'args':([104,126,],[128,170,]),'args1':([104,126,174,],[129,129,198,]),'read_args':([109,],[134,]),'write_args':([110,],[136,]),'write_args2':([110,184,],[137,206,]),'op1':([112,],[141,]),'op2':([116,],[146,]),'op3aux':([117,],[149,]),'op3':([117,],[150,]),'op4aux':([118,],[158,]),'op4':([118,],[159,]),'op5aux':([119,],[163,]),'op5':([119,],[164,]),'args2':([131,],[173,]),'read_args1':([135,204,],[179,212,]),'write_args1':([137,206,],[183,213,]),'id2':([176,],[200,]),'do_statement':([188,216,],[208,220,]),'decision_statement1':([218,],[221,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON g_var funcs main','program',6,'p_program','parser-lexer.py',214),
  ('main -> MAIN L_P params R_P var_declaration L_B statements R_B','main',8,'p_main','parser-lexer.py',221),
  ('type -> INT','type',1,'p_type','parser-lexer.py',237),
  ('type -> FLOAT','type',1,'p_type','parser-lexer.py',238),
  ('type -> CHAR','type',1,'p_type','parser-lexer.py',239),
  ('g_var -> var_declaration','g_var',1,'p_g_var','parser-lexer.py',245),
  ('funcs -> function funcs','funcs',2,'p_funcs','parser-lexer.py',253),
  ('funcs -> empty','funcs',1,'p_funcs','parser-lexer.py',254),
  ('var_declaration -> VAR var1','var_declaration',2,'p_var_declaration','parser-lexer.py',258),
  ('var_declaration -> empty','var_declaration',1,'p_var_declaration','parser-lexer.py',259),
  ('var1 -> var_type dec_id var2 SEMICOLON var4','var1',5,'p_var1','parser-lexer.py',263),
  ('var2 -> COMA dec_id var3','var2',3,'p_var2','parser-lexer.py',267),
  ('var2 -> empty','var2',1,'p_var2','parser-lexer.py',268),
  ('var3 -> var2','var3',1,'p_var3','parser-lexer.py',272),
  ('var4 -> var1','var4',1,'p_var4','parser-lexer.py',276),
  ('var4 -> empty','var4',1,'p_var4','parser-lexer.py',277),
  ('dec_id -> ID dec_id1','dec_id',2,'p_dec_id','parser-lexer.py',281),
  ('dec_id1 -> L_SB CTE_I R_SB dec_id2','dec_id1',4,'p_dec_id1','parser-lexer.py',303),
  ('dec_id1 -> empty','dec_id1',1,'p_dec_id1','parser-lexer.py',304),
  ('dec_id2 -> L_SB CTE_I R_SB','dec_id2',3,'p_dec_id2','parser-lexer.py',308),
  ('dec_id2 -> empty','dec_id2',1,'p_dec_id2','parser-lexer.py',309),
  ('id -> ID id1','id',2,'p_id','parser-lexer.py',313),
  ('id1 -> L_SB expression R_SB id2','id1',4,'p_id1','parser-lexer.py',319),
  ('id1 -> empty','id1',1,'p_id1','parser-lexer.py',320),
  ('id2 -> L_SB expression R_SB','id2',3,'p_id2','parser-lexer.py',324),
  ('id2 -> empty','id2',1,'p_id2','parser-lexer.py',325),
  ('var_type -> type','var_type',1,'p_var_type','parser-lexer.py',329),
  ('function -> FUNC func_type ID register_func L_P params R_P var_declaration L_B statements R_B','function',11,'p_function','parser-lexer.py',333),
  ('register_func -> <empty>','register_func',0,'p_register_func','parser-lexer.py',344),
  ('func_type -> VOID','func_type',1,'p_func_type','parser-lexer.py',354),
  ('func_type -> type','func_type',1,'p_func_type','parser-lexer.py',355),
  ('params -> var_type param_type dec_id params1','params',4,'p_params','parser-lexer.py',362),
  ('params -> empty','params',1,'p_params','parser-lexer.py',363),
  ('param_type -> <empty>','param_type',0,'p_param_type','parser-lexer.py',367),
  ('params1 -> COMA params','params1',2,'p_params1','parser-lexer.py',374),
  ('params1 -> empty','params1',1,'p_params1','parser-lexer.py',375),
  ('statements -> statement statements','statements',2,'p_statements','parser-lexer.py',379),
  ('statements -> empty','statements',1,'p_statements','parser-lexer.py',380),
  ('statement -> assignation','statement',1,'p_statement','parser-lexer.py',384),
  ('statement -> call_func','statement',1,'p_statement','parser-lexer.py',385),
  ('statement -> return_func','statement',1,'p_statement','parser-lexer.py',386),
  ('statement -> read','statement',1,'p_statement','parser-lexer.py',387),
  ('statement -> write','statement',1,'p_statement','parser-lexer.py',388),
  ('statement -> decision_statement','statement',1,'p_statement','parser-lexer.py',389),
  ('statement -> repetition_statement','statement',1,'p_statement','parser-lexer.py',390),
  ('statement -> expression','statement',1,'p_statement','parser-lexer.py',391),
  ('assignation -> id id_quad EQUAL expression SEMICOLON','assignation',5,'p_assignation','parser-lexer.py',395),
  ('args -> args1','args',1,'p_args','parser-lexer.py',412),
  ('args -> empty','args',1,'p_args','parser-lexer.py',413),
  ('args1 -> expression args2','args1',2,'p_args1','parser-lexer.py',417),
  ('args2 -> COMA args1','args2',2,'p_args2','parser-lexer.py',421),
  ('args2 -> empty','args2',1,'p_args2','parser-lexer.py',422),
  ('call_func -> ID L_P args R_P SEMICOLON','call_func',5,'p_call_func','parser-lexer.py',426),
  ('call_func_exp -> ID L_P args R_P','call_func_exp',4,'p_call_func_exp','parser-lexer.py',430),
  ('return_func -> RETURN L_P expression R_P SEMICOLON','return_func',5,'p_return_func','parser-lexer.py',434),
  ('read -> READ L_P read_args R_P SEMICOLON','read',5,'p_read','parser-lexer.py',438),
  ('read_args -> expression read_args1','read_args',2,'p_read_args','parser-lexer.py',442),
  ('read_args1 -> COMA expression read_args1','read_args1',3,'p_read_args1','parser-lexer.py',446),
  ('read_args1 -> empty','read_args1',1,'p_read_args1','parser-lexer.py',447),
  ('write -> PRINT L_P write_args R_P SEMICOLON','write',5,'p_write','parser-lexer.py',451),
  ('write_args -> write_args2 write_args1','write_args',2,'p_write_args','parser-lexer.py',455),
  ('write_args1 -> COMA write_args2 write_args1','write_args1',3,'p_write_args1','parser-lexer.py',459),
  ('write_args1 -> empty','write_args1',1,'p_write_args1','parser-lexer.py',460),
  ('write_args2 -> expression','write_args2',1,'p_write_args2','parser-lexer.py',464),
  ('write_args2 -> CTE_STRING','write_args2',1,'p_write_args2','parser-lexer.py',465),
  ('decision_statement -> IF L_P expression R_P L_B statements R_B decision_statement1','decision_statement',8,'p_decision_statement','parser-lexer.py',469),
  ('decision_statement1 -> ELSE L_B statements R_B','decision_statement1',4,'p_decision_statement1','parser-lexer.py',473),
  ('decision_statement1 -> empty','decision_statement1',1,'p_decision_statement1','parser-lexer.py',474),
  ('repetition_statement -> while_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',478),
  ('repetition_statement -> for_statement','repetition_statement',1,'p_repetition_statement','parser-lexer.py',479),
  ('for_statement -> FOR id EQUAL expression TO expression do_statement','for_statement',7,'p_for_statement','parser-lexer.py',483),
  ('while_statement -> WHILE L_P expression R_P do_statement','while_statement',5,'p_while_statement','parser-lexer.py',487),
  ('do_statement -> DO L_B statements R_B','do_statement',4,'p_do_statement','parser-lexer.py',491),
  ('expression -> texp generate_quad op1','expression',3,'p_expression','parser-lexer.py',495),
  ('texp -> gexp generate_quad op2','texp',3,'p_texp','parser-lexer.py',499),
  ('gexp -> mexp generate_quad op3aux','gexp',3,'p_gexp','parser-lexer.py',503),
  ('mexp -> term generate_quad op4aux','mexp',3,'p_mexp','parser-lexer.py',507),
  ('term -> fact generate_quad op5aux','term',3,'p_term','parser-lexer.py',511),
  ('generate_quad -> <empty>','generate_quad',0,'p_generate_quad','parser-lexer.py',515),
  ('fact -> id id_quad','fact',2,'p_fact','parser-lexer.py',522),
  ('fact -> call_func_exp','fact',1,'p_fact','parser-lexer.py',523),
  ('fact -> L_P expression R_P','fact',3,'p_fact','parser-lexer.py',524),
  ('fact -> cte','fact',1,'p_fact','parser-lexer.py',525),
  ('id_quad -> <empty>','id_quad',0,'p_id_quad','parser-lexer.py',530),
  ('cte -> CTE_F add_cte_float','cte',2,'p_cte','parser-lexer.py',547),
  ('cte -> CTE_I add_cte_int','cte',2,'p_cte','parser-lexer.py',548),
  ('cte -> CTE_CHAR add_cte_char','cte',2,'p_cte','parser-lexer.py',549),
  ('add_cte_int -> <empty>','add_cte_int',0,'p_add_cte_int','parser-lexer.py',553),
  ('add_cte_float -> <empty>','add_cte_float',0,'p_add_cte_float','parser-lexer.py',568),
  ('add_cte_char -> <empty>','add_cte_char',0,'p_add_cte_char','parser-lexer.py',583),
  ('op1 -> OR expression','op1',2,'p_op1','parser-lexer.py',598),
  ('op1 -> empty','op1',1,'p_op1','parser-lexer.py',599),
  ('op2 -> AND texp','op2',2,'p_op2','parser-lexer.py',606),
  ('op2 -> empty','op2',1,'p_op2','parser-lexer.py',607),
  ('op3 -> LESSTHAN','op3',1,'p_op3','parser-lexer.py',614),
  ('op3 -> LESSTHANEQ','op3',1,'p_op3','parser-lexer.py',615),
  ('op3 -> GREATERTHAN','op3',1,'p_op3','parser-lexer.py',616),
  ('op3 -> GREATERTHANEQ','op3',1,'p_op3','parser-lexer.py',617),
  ('op3 -> EQ','op3',1,'p_op3','parser-lexer.py',618),
  ('op3 -> DIFERENT','op3',1,'p_op3','parser-lexer.py',619),
  ('op3aux -> op3 mexp','op3aux',2,'p_op3aux','parser-lexer.py',625),
  ('op3aux -> empty','op3aux',1,'p_op3aux','parser-lexer.py',626),
  ('op4 -> PLUS','op4',1,'p_op4','parser-lexer.py',630),
  ('op4 -> MINUS','op4',1,'p_op4','parser-lexer.py',631),
  ('op4aux -> op4 mexp','op4aux',2,'p_op4aux','parser-lexer.py',637),
  ('op4aux -> empty','op4aux',1,'p_op4aux','parser-lexer.py',638),
  ('op5 -> MULT','op5',1,'p_op5','parser-lexer.py',642),
  ('op5 -> DIV','op5',1,'p_op5','parser-lexer.py',643),
  ('op5 -> MOD','op5',1,'p_op5','parser-lexer.py',644),
  ('op5aux -> op5 term','op5aux',2,'p_op5aux','parser-lexer.py',650),
  ('op5aux -> empty','op5aux',1,'p_op5aux','parser-lexer.py',651),
  ('empty -> <empty>','empty',0,'p_empty','parser-lexer.py',656),
]
