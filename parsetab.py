
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMP AND CHAR COMA CTE_CHAR CTE_F CTE_I CTE_NEG_I CTE_STRING DIFERENT DIV DO ELSE EQ EQUAL FLOAT FOR FUNC GREATERTHAN GREATERTHANEQ ID IF INT LESSTHAN LESSTHANEQ L_B L_P L_SB MAIN MINUS MOD MULT OR PLUS PRINT PROGRAM READ RETURN R_B R_P R_SB SEMICOLON TO VAR VOID WHILEprogram : PROGRAM ID main_quad SEMICOLON g_var funcs mainmain_quad : main : MAIN L_P params R_P var_declaration L_B main_start statements R_Bmain_start : type : INT\n            | FLOAT\n            | CHARg_var : var_declarationfuncs : function funcs\n            | emptyvar_declaration : VAR var1\n                        | emptyvar1 : var_type dec_id var2 SEMICOLON var4var2 : COMA dec_id var3\n            | emptyvar3 : var2var4 : var1\n            | emptydec_id : ID add_id dec_id1dec_id1 : L_SB CTE_I set_array R_SB dec_id2\n            | emptydec_id2 : L_SB CTE_I set_array_2 R_SB\n        | emptyadd_id : set_array : set_array_2 : id : ID set_id id_quad id1set_id : id1 : verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base\n            | emptyid2 : L_SB add_fake expression remove_fake verify_quad_2 R_SB\n        | emptyverify_dim : verify_quad_1 : verify_quad_2 : add_base : var_type : typefunction : FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_Bregister_func : add_params : start_func : func_type : VOID\n                | typeparams : var_type param_type dec_id params1\n            | emptyparam_type : params1 : COMA params\n                | emptystatements : statement statements\n                | emptystatement : assignation\n                | call_func\n                | return_func\n                | read\n                | write\n                | decision_statement\n                | repetition_statement\n                | expressionassignation : id EQUAL expression SEMICOLONargs : args1\n            | emptyargs1 : add_fake expression param_check remove_fake args2param_check : args2 : COMA next_arg args1\n            | emptynext_arg : call_func : AMP ID call_func_era L_P args R_P SEMICOLONcall_func_exp : AMP ID call_func_era L_P args R_Pcall_func_era : return_func : RETURN L_P expression R_P SEMICOLONread : READ L_P read_args R_P SEMICOLONread_args : add_fake expression remove_fake read_args1read_args1 : COMA add_fake expression remove_fake read_args1\n                | emptywrite : PRINT L_P write_args R_P SEMICOLONwrite_args : write_args2 write_args1write_args1 : COMA write_args2 write_args1\n                    | emptywrite_args2 : add_fake expression remove_fake\n                | CTE_STRING add_cte_stringdecision_statement : IF L_P expression R_P exp_type L_B statements R_B decision_statement1decision_statement1 : ELSE else_jump L_B statements R_B\n                            | emptyexp_type : else_jump : repetition_statement : while_statement\n                            | for_statementfor_statement : FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statementfor_id : for_id_quad : breadcrumb : while_statement : WHILE L_P breadcrumb expression R_P exp_type do_statementdo_statement :  DO L_B statements R_Bexpression : texp generate_quad_1 op1texp : gexp generate_quad_2 op2gexp : mexp generate_quad_3 op3auxmexp : term generate_quad_4 op4auxterm : fact generate_quad_5 op5auxgenerate_quad_1 : generate_quad_2 : generate_quad_3 : generate_quad_4 : generate_quad_5 : fact : call_func_exp\n            | id\n            | L_P add_fake expression R_P remove_fake\n            | cteadd_fake : remove_fake : \n        id_quad :\n    cte : CTE_CHAR add_cte_char\n            | CTE_F add_cte_float\n            | CTE_I add_cte_int\n            | CTE_NEG_I add_cte_int add_cte_int : add_cte_float : add_cte_char : add_cte_string : add_operator : op1 : OR add_operator expression\n            | emptyop2 : AND add_operator texp\n            | emptyop3 : LESSTHAN\n            | LESSTHANEQ\xa0\n            | GREATERTHAN\n            | GREATERTHANEQ\n            | EQ\n            | DIFERENTop3aux : op3 gexp\n            | emptyop4 : PLUS\n            | MINUSop4aux : op4 mexp\n            | emptyop5 : MULT\n        | DIV\n        | MODop5aux : op5 term\n            | empty\n        empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,20,105,],[0,-1,-3,]),'ID':([2,15,16,17,18,19,23,24,25,31,35,44,56,62,68,70,72,73,74,75,76,77,78,79,80,81,82,87,88,89,91,92,93,94,95,96,97,98,99,100,101,104,107,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,128,129,132,135,138,141,142,143,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,173,174,175,177,183,188,190,191,192,193,194,196,201,202,203,204,206,210,213,215,216,218,220,223,227,230,232,234,235,239,240,241,243,247,249,252,253,256,259,260,261,262,263,264,265,268,271,],[3,27,-37,-5,-6,-7,29,-42,-43,27,-46,27,-4,82,-108,82,-51,-52,-53,-54,-55,-56,-57,-58,-105,108,-28,-86,-87,-99,82,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,82,82,-110,82,-108,-108,82,-141,-91,-141,-141,-141,-141,-111,-112,-113,-114,-105,172,-141,82,82,-94,-119,-121,82,-95,-119,-123,-96,82,-131,-124,-125,-126,-127,-128,-129,-97,82,-135,-132,-133,-98,82,-140,-136,-137,-138,82,-109,-59,-108,-27,-30,-108,82,82,82,-130,-134,-139,-106,82,-108,-70,-71,-75,-120,-122,-108,-68,82,-108,82,-67,82,-92,-91,-68,-141,82,82,-66,-81,-83,-108,-141,-93,-108,-36,-32,82,-88,82,-29,-82,-31,]),'SEMICOLON':([3,4,26,27,30,32,33,39,40,42,49,50,61,66,67,82,89,92,93,94,95,96,97,98,99,100,101,109,114,117,118,119,120,121,122,123,124,128,130,132,141,143,146,148,149,151,158,160,163,165,170,171,175,177,178,179,181,192,193,194,196,210,213,216,235,253,260,261,265,271,],[-2,5,-141,-24,38,-15,-141,-141,-19,-21,-14,-16,-141,-20,-23,-28,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,-105,173,-141,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,-22,-109,-27,-30,203,204,206,-130,-134,-139,-106,-120,-122,227,-68,-141,-36,-32,-29,-31,]),'VAR':([5,43,60,64,],[8,8,-40,8,]),'FUNC':([5,6,7,9,11,14,38,46,47,48,214,],[-141,13,-8,-12,13,-11,-141,-13,-17,-18,-38,]),'MAIN':([5,6,7,9,10,11,12,14,22,38,46,47,48,214,],[-141,-141,-8,-12,21,-141,-10,-11,-9,-141,-13,-17,-18,-38,]),'INT':([8,13,28,38,45,58,],[17,17,17,17,17,17,]),'FLOAT':([8,13,28,38,45,58,],[18,18,18,18,18,18,]),'CHAR':([8,13,28,38,45,58,],[19,19,19,19,19,19,]),'L_B':([9,14,38,43,46,47,48,52,60,64,102,125,187,209,233,248,255,],[-12,-11,-141,-141,-13,-17,-18,56,-40,-141,-41,169,-84,223,240,-85,262,]),'VOID':([13,],[24,]),'L_P':([21,29,37,56,62,68,70,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,104,107,108,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,128,131,132,135,138,141,142,143,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,172,173,174,175,177,183,188,190,191,192,193,194,196,197,201,202,203,204,206,210,213,215,216,218,220,223,227,230,232,234,235,239,240,241,243,247,249,252,253,256,259,260,261,262,263,264,265,268,271,],[28,-39,45,-4,68,-108,68,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,110,111,112,113,-86,-87,-99,115,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,68,68,-69,-110,68,-108,-108,68,-141,-91,-141,-141,-141,-141,-111,-112,-113,-114,-105,174,-141,68,68,-94,-119,-121,68,-95,-119,-123,-96,68,-131,-124,-125,-126,-127,-128,-129,-97,68,-135,-132,-133,-98,68,-140,-136,-137,-138,68,-109,-69,-59,-108,-27,-30,-108,68,68,68,-130,-134,-139,-106,215,68,-108,-70,-71,-75,-120,-122,-108,-68,68,-108,68,-67,68,-92,-91,-68,-141,68,68,-66,-81,-83,-108,-141,-93,-108,-36,-32,68,-88,68,-29,-82,-31,]),'COMA':([26,27,33,39,40,42,53,61,66,67,82,89,92,93,94,95,96,97,98,99,100,101,109,114,117,118,119,120,121,122,123,124,128,132,137,139,141,143,146,148,149,151,158,160,163,165,170,171,175,177,180,185,186,192,193,194,196,205,207,208,210,213,217,228,235,236,238,246,253,260,261,265,271,],[31,-24,-141,31,-19,-21,58,-141,-20,-23,-28,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,183,-118,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,-22,-109,-27,-30,-109,-109,-80,-130,-134,-139,-106,220,183,-79,-120,-122,-63,-109,-68,243,-109,220,-141,-36,-32,-29,-31,]),'L_SB':([27,33,61,82,109,132,176,253,],[-24,41,65,-28,-110,-33,202,259,]),'R_P':([27,28,33,34,36,40,42,45,53,54,57,58,59,61,63,66,67,82,89,92,93,94,95,96,97,98,99,100,101,109,114,117,118,119,120,121,122,123,124,127,128,132,133,134,136,137,139,140,141,143,146,148,149,151,158,160,163,165,170,171,174,175,177,180,182,184,185,186,189,192,193,194,196,198,199,200,205,207,208,210,213,215,217,219,221,222,226,228,235,236,238,242,244,246,253,254,258,260,261,265,271,],[-24,-141,-141,43,-45,-19,-21,-141,-141,60,-44,-141,-48,-141,-47,-20,-23,-28,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,171,-105,-141,178,179,181,-141,-118,187,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,-22,-109,-141,-27,-30,-109,-76,-78,-109,-80,211,-130,-134,-139,-106,216,-60,-61,-141,-141,-79,-120,-122,-141,-63,-72,-74,-77,235,-109,-68,-141,-109,-62,-65,-141,-141,-73,-64,-36,-32,-29,-31,]),'CTE_I':([41,56,62,65,68,70,72,73,74,75,76,77,78,79,80,82,87,88,89,92,93,94,95,96,97,98,99,100,101,104,107,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,128,132,135,138,141,142,143,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,173,174,175,177,183,188,190,191,192,193,194,196,201,202,203,204,206,210,213,215,216,218,220,223,227,230,232,234,235,239,240,241,243,247,249,252,253,256,259,260,261,262,263,264,265,268,271,],[51,-4,100,103,-108,100,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,-86,-87,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,100,100,-110,100,-108,-108,100,-141,-91,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,100,100,-94,-119,-121,100,-95,-119,-123,-96,100,-131,-124,-125,-126,-127,-128,-129,-97,100,-135,-132,-133,-98,100,-140,-136,-137,-138,100,-109,-59,-108,-27,-30,-108,100,100,100,-130,-134,-139,-106,100,-108,-70,-71,-75,-120,-122,-108,-68,100,-108,100,-67,100,-92,-91,-68,-141,100,100,-66,-81,-83,-108,-141,-93,-108,-36,-32,100,-88,100,-29,-82,-31,]),'R_SB':([51,55,82,89,92,93,94,95,96,97,98,99,100,101,103,109,114,117,118,119,120,121,122,123,124,126,128,132,141,143,146,148,149,151,158,160,163,165,171,175,177,192,193,194,196,210,213,229,235,237,245,253,260,261,265,267,269,270,271,],[-25,61,-28,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-26,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,170,-105,-141,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,-109,-27,-30,-130,-134,-139,-106,-120,-122,-109,-68,-34,253,-141,-36,-32,-29,-109,-35,271,-31,]),'AMP':([56,62,68,70,72,73,74,75,76,77,78,79,80,82,87,88,89,92,93,94,95,96,97,98,99,100,101,104,107,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,128,132,135,138,141,142,143,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,173,174,175,177,183,188,190,191,192,193,194,196,201,202,203,204,206,210,213,215,216,218,220,223,227,230,232,234,235,239,240,241,243,247,249,252,253,256,259,260,261,262,263,264,265,268,271,],[-4,81,-108,81,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,-86,-87,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,129,129,-110,129,-108,-108,129,-141,-91,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,129,129,-94,-119,-121,129,-95,-119,-123,-96,129,-131,-124,-125,-126,-127,-128,-129,-97,129,-135,-132,-133,-98,129,-140,-136,-137,-138,81,-109,-59,-108,-27,-30,-108,129,129,129,-130,-134,-139,-106,129,-108,-70,-71,-75,-120,-122,-108,-68,129,-108,81,-67,129,-92,-91,-68,-141,81,129,-66,-81,-83,-108,-141,-93,-108,-36,-32,81,-88,129,-29,-82,-31,]),'RETURN':([56,62,70,72,73,74,75,76,77,78,79,80,82,87,88,89,92,93,94,95,96,97,98,99,100,101,109,114,117,118,119,120,121,122,123,124,128,132,141,143,146,148,149,151,158,160,163,165,169,171,173,175,177,192,193,194,196,203,204,206,210,213,216,223,227,232,235,239,240,247,249,253,256,260,261,262,263,265,268,271,],[-4,83,83,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,-86,-87,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,83,-109,-59,-27,-30,-130,-134,-139,-106,-70,-71,-75,-120,-122,-68,83,-67,-92,-68,-141,83,-81,-83,-141,-93,-36,-32,83,-88,-29,-82,-31,]),'READ':([56,62,70,72,73,74,75,76,77,78,79,80,82,87,88,89,92,93,94,95,96,97,98,99,100,101,109,114,117,118,119,120,121,122,123,124,128,132,141,143,146,148,149,151,158,160,163,165,169,171,173,175,177,192,193,194,196,203,204,206,210,213,216,223,227,232,235,239,240,247,249,253,256,260,261,262,263,265,268,271,],[-4,84,84,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,-86,-87,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,84,-109,-59,-27,-30,-130,-134,-139,-106,-70,-71,-75,-120,-122,-68,84,-67,-92,-68,-141,84,-81,-83,-141,-93,-36,-32,84,-88,-29,-82,-31,]),'PRINT':([56,62,70,72,73,74,75,76,77,78,79,80,82,87,88,89,92,93,94,95,96,97,98,99,100,101,109,114,117,118,119,120,121,122,123,124,128,132,141,143,146,148,149,151,158,160,163,165,169,171,173,175,177,192,193,194,196,203,204,206,210,213,216,223,227,232,235,239,240,247,249,253,256,260,261,262,263,265,268,271,],[-4,85,85,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,-86,-87,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,85,-109,-59,-27,-30,-130,-134,-139,-106,-70,-71,-75,-120,-122,-68,85,-67,-92,-68,-141,85,-81,-83,-141,-93,-36,-32,85,-88,-29,-82,-31,]),'IF':([56,62,70,72,73,74,75,76,77,78,79,80,82,87,88,89,92,93,94,95,96,97,98,99,100,101,109,114,117,118,119,120,121,122,123,124,128,132,141,143,146,148,149,151,158,160,163,165,169,171,173,175,177,192,193,194,196,203,204,206,210,213,216,223,227,232,235,239,240,247,249,253,256,260,261,262,263,265,268,271,],[-4,86,86,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,-86,-87,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,86,-109,-59,-27,-30,-130,-134,-139,-106,-70,-71,-75,-120,-122,-68,86,-67,-92,-68,-141,86,-81,-83,-141,-93,-36,-32,86,-88,-29,-82,-31,]),'WHILE':([56,62,70,72,73,74,75,76,77,78,79,80,82,87,88,89,92,93,94,95,96,97,98,99,100,101,109,114,117,118,119,120,121,122,123,124,128,132,141,143,146,148,149,151,158,160,163,165,169,171,173,175,177,192,193,194,196,203,204,206,210,213,216,223,227,232,235,239,240,247,249,253,256,260,261,262,263,265,268,271,],[-4,90,90,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,-86,-87,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,90,-109,-59,-27,-30,-130,-134,-139,-106,-70,-71,-75,-120,-122,-68,90,-67,-92,-68,-141,90,-81,-83,-141,-93,-36,-32,90,-88,-29,-82,-31,]),'FOR':([56,62,70,72,73,74,75,76,77,78,79,80,82,87,88,89,92,93,94,95,96,97,98,99,100,101,109,114,117,118,119,120,121,122,123,124,128,132,141,143,146,148,149,151,158,160,163,165,169,171,173,175,177,192,193,194,196,203,204,206,210,213,216,223,227,232,235,239,240,247,249,253,256,260,261,262,263,265,268,271,],[-4,91,91,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,-86,-87,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,91,-109,-59,-27,-30,-130,-134,-139,-106,-70,-71,-75,-120,-122,-68,91,-67,-92,-68,-141,91,-81,-83,-141,-93,-36,-32,91,-88,-29,-82,-31,]),'CTE_CHAR':([56,62,68,70,72,73,74,75,76,77,78,79,80,82,87,88,89,92,93,94,95,96,97,98,99,100,101,104,107,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,128,132,135,138,141,142,143,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,173,174,175,177,183,188,190,191,192,193,194,196,201,202,203,204,206,210,213,215,216,218,220,223,227,230,232,234,235,239,240,241,243,247,249,252,253,256,259,260,261,262,263,264,265,268,271,],[-4,98,-108,98,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,-86,-87,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,98,98,-110,98,-108,-108,98,-141,-91,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,98,98,-94,-119,-121,98,-95,-119,-123,-96,98,-131,-124,-125,-126,-127,-128,-129,-97,98,-135,-132,-133,-98,98,-140,-136,-137,-138,98,-109,-59,-108,-27,-30,-108,98,98,98,-130,-134,-139,-106,98,-108,-70,-71,-75,-120,-122,-108,-68,98,-108,98,-67,98,-92,-91,-68,-141,98,98,-66,-81,-83,-108,-141,-93,-108,-36,-32,98,-88,98,-29,-82,-31,]),'CTE_F':([56,62,68,70,72,73,74,75,76,77,78,79,80,82,87,88,89,92,93,94,95,96,97,98,99,100,101,104,107,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,128,132,135,138,141,142,143,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,173,174,175,177,183,188,190,191,192,193,194,196,201,202,203,204,206,210,213,215,216,218,220,223,227,230,232,234,235,239,240,241,243,247,249,252,253,256,259,260,261,262,263,264,265,268,271,],[-4,99,-108,99,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,-86,-87,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,99,99,-110,99,-108,-108,99,-141,-91,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,99,99,-94,-119,-121,99,-95,-119,-123,-96,99,-131,-124,-125,-126,-127,-128,-129,-97,99,-135,-132,-133,-98,99,-140,-136,-137,-138,99,-109,-59,-108,-27,-30,-108,99,99,99,-130,-134,-139,-106,99,-108,-70,-71,-75,-120,-122,-108,-68,99,-108,99,-67,99,-92,-91,-68,-141,99,99,-66,-81,-83,-108,-141,-93,-108,-36,-32,99,-88,99,-29,-82,-31,]),'CTE_NEG_I':([56,62,68,70,72,73,74,75,76,77,78,79,80,82,87,88,89,92,93,94,95,96,97,98,99,100,101,104,107,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,128,132,135,138,141,142,143,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,173,174,175,177,183,188,190,191,192,193,194,196,201,202,203,204,206,210,213,215,216,218,220,223,227,230,232,234,235,239,240,241,243,247,249,252,253,256,259,260,261,262,263,264,265,268,271,],[-4,101,-108,101,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,-86,-87,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,101,101,-110,101,-108,-108,101,-141,-91,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,101,101,-94,-119,-121,101,-95,-119,-123,-96,101,-131,-124,-125,-126,-127,-128,-129,-97,101,-135,-132,-133,-98,101,-140,-136,-137,-138,101,-109,-59,-108,-27,-30,-108,101,101,101,-130,-134,-139,-106,101,-108,-70,-71,-75,-120,-122,-108,-68,101,-108,101,-67,101,-92,-91,-68,-141,101,101,-66,-81,-83,-108,-141,-93,-108,-36,-32,101,-88,101,-29,-82,-31,]),'R_B':([56,62,69,70,71,72,73,74,75,76,77,78,79,80,82,87,88,89,92,93,94,95,96,97,98,99,100,101,106,109,114,117,118,119,120,121,122,123,124,128,132,141,143,146,148,149,151,158,160,163,165,169,171,173,175,177,192,193,194,195,196,203,204,206,210,213,216,223,227,231,232,235,239,240,247,249,250,253,256,260,261,262,263,265,266,268,271,],[-4,-141,105,-141,-50,-51,-52,-53,-54,-55,-56,-57,-58,-105,-28,-86,-87,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-49,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,-141,-109,-59,-27,-30,-130,-134,-139,214,-106,-70,-71,-75,-120,-122,-68,-141,-67,239,-92,-68,-141,-141,-81,-83,256,-141,-93,-36,-32,-141,-88,-29,268,-82,-31,]),'EQUAL':([80,82,109,116,132,145,175,177,253,260,261,265,271,],[107,-28,-110,-89,-141,190,-27,-30,-141,-36,-32,-29,-31,]),'MULT':([80,82,95,96,97,98,99,100,101,109,120,121,122,123,124,128,132,171,175,177,196,216,235,253,260,261,265,271,],[-105,-28,-103,-104,-107,-117,-116,-115,-115,-110,166,-111,-112,-113,-114,-105,-141,-109,-27,-30,-106,-68,-68,-141,-36,-32,-29,-31,]),'DIV':([80,82,95,96,97,98,99,100,101,109,120,121,122,123,124,128,132,171,175,177,196,216,235,253,260,261,265,271,],[-105,-28,-103,-104,-107,-117,-116,-115,-115,-110,167,-111,-112,-113,-114,-105,-141,-109,-27,-30,-106,-68,-68,-141,-36,-32,-29,-31,]),'MOD':([80,82,95,96,97,98,99,100,101,109,120,121,122,123,124,128,132,171,175,177,196,216,235,253,260,261,265,271,],[-105,-28,-103,-104,-107,-117,-116,-115,-115,-110,168,-111,-112,-113,-114,-105,-141,-109,-27,-30,-106,-68,-68,-141,-36,-32,-29,-31,]),'PLUS':([80,82,94,95,96,97,98,99,100,101,109,119,120,121,122,123,124,128,132,163,165,171,175,177,194,196,216,235,253,260,261,265,271,],[-105,-28,-102,-103,-104,-107,-117,-116,-115,-115,-110,161,-141,-111,-112,-113,-114,-105,-141,-98,-140,-109,-27,-30,-139,-106,-68,-68,-141,-36,-32,-29,-31,]),'MINUS':([80,82,94,95,96,97,98,99,100,101,109,119,120,121,122,123,124,128,132,163,165,171,175,177,194,196,216,235,253,260,261,265,271,],[-105,-28,-102,-103,-104,-107,-117,-116,-115,-115,-110,162,-141,-111,-112,-113,-114,-105,-141,-98,-140,-109,-27,-30,-139,-106,-68,-68,-141,-36,-32,-29,-31,]),'LESSTHAN':([80,82,93,94,95,96,97,98,99,100,101,109,118,119,120,121,122,123,124,128,132,158,160,163,165,171,175,177,193,194,196,216,235,253,260,261,265,271,],[-105,-28,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,152,-141,-141,-111,-112,-113,-114,-105,-141,-97,-135,-98,-140,-109,-27,-30,-134,-139,-106,-68,-68,-141,-36,-32,-29,-31,]),'LESSTHANEQ':([80,82,93,94,95,96,97,98,99,100,101,109,118,119,120,121,122,123,124,128,132,158,160,163,165,171,175,177,193,194,196,216,235,253,260,261,265,271,],[-105,-28,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,153,-141,-141,-111,-112,-113,-114,-105,-141,-97,-135,-98,-140,-109,-27,-30,-134,-139,-106,-68,-68,-141,-36,-32,-29,-31,]),'GREATERTHAN':([80,82,93,94,95,96,97,98,99,100,101,109,118,119,120,121,122,123,124,128,132,158,160,163,165,171,175,177,193,194,196,216,235,253,260,261,265,271,],[-105,-28,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,154,-141,-141,-111,-112,-113,-114,-105,-141,-97,-135,-98,-140,-109,-27,-30,-134,-139,-106,-68,-68,-141,-36,-32,-29,-31,]),'GREATERTHANEQ':([80,82,93,94,95,96,97,98,99,100,101,109,118,119,120,121,122,123,124,128,132,158,160,163,165,171,175,177,193,194,196,216,235,253,260,261,265,271,],[-105,-28,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,155,-141,-141,-111,-112,-113,-114,-105,-141,-97,-135,-98,-140,-109,-27,-30,-134,-139,-106,-68,-68,-141,-36,-32,-29,-31,]),'EQ':([80,82,93,94,95,96,97,98,99,100,101,109,118,119,120,121,122,123,124,128,132,158,160,163,165,171,175,177,193,194,196,216,235,253,260,261,265,271,],[-105,-28,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,156,-141,-141,-111,-112,-113,-114,-105,-141,-97,-135,-98,-140,-109,-27,-30,-134,-139,-106,-68,-68,-141,-36,-32,-29,-31,]),'DIFERENT':([80,82,93,94,95,96,97,98,99,100,101,109,118,119,120,121,122,123,124,128,132,158,160,163,165,171,175,177,193,194,196,216,235,253,260,261,265,271,],[-105,-28,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,157,-141,-141,-111,-112,-113,-114,-105,-141,-97,-135,-98,-140,-109,-27,-30,-134,-139,-106,-68,-68,-141,-36,-32,-29,-31,]),'AND':([80,82,92,93,94,95,96,97,98,99,100,101,109,117,118,119,120,121,122,123,124,128,132,149,151,158,160,163,165,171,175,177,192,193,194,196,216,235,253,260,261,265,271,],[-105,-28,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,147,-141,-141,-141,-111,-112,-113,-114,-105,-141,-96,-131,-97,-135,-98,-140,-109,-27,-30,-130,-134,-139,-106,-68,-68,-141,-36,-32,-29,-31,]),'OR':([80,82,89,92,93,94,95,96,97,98,99,100,101,109,114,117,118,119,120,121,122,123,124,128,132,146,148,149,151,158,160,163,165,171,175,177,192,193,194,196,213,216,235,253,260,261,265,271,],[-105,-28,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,142,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,-95,-123,-96,-131,-97,-135,-98,-140,-109,-27,-30,-130,-134,-139,-106,-122,-68,-68,-141,-36,-32,-29,-31,]),'TO':([82,89,92,93,94,95,96,97,98,99,100,101,109,114,117,118,119,120,121,122,123,124,128,132,141,143,146,148,149,151,158,160,163,165,171,175,177,192,193,194,196,210,212,213,225,235,253,260,261,265,271,],[-28,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,-109,-27,-30,-130,-134,-139,-106,-120,-90,-122,234,-68,-141,-36,-32,-29,-31,]),'DO':([82,89,92,93,94,95,96,97,98,99,100,101,109,114,117,118,119,120,121,122,123,124,128,132,141,143,146,148,149,151,158,160,163,165,171,175,177,192,193,194,196,210,211,213,224,235,251,253,257,260,261,265,271,],[-28,-99,-100,-101,-102,-103,-104,-107,-117,-116,-115,-115,-110,-141,-141,-141,-141,-141,-111,-112,-113,-114,-105,-141,-94,-121,-95,-123,-96,-131,-97,-135,-98,-140,-109,-27,-30,-130,-134,-139,-106,-120,-84,-122,233,-68,-84,-141,233,-36,-32,-29,-31,]),'CTE_STRING':([112,183,],[139,139,]),'ELSE':([239,],[248,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'main_quad':([3,],[4,]),'g_var':([5,],[6,]),'var_declaration':([5,43,64,],[7,52,102,]),'empty':([5,6,11,26,28,33,38,39,43,45,53,58,61,62,64,70,114,117,118,119,120,132,137,169,174,205,207,215,223,236,239,240,246,253,262,],[9,12,12,32,36,42,48,32,9,36,59,36,67,71,9,71,143,148,151,160,165,177,184,71,200,221,184,200,71,244,249,71,221,261,71,]),'funcs':([6,11,],[10,22,]),'function':([6,11,],[11,11,]),'var1':([8,38,],[14,47,]),'var_type':([8,28,38,45,58,],[15,35,15,35,35,]),'type':([8,13,28,38,45,58,],[16,25,16,16,16,16,]),'main':([10,],[20,]),'func_type':([13,],[23,]),'dec_id':([15,31,44,],[26,39,53,]),'var2':([26,39,],[30,50,]),'add_id':([27,],[33,]),'params':([28,45,58,],[34,54,63,]),'register_func':([29,],[37,]),'dec_id1':([33,],[40,]),'param_type':([35,],[44,]),'var4':([38,],[46,]),'var3':([39,],[49,]),'set_array':([51,],[55,]),'params1':([53,],[57,]),'main_start':([56,],[62,]),'add_params':([60,],[64,]),'dec_id2':([61,],[66,]),'statements':([62,70,169,223,240,262,],[69,106,195,231,250,266,]),'statement':([62,70,169,223,240,262,],[70,70,70,70,70,70,]),'assignation':([62,70,169,223,240,262,],[72,72,72,72,72,72,]),'call_func':([62,70,169,223,240,262,],[73,73,73,73,73,73,]),'return_func':([62,70,169,223,240,262,],[74,74,74,74,74,74,]),'read':([62,70,169,223,240,262,],[75,75,75,75,75,75,]),'write':([62,70,169,223,240,262,],[76,76,76,76,76,76,]),'decision_statement':([62,70,169,223,240,262,],[77,77,77,77,77,77,]),'repetition_statement':([62,70,169,223,240,262,],[78,78,78,78,78,78,]),'expression':([62,70,104,107,110,113,135,138,144,169,188,190,201,218,223,230,240,241,262,264,],[79,79,127,130,133,140,180,185,189,79,210,212,217,229,79,238,79,251,79,267,]),'id':([62,70,91,104,107,110,113,135,138,144,150,159,164,169,188,190,191,201,218,223,230,240,241,262,264,],[80,80,116,128,128,128,128,128,128,128,128,128,128,80,128,128,128,128,128,80,128,80,128,80,128,]),'while_statement':([62,70,169,223,240,262,],[87,87,87,87,87,87,]),'for_statement':([62,70,169,223,240,262,],[88,88,88,88,88,88,]),'texp':([62,70,104,107,110,113,135,138,144,169,188,190,191,201,218,223,230,240,241,262,264,],[89,89,89,89,89,89,89,89,89,89,89,89,213,89,89,89,89,89,89,89,89,]),'gexp':([62,70,104,107,110,113,135,138,144,150,169,188,190,191,201,218,223,230,240,241,262,264,],[92,92,92,92,92,92,92,92,92,192,92,92,92,92,92,92,92,92,92,92,92,92,]),'mexp':([62,70,104,107,110,113,135,138,144,150,159,169,188,190,191,201,218,223,230,240,241,262,264,],[93,93,93,93,93,93,93,93,93,93,193,93,93,93,93,93,93,93,93,93,93,93,93,]),'term':([62,70,104,107,110,113,135,138,144,150,159,164,169,188,190,191,201,218,223,230,240,241,262,264,],[94,94,94,94,94,94,94,94,94,94,94,194,94,94,94,94,94,94,94,94,94,94,94,94,]),'fact':([62,70,104,107,110,113,135,138,144,150,159,164,169,188,190,191,201,218,223,230,240,241,262,264,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'call_func_exp':([62,70,104,107,110,113,135,138,144,150,159,164,169,188,190,191,201,218,223,230,240,241,262,264,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'cte':([62,70,104,107,110,113,135,138,144,150,159,164,169,188,190,191,201,218,223,230,240,241,262,264,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'add_fake':([68,111,112,174,183,202,215,220,252,259,],[104,135,138,201,138,218,201,230,201,264,]),'set_id':([82,],[109,]),'generate_quad_1':([89,],[114,]),'generate_quad_2':([92,],[117,]),'generate_quad_3':([93,],[118,]),'generate_quad_4':([94,],[119,]),'generate_quad_5':([95,],[120,]),'add_cte_char':([98,],[121,]),'add_cte_float':([99,],[122,]),'add_cte_int':([100,101,],[123,124,]),'start_func':([102,],[125,]),'set_array_2':([103,],[126,]),'call_func_era':([108,172,],[131,197,]),'id_quad':([109,],[132,]),'read_args':([111,],[134,]),'write_args':([112,],[136,]),'write_args2':([112,183,],[137,207,]),'op1':([114,],[141,]),'breadcrumb':([115,234,],[144,241,]),'for_id':([116,],[145,]),'op2':([117,],[146,]),'op3aux':([118,],[149,]),'op3':([118,],[150,]),'op4aux':([119,],[158,]),'op4':([119,],[159,]),'op5aux':([120,],[163,]),'op5':([120,],[164,]),'id1':([132,],[175,]),'verify_dim':([132,],[176,]),'write_args1':([137,207,],[182,222,]),'add_cte_string':([139,],[186,]),'add_operator':([142,147,],[188,191,]),'remove_fake':([171,180,185,228,229,238,267,],[196,205,208,236,237,246,269,]),'args':([174,215,],[198,226,]),'args1':([174,215,252,],[199,199,258,]),'exp_type':([187,211,251,],[209,224,257,]),'read_args1':([205,246,],[219,254,]),'for_id_quad':([212,],[225,]),'param_check':([217,],[228,]),'do_statement':([224,257,],[232,263,]),'args2':([236,],[242,]),'verify_quad_1':([237,],[245,]),'decision_statement1':([239,],[247,]),'next_arg':([243,],[252,]),'else_jump':([248,],[255,]),'id2':([253,],[260,]),'add_base':([260,],[265,]),'verify_quad_2':([269,],[270,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID main_quad SEMICOLON g_var funcs main','program',7,'p_program','parser_lexer.py',226),
  ('main_quad -> <empty>','main_quad',0,'p_main_quad','parser_lexer.py',234),
  ('main -> MAIN L_P params R_P var_declaration L_B main_start statements R_B','main',9,'p_main','parser_lexer.py',240),
  ('main_start -> <empty>','main_start',0,'p_main_start','parser_lexer.py',258),
  ('type -> INT','type',1,'p_type','parser_lexer.py',263),
  ('type -> FLOAT','type',1,'p_type','parser_lexer.py',264),
  ('type -> CHAR','type',1,'p_type','parser_lexer.py',265),
  ('g_var -> var_declaration','g_var',1,'p_g_var','parser_lexer.py',271),
  ('funcs -> function funcs','funcs',2,'p_funcs','parser_lexer.py',278),
  ('funcs -> empty','funcs',1,'p_funcs','parser_lexer.py',279),
  ('var_declaration -> VAR var1','var_declaration',2,'p_var_declaration','parser_lexer.py',283),
  ('var_declaration -> empty','var_declaration',1,'p_var_declaration','parser_lexer.py',284),
  ('var1 -> var_type dec_id var2 SEMICOLON var4','var1',5,'p_var1','parser_lexer.py',288),
  ('var2 -> COMA dec_id var3','var2',3,'p_var2','parser_lexer.py',292),
  ('var2 -> empty','var2',1,'p_var2','parser_lexer.py',293),
  ('var3 -> var2','var3',1,'p_var3','parser_lexer.py',297),
  ('var4 -> var1','var4',1,'p_var4','parser_lexer.py',301),
  ('var4 -> empty','var4',1,'p_var4','parser_lexer.py',302),
  ('dec_id -> ID add_id dec_id1','dec_id',3,'p_dec_id','parser_lexer.py',306),
  ('dec_id1 -> L_SB CTE_I set_array R_SB dec_id2','dec_id1',5,'p_dec_id1','parser_lexer.py',310),
  ('dec_id1 -> empty','dec_id1',1,'p_dec_id1','parser_lexer.py',311),
  ('dec_id2 -> L_SB CTE_I set_array_2 R_SB','dec_id2',4,'p_dec_id2','parser_lexer.py',315),
  ('dec_id2 -> empty','dec_id2',1,'p_dec_id2','parser_lexer.py',316),
  ('add_id -> <empty>','add_id',0,'p_add_id','parser_lexer.py',320),
  ('set_array -> <empty>','set_array',0,'p_set_array','parser_lexer.py',340),
  ('set_array_2 -> <empty>','set_array_2',0,'p_set_array_2','parser_lexer.py',357),
  ('id -> ID set_id id_quad id1','id',4,'p_id','parser_lexer.py',375),
  ('set_id -> <empty>','set_id',0,'p_set_id','parser_lexer.py',379),
  ('id1 -> verify_dim L_SB add_fake expression remove_fake verify_quad_1 R_SB id2 add_base','id1',9,'p_id1','parser_lexer.py',385),
  ('id1 -> empty','id1',1,'p_id1','parser_lexer.py',386),
  ('id2 -> L_SB add_fake expression remove_fake verify_quad_2 R_SB','id2',6,'p_id2','parser_lexer.py',390),
  ('id2 -> empty','id2',1,'p_id2','parser_lexer.py',391),
  ('verify_dim -> <empty>','verify_dim',0,'p_verify_dim','parser_lexer.py',395),
  ('verify_quad_1 -> <empty>','verify_quad_1',0,'p_verify_quad_1','parser_lexer.py',408),
  ('verify_quad_2 -> <empty>','verify_quad_2',0,'p_verify_quad_2','parser_lexer.py',442),
  ('add_base -> <empty>','add_base',0,'p_add_base','parser_lexer.py',475),
  ('var_type -> type','var_type',1,'p_var_type','parser_lexer.py',509),
  ('function -> FUNC func_type ID register_func L_P params R_P add_params var_declaration start_func L_B statements R_B','function',13,'p_function','parser_lexer.py',513),
  ('register_func -> <empty>','register_func',0,'p_register_func','parser_lexer.py',527),
  ('add_params -> <empty>','add_params',0,'p_add_params','parser_lexer.py',542),
  ('start_func -> <empty>','start_func',0,'p_start_func','parser_lexer.py',548),
  ('func_type -> VOID','func_type',1,'p_func_type','parser_lexer.py',554),
  ('func_type -> type','func_type',1,'p_func_type','parser_lexer.py',555),
  ('params -> var_type param_type dec_id params1','params',4,'p_params','parser_lexer.py',562),
  ('params -> empty','params',1,'p_params','parser_lexer.py',563),
  ('param_type -> <empty>','param_type',0,'p_param_type','parser_lexer.py',567),
  ('params1 -> COMA params','params1',2,'p_params1','parser_lexer.py',574),
  ('params1 -> empty','params1',1,'p_params1','parser_lexer.py',575),
  ('statements -> statement statements','statements',2,'p_statements','parser_lexer.py',579),
  ('statements -> empty','statements',1,'p_statements','parser_lexer.py',580),
  ('statement -> assignation','statement',1,'p_statement','parser_lexer.py',584),
  ('statement -> call_func','statement',1,'p_statement','parser_lexer.py',585),
  ('statement -> return_func','statement',1,'p_statement','parser_lexer.py',586),
  ('statement -> read','statement',1,'p_statement','parser_lexer.py',587),
  ('statement -> write','statement',1,'p_statement','parser_lexer.py',588),
  ('statement -> decision_statement','statement',1,'p_statement','parser_lexer.py',589),
  ('statement -> repetition_statement','statement',1,'p_statement','parser_lexer.py',590),
  ('statement -> expression','statement',1,'p_statement','parser_lexer.py',591),
  ('assignation -> id EQUAL expression SEMICOLON','assignation',4,'p_assignation','parser_lexer.py',595),
  ('args -> args1','args',1,'p_args','parser_lexer.py',610),
  ('args -> empty','args',1,'p_args','parser_lexer.py',611),
  ('args1 -> add_fake expression param_check remove_fake args2','args1',5,'p_args1','parser_lexer.py',615),
  ('param_check -> <empty>','param_check',0,'p_param_check','parser_lexer.py',619),
  ('args2 -> COMA next_arg args1','args2',3,'p_args2','parser_lexer.py',634),
  ('args2 -> empty','args2',1,'p_args2','parser_lexer.py',635),
  ('next_arg -> <empty>','next_arg',0,'p_next_arg','parser_lexer.py',639),
  ('call_func -> AMP ID call_func_era L_P args R_P SEMICOLON','call_func',7,'p_call_func','parser_lexer.py',645),
  ('call_func_exp -> AMP ID call_func_era L_P args R_P','call_func_exp',6,'p_call_func_exp','parser_lexer.py',656),
  ('call_func_era -> <empty>','call_func_era',0,'p_call_func_era','parser_lexer.py',679),
  ('return_func -> RETURN L_P expression R_P SEMICOLON','return_func',5,'p_return_func','parser_lexer.py',690),
  ('read -> READ L_P read_args R_P SEMICOLON','read',5,'p_read','parser_lexer.py',700),
  ('read_args -> add_fake expression remove_fake read_args1','read_args',4,'p_read_args','parser_lexer.py',709),
  ('read_args1 -> COMA add_fake expression remove_fake read_args1','read_args1',5,'p_read_args1','parser_lexer.py',713),
  ('read_args1 -> empty','read_args1',1,'p_read_args1','parser_lexer.py',714),
  ('write -> PRINT L_P write_args R_P SEMICOLON','write',5,'p_write','parser_lexer.py',718),
  ('write_args -> write_args2 write_args1','write_args',2,'p_write_args','parser_lexer.py',722),
  ('write_args1 -> COMA write_args2 write_args1','write_args1',3,'p_write_args1','parser_lexer.py',726),
  ('write_args1 -> empty','write_args1',1,'p_write_args1','parser_lexer.py',727),
  ('write_args2 -> add_fake expression remove_fake','write_args2',3,'p_write_args2','parser_lexer.py',731),
  ('write_args2 -> CTE_STRING add_cte_string','write_args2',2,'p_write_args2','parser_lexer.py',732),
  ('decision_statement -> IF L_P expression R_P exp_type L_B statements R_B decision_statement1','decision_statement',9,'p_decision_statement','parser_lexer.py',740),
  ('decision_statement1 -> ELSE else_jump L_B statements R_B','decision_statement1',5,'p_decision_statement1','parser_lexer.py',747),
  ('decision_statement1 -> empty','decision_statement1',1,'p_decision_statement1','parser_lexer.py',748),
  ('exp_type -> <empty>','exp_type',0,'p_exp_type','parser_lexer.py',752),
  ('else_jump -> <empty>','else_jump',0,'p_else_jump','parser_lexer.py',764),
  ('repetition_statement -> while_statement','repetition_statement',1,'p_repetition_statement','parser_lexer.py',773),
  ('repetition_statement -> for_statement','repetition_statement',1,'p_repetition_statement','parser_lexer.py',774),
  ('for_statement -> FOR id for_id EQUAL expression for_id_quad TO breadcrumb expression exp_type do_statement','for_statement',11,'p_for_statement','parser_lexer.py',778),
  ('for_id -> <empty>','for_id',0,'p_for_id','parser_lexer.py',804),
  ('for_id_quad -> <empty>','for_id_quad',0,'p_for_id_quad','parser_lexer.py',809),
  ('breadcrumb -> <empty>','breadcrumb',0,'p_breadcrumb','parser_lexer.py',824),
  ('while_statement -> WHILE L_P breadcrumb expression R_P exp_type do_statement','while_statement',7,'p_while_statement','parser_lexer.py',830),
  ('do_statement -> DO L_B statements R_B','do_statement',4,'p_do_statement','parser_lexer.py',839),
  ('expression -> texp generate_quad_1 op1','expression',3,'p_expression','parser_lexer.py',843),
  ('texp -> gexp generate_quad_2 op2','texp',3,'p_texp','parser_lexer.py',847),
  ('gexp -> mexp generate_quad_3 op3aux','gexp',3,'p_gexp','parser_lexer.py',851),
  ('mexp -> term generate_quad_4 op4aux','mexp',3,'p_mexp','parser_lexer.py',855),
  ('term -> fact generate_quad_5 op5aux','term',3,'p_term','parser_lexer.py',859),
  ('generate_quad_1 -> <empty>','generate_quad_1',0,'p_generate_quad_1','parser_lexer.py',863),
  ('generate_quad_2 -> <empty>','generate_quad_2',0,'p_generate_quad_2','parser_lexer.py',870),
  ('generate_quad_3 -> <empty>','generate_quad_3',0,'p_generate_quad_3','parser_lexer.py',877),
  ('generate_quad_4 -> <empty>','generate_quad_4',0,'p_generate_quad_4','parser_lexer.py',884),
  ('generate_quad_5 -> <empty>','generate_quad_5',0,'p_generate_quad_5','parser_lexer.py',891),
  ('fact -> call_func_exp','fact',1,'p_fact','parser_lexer.py',898),
  ('fact -> id','fact',1,'p_fact','parser_lexer.py',899),
  ('fact -> L_P add_fake expression R_P remove_fake','fact',5,'p_fact','parser_lexer.py',900),
  ('fact -> cte','fact',1,'p_fact','parser_lexer.py',901),
  ('add_fake -> <empty>','add_fake',0,'p_add_fake','parser_lexer.py',905),
  ('remove_fake -> <empty>','remove_fake',0,'p_remove_fake','parser_lexer.py',911),
  ('id_quad -> <empty>','id_quad',0,'p_id_quad','parser_lexer.py',918),
  ('cte -> CTE_CHAR add_cte_char','cte',2,'p_cte','parser_lexer.py',942),
  ('cte -> CTE_F add_cte_float','cte',2,'p_cte','parser_lexer.py',943),
  ('cte -> CTE_I add_cte_int','cte',2,'p_cte','parser_lexer.py',944),
  ('cte -> CTE_NEG_I add_cte_int','cte',2,'p_cte','parser_lexer.py',945),
  ('add_cte_int -> <empty>','add_cte_int',0,'p_add_cte_int','parser_lexer.py',949),
  ('add_cte_float -> <empty>','add_cte_float',0,'p_add_cte_float','parser_lexer.py',964),
  ('add_cte_char -> <empty>','add_cte_char',0,'p_add_cte_char','parser_lexer.py',979),
  ('add_cte_string -> <empty>','add_cte_string',0,'p_add_cte_string','parser_lexer.py',994),
  ('add_operator -> <empty>','add_operator',0,'p_add_operator','parser_lexer.py',1009),
  ('op1 -> OR add_operator expression','op1',3,'p_op1','parser_lexer.py',1015),
  ('op1 -> empty','op1',1,'p_op1','parser_lexer.py',1016),
  ('op2 -> AND add_operator texp','op2',3,'p_op2','parser_lexer.py',1020),
  ('op2 -> empty','op2',1,'p_op2','parser_lexer.py',1021),
  ('op3 -> LESSTHAN','op3',1,'p_op3','parser_lexer.py',1025),
  ('op3 -> LESSTHANEQ','op3',1,'p_op3','parser_lexer.py',1026),
  ('op3 -> GREATERTHAN','op3',1,'p_op3','parser_lexer.py',1027),
  ('op3 -> GREATERTHANEQ','op3',1,'p_op3','parser_lexer.py',1028),
  ('op3 -> EQ','op3',1,'p_op3','parser_lexer.py',1029),
  ('op3 -> DIFERENT','op3',1,'p_op3','parser_lexer.py',1030),
  ('op3aux -> op3 gexp','op3aux',2,'p_op3aux','parser_lexer.py',1036),
  ('op3aux -> empty','op3aux',1,'p_op3aux','parser_lexer.py',1037),
  ('op4 -> PLUS','op4',1,'p_op4','parser_lexer.py',1041),
  ('op4 -> MINUS','op4',1,'p_op4','parser_lexer.py',1042),
  ('op4aux -> op4 mexp','op4aux',2,'p_op4aux','parser_lexer.py',1048),
  ('op4aux -> empty','op4aux',1,'p_op4aux','parser_lexer.py',1049),
  ('op5 -> MULT','op5',1,'p_op5','parser_lexer.py',1053),
  ('op5 -> DIV','op5',1,'p_op5','parser_lexer.py',1054),
  ('op5 -> MOD','op5',1,'p_op5','parser_lexer.py',1055),
  ('op5aux -> op5 term','op5aux',2,'p_op5aux','parser_lexer.py',1061),
  ('op5aux -> empty','op5aux',1,'p_op5aux','parser_lexer.py',1062),
  ('empty -> <empty>','empty',0,'p_empty','parser_lexer.py',1067),
]
